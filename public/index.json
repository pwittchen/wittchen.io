[{"content":"Here\u0026rsquo;s the list of equipment and software I use personally and professionally:\nServer  W1GB hosting server by cyberfolks.pl  Software  OS: Arch Linux / macOS WM: i3 shell: Zsh + Oh my zsh + Tmux terminal: Gnome Terminal + iTerm2 text editor: Vim non-terminal text editor: VS Code + Sublime Text IDE: IntelliJ IDEA + Android Studio + PyCharm + Xcode + AppCode VCS: Git web browser: Brave + Safari file manager: Ranger + mc PDF viewer: Zathura image viewer: Sxiv image editing: Gthumb + Pixeluvo music and podcasts: Spotify + spotify-cli-linux videos: VLC RSS reader: Newsboat Excel-like spreadsheets: Libre Office torrent client: Transmission to do list: Nozbe notes: Simplenote + Physical notebook password manager: Pass presentations: Google Slides calendar: Google Calendar email: Gmail repository hosting: GitHub invoices and accounting: InFakt  Configuration  dotfiles wallpapers  Hardware  ThinkPad T470S (CPU: Intel i7-7600U, GPU: Intel HD Graphics 620, RAM: 16 GB, SSD: 512 GB) Macbook Air M1 (CPU: Apple M1 ARM64, RAM: 8 GB, SSD: 256 GB) Samsung C34H890WJUX Curved monitor Logitech MX Keys Mini Keyboard Logitech MX Master Mouse Logitech Webcam C925e 1080p JBL Charge 3 speaker Sennheiser HD 599 cable headphones Sennheiser Momentum True Wireless headphones Samson Go Mic LaCie Rugged Mini 1TB USB 3.0 external hard drive Google Pixel 6 phone Samsung Galaxy Watch 5  Desk  IKEA SKARSTA desk IKEA JÄRVFJÄLLET chair IKEA KOLON floor protector Xiaomi Mi LED Desk Lamp Tsmn.cc Leather Mousepad Shelter wooden double laptop stand  ","permalink":"https://wittchen.io/setup/","summary":"Here\u0026rsquo;s the list of equipment and software I use personally and professionally:\nServer  W1GB hosting server by cyberfolks.pl  Software  OS: Arch Linux / macOS WM: i3 shell: Zsh + Oh my zsh + Tmux terminal: Gnome Terminal + iTerm2 text editor: Vim non-terminal text editor: VS Code + Sublime Text IDE: IntelliJ IDEA + Android Studio + PyCharm + Xcode + AppCode VCS: Git web browser: Brave + Safari file manager: Ranger + mc PDF viewer: Zathura image viewer: Sxiv image editing: Gthumb + Pixeluvo music and podcasts: Spotify + spotify-cli-linux videos: VLC RSS reader: Newsboat Excel-like spreadsheets: Libre Office torrent client: Transmission to do list: Nozbe notes: Simplenote + Physical notebook password manager: Pass presentations: Google Slides calendar: Google Calendar email: Gmail repository hosting: GitHub invoices and accounting: InFakt  Configuration  dotfiles wallpapers  Hardware  ThinkPad T470S (CPU: Intel i7-7600U, GPU: Intel HD Graphics 620, RAM: 16 GB, SSD: 512 GB) Macbook Air M1 (CPU: Apple M1 ARM64, RAM: 8 GB, SSD: 256 GB) Samsung C34H890WJUX Curved monitor Logitech MX Keys Mini Keyboard Logitech MX Master Mouse Logitech Webcam C925e 1080p JBL Charge 3 speaker Sennheiser HD 599 cable headphones Sennheiser Momentum True Wireless headphones Samson Go Mic LaCie Rugged Mini 1TB USB 3.","title":"Setup"},{"content":"If you want to ask me about something, start cooperation, hire me or just say hi, send me a message to piotr@wittchen.io.\n","permalink":"https://wittchen.io/contact/","summary":"If you want to ask me about something, start cooperation, hire me or just say hi, send me a message to piotr@wittchen.io.","title":"Contact"},{"content":"Please wait, redirecting to download\u0026hellip;\n","permalink":"https://wittchen.io/cv/","summary":"Please wait, redirecting to download\u0026hellip;","title":"cv/resume"},{"content":"Please wait, redirecting\u0026hellip;\n","permalink":"https://wittchen.io/gh/","summary":"Please wait, redirecting\u0026hellip;","title":"GitHub"},{"content":" ","permalink":"https://wittchen.io/mail/","summary":" ","title":"GitHub"},{"content":" ","permalink":"https://wittchen.io/gp/","summary":" ","title":"Google Play"},{"content":"Please wait, redirecting\u0026hellip;\n","permalink":"https://wittchen.io/in/","summary":"Please wait, redirecting\u0026hellip;","title":"LinkedIn"},{"content":"Please wait, redirecting\u0026hellip;\n","permalink":"https://wittchen.io/so/","summary":"Please wait, redirecting\u0026hellip;","title":"StackOverflow"},{"content":"If you would like to invite me for the conference or a meetup to give a talk, feel free to contact me!\n 2021-12-29 Git - mini-szkolenie [PL] Digital Fingerprints, internal training (Katowice, Poland / online) 2019-01-10 Brain-Computer Interfaces - Science Fiction or Reality? Toast Meetup (Wrocław, Poland) 2018-11-19 Brain-Computer Interfaces - Science Fiction or Reality? Øredev (Malmö, Sweden) 2018-10-20 Is your app really connected? Mobilization (Łódź, Poland) watch video [EN] 2018-09-13 Brain-Computer Interfaces - Science Fiction or Reality? SAP Lunch Talks (Gliwice, Poland) 2018-03-15 Get ready for java.util.concurrent.Flow! Hackin’ Gliwice (Gliwice, Poland) watch video [PL] 2018-02-08 Fixing a billion dollar mistake Quality Meetup (Katowice, Poland) 2017-12-16 Get ready for java.util.concurrent.Flow! infoMEET (Wrocław, Poland) 2017-12-04 Get ready for java.util.concurrent.Flow! Kraków Java Users Group (Kraków, Poland) 2017-12-01 Is your app really connected? DroidCon Poland (Kraków, Poland) 2017-11-18 How to make open-source projects, which people want to use SpreadIT (Gliwice, Poland) 2017-11-08 Reactive Programming – efficient server applications (presented with Arek Galwas) HYC (Gliwice, Poland) 2017-10-20 Git - tips and tricks Meet and Code (Gliwice, Poland) 2017-10-03 Get ready for java.util.concurrent.Flow! JDD (Kraków, Poland) watch video [PL] 2017-08-03 How to make open-source projects, which people want to use SAP Hybris Lunch Talks (Gliwice, Poland) 2017-04-01 How to make open-source projects, which people want to use Kariera IT (Katowice, Poland) 2016-02-05 Reactive Live Coding Silesia Java Users Group (Katowice, Poland) 2016-01-28 Reactive Live Coding Gliwice Software Barcamp (Gliwice, Poland) 2015-11-28 Reactive Live Coding GDG DevFest (Warsaw, Poland) 2015-10-27 Reactive Libraries for Android Silesia Mobile Group (Katowice, Poland) 2014-08-26 Stuff you should know about Android Future Processing, Java Show and Tell (Gliwice, Poland) 2013-05-27 Brain-Computer Interface for mobile devices Silesian University of Technology (Gliwice, Poland)  ","permalink":"https://wittchen.io/talks/","summary":"If you would like to invite me for the conference or a meetup to give a talk, feel free to contact me!\n 2021-12-29 Git - mini-szkolenie [PL] Digital Fingerprints, internal training (Katowice, Poland / online) 2019-01-10 Brain-Computer Interfaces - Science Fiction or Reality? Toast Meetup (Wrocław, Poland) 2018-11-19 Brain-Computer Interfaces - Science Fiction or Reality? Øredev (Malmö, Sweden) 2018-10-20 Is your app really connected? Mobilization (Łódź, Poland) watch video [EN] 2018-09-13 Brain-Computer Interfaces - Science Fiction or Reality?","title":"Talks"},{"content":"Some time ago, I was using macOS. The thing I liked about this OS since Mojave version was the dynamic wallpaper feature. Wallpaper representing picture of the Mojave desert in California was dynamically changing during the day. In the morning, we could see the dawn and sunrise, later picture during the midday, in the evening, desert during the dusk and finally picture at night. I liked the fact that wallpaper were adjusting to the time of the day. I wanted to have the same thing on my Linux. Luckily, on Arch and i3, it\u0026rsquo;s pretty easy to achieve.\nI could create very simple bash script:\nfunction setbg { cp $1 ~/.config/wall.jpg DISPLAY=:0.0 feh --bg-scale ~/.config/wall.jpg notify-send \u0026#34;wallpaper changed\u0026#34; } hour=$(date +%H) time_of_day=$(sunwait poll 50.2849923N 18.6493647E) [[ $time_of_day == \u0026#34;DAY\u0026#34; ]] \u0026amp;\u0026amp; [ $hour -lt 12 ] \u0026amp;\u0026amp; setbg $1 # morning [ $hour -gt 11 ] \u0026amp;\u0026amp; [ $hour -lt 15 ] \u0026amp;\u0026amp; setbg $2 # midday [ $hour -gt 14 ] \u0026amp;\u0026amp; [[ $time_of_day == \u0026#34;DAY\u0026#34; ]] \u0026amp;\u0026amp; setbg $3 # dusk [[ $time_of_day == \u0026#34;NIGHT\u0026#34; ]] \u0026amp;\u0026amp; setbg $4 # night In this example, I simply take the current hour and check if there\u0026rsquo;s day or night inside time_of_day variable with sunwait program. It\u0026rsquo;s pretty neat program and also allows to check time of the sunset and sunrise basing on our timezone and location. When sunwait generates wrong data, we can explicitly provide latitude and longitude for it. E.g sunwait poll 50.2849923N 18.6493647E. I\u0026rsquo;m using feh for setting my desktop background image with DISPLAY=:0.0 instruction, which is required, when we want to execute our program in the cron job. Code snippet above is parametrized part of my larger set_bg.sh script, which you can find in my dotfiles, but you can put direct paths to your wallpapers in it. You can also check my wrapper for this script in set_bg_daynight.sh file. In this case, we just need wallpapers for morning, midday, dusk and night. Of course, we can improve this script and introduce more parts of the day, but I didn\u0026rsquo;t want to make it too complicated.\nOnce we are ready, we can put our script into ~/.config/i3/config file, to set appropriate wallpaper after login:\nexec --no-startup-id /path/to/our/script.sh and create a cron job, which will update our wallpaper every hour:\n1 * * * * /path/to/our/script.sh That\u0026rsquo;s all we need. Now, we can have macOS-like dynamic wallpapers on Linux and i3.\nIf you want to use macOS wallpapers from Mojave or Catalina OS version for this script, you can check dynamic directory of my wallpapers repository. You can also use any wallpapers you want for this script.\n","permalink":"https://wittchen.io/posts/dynamic-wallpaper-for-i3/","summary":"Some time ago, I was using macOS. The thing I liked about this OS since Mojave version was the dynamic wallpaper feature. Wallpaper representing picture of the Mojave desert in California was dynamically changing during the day. In the morning, we could see the dawn and sunrise, later picture during the midday, in the evening, desert during the dusk and finally picture at night. I liked the fact that wallpaper were adjusting to the time of the day.","title":"Dynamic wallpaper for i3"},{"content":"While customizing my i3 status bar, I wanted to have currently played Spotify song in it. Some time ago, I created an open source script in Python called spotify-cli-linux and I wanted to use it. When we want to put something custom into the i3 status bar, the easiest way to do it, is to save data into the file and then read the file.\nI created the following config inside ~/.config/i3status/config file:\norder += \u0026#34;read_file spotify\u0026#34; ... read_file spotify { format = \u0026#34;♪ %content\u0026#34; path = \u0026#34;/var/log/scripts/spotify.log\u0026#34; } .... Approach #1 - cron job The i3 status bar is refreshed automatically according to the configuration. Now, I just needed the way to save the song into the /var/log/scripts/spotify.log file. My first idea was to create a cron job, which will save the song every given interval.\n*/2 * * * * /usr/bin/spotifycli --statusshort \u0026gt; /var/log/scripts/spotify.log Typical song has 2 minutes or more, so it should work. Unfortunately, my script uses dbus under the hood, which doesn\u0026rsquo;t have an access to the session of the desktop user. After searching the web for a while, I noticed that passing data from the user session into this script is not a trivial thing and cannot be done quickly. I decided to search for another solution.\nApproach #2 - media buttons I wanted to be able to control spotify via media buttons on my keyboard. On i3 it doesn\u0026rsquo;t work out of the box, and we need to configure it. To do that, I added the folloiwng key bindings in ~/.config/i3/config file:\nbindsym XF86AudioPlay exec \u0026#34;spotifycli --playpause\u0026#34; bindsym XF86AudioNext exec \u0026#34;spotifycli --next\u0026#34; bindsym XF86AudioPrev exec \u0026#34;spotifycli --prev\u0026#34; It works fine. We can also improve it, to make it work with other players, make it more general, etc., but in my case I use just Spotify for the music and podcasts, so it\u0026rsquo;s enough for me.\nWe can update this functioanlity to save song whenever we change it or start it:\nbindsym XF86AudioPlay exec \u0026#34;spotifycli --playpause \u0026amp;\u0026amp; spotifycli --statusshort \u0026gt; /var/log/scripts/spotify.log\u0026#34; bindsym XF86AudioNext exec \u0026#34;spotifycli --next \u0026amp;\u0026amp; spotifycli --statusshort \u0026gt; /var/log/scripts/spotify.log\u0026#34; bindsym XF86AudioPrev exec \u0026#34;spotifycli --prev \u0026amp;\u0026amp; spotifycli --statusshort \u0026gt; /var/log/scripts/spotify.log\u0026#34; and this will work, but unfortunately, when song will change automatically on the playlist, status won\u0026rsquo;t be updated, so this solution is not right.\nApproach #3 (correct) - notifications Spotify desktop application is sending notifications whenever the song changes. On i3, we need to install notification daemon/server, to make it work. On Arch Wiki, we can see list of the popular daemons. I decided to use Dunst because it\u0026rsquo;s simple, light-weight, open-source, configurable, is actively developed and supported by its maintainers. Once I installed Dunst and started it to enable daemon, I started receiving system notifications (including Spotify).\nI edited Dunst configuration in ~/.config/dust/dunstrc file and added handler for Spotify:\n[spotify] appname = Spotify urgency = normal script = ~/.scripts/spotify_log.sh spotify_log.sh script looks as follows:\n#!/usr/bin/env bash /usr/bin/spotifycli --statusshort \u0026gt; /var/log/scripts/spotify.log Now, whenever I receive a system notification from Spotify that song is changed, currently played song is saved into the file, this file is read by i3 status bar and refreshed in a given interval. Thanks to that, it doesn\u0026rsquo;t matter if song changes itself or I change it - it\u0026rsquo;s updated anyway and that\u0026rsquo;s what I wanted.\n","permalink":"https://wittchen.io/posts/spotify-song-in-i3-status-bar/","summary":"While customizing my i3 status bar, I wanted to have currently played Spotify song in it. Some time ago, I created an open source script in Python called spotify-cli-linux and I wanted to use it. When we want to put something custom into the i3 status bar, the easiest way to do it, is to save data into the file and then read the file.\nI created the following config inside ~/.","title":"Spotify song in i3 status bar"},{"content":"Introduction From a long time I wanted to try lightweight WM (Window Manager) for Linux. I installed i3 once a few years ago, but I had no idea how to use it, so I just closed this thing and got back to Gnome. Recently, I watched several videos and tutorials about Linux and i3 on youtube, which helped me to learn this WM, how it works and how to use it. I also read some part of docs and user\u0026rsquo;s guide to customize my configuration. Official docs of i3 are really good.\nConcept The original concept of i3 and tiling windows managers in general is the fact, that windows are not layered one on top of another like in all typical GUIs for popular operating systems we know today. It makes sense, because when one window is behind another, you cannot see its content anyway. It\u0026rsquo;s possible to do that in i3 by detaching a windows and moving them around, but it\u0026rsquo;s not usual case and default behavior. Today we can see that operating systems like Windows or macOS are trying to mimic behavior of tiling window managers with window splitting, etc. This functionality is available in Unity for Ubuntu and can be achieved with additional plugins for Gnome environment. We also have applications like iTerm for macOS or Tilix for Linux, which mimics the same thing, but just for terminals. In i3, we have this functioality out of the box for all programs we use in the system. Not just terminals. We can also use the same key bindings and shortcuts across whole system, which is very convenient, because you don\u0026rsquo;t have to memorize shortcuts and keybindings for each program separately.\nSystem configuration as a code What is very convenient in i3 is the fact, that you can keep and maintain your configuration as a code in the single file located in ~/.config/i3/config. This file can contain your wallpaper definition, key bindings, configuration for moving and resizing windows, look and feel of the status bar (its colors, location, height, font, etc.) and windows (e.g. I removed title bars, because I don\u0026rsquo;t need them now)\nBelow, you can see my current i3 config. I keep it up to date in my dotfiles repo.\n# This file has been auto-generated by i3-config-wizard(1). # It will not be overwritten, so edit it as you like. # # Should you change your keyboard layout some time, delete # this file and re-run i3-config-wizard(1). # # i3 config file (v4) # # Please see https://i3wm.org/docs/userguide.html for a complete reference! set $mod Mod4 # Font for window titles. Will also be used by the bar unless a different font # is used in the bar {} block below. font pango:monospace 8 # setting bg color exec --no-startup-id xsetroot -solid \u0026#34;#17212b\u0026#34; # setting wallpaper exec --no-startup-id feh --bg-scale ~/Pictures/config/wallpaper/wallpaper.jpg # This font is widely installed, provides lots of unicode glyphs, right-to-left # text rendering and scalability on retina/hidpi displays (thanks to pango). #font pango:DejaVu Sans Mono 8 # The combination of xss-lock, nm-applet and pactl is a popular choice, so # they are included here as an example. Modify as you see fit. # xss-lock grabs a logind suspend inhibit lock and will use i3lock to lock the # screen before suspend. Use loginctl lock-session to lock your screen. exec --no-startup-id xss-lock --transfer-sleep-lock -- i3lock --nofork # NetworkManager is the most popular way to manage wireless networks on Linux, # and nm-applet is a desktop environment-independent system tray GUI for it. exec --no-startup-id nm-applet # Use pactl to adjust volume in PulseAudio. set $refresh_i3status killall -SIGUSR1 i3status bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +10% \u0026amp;\u0026amp; $refresh_i3status bindsym XF86AudioLowerVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -10% \u0026amp;\u0026amp; $refresh_i3status bindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ toggle \u0026amp;\u0026amp; $refresh_i3status bindsym XF86AudioMicMute exec --no-startup-id pactl set-source-mute @DEFAULT_SOURCE@ toggle \u0026amp;\u0026amp; $refresh_i3status # Use Mouse+$mod to drag floating windows to their wanted position floating_modifier $mod # start a terminal bindsym $mod+Return exec gnome-terminal # kill focused window bindsym $mod+Shift+q kill # start dmenu (a program launcher) bindsym $mod+d exec dmenu_run # There also is the (new) i3-dmenu-desktop which only displays applications # shipping a .desktop file. It is a wrapper around dmenu, so you need that # installed. # bindsym $mod+d exec --no-startup-id i3-dmenu-desktop # change focus bindsym $mod+j focus left bindsym $mod+k focus down bindsym $mod+l focus up bindsym $mod+semicolon focus right # alternatively, you can use the cursor keys: bindsym $mod+Left focus left bindsym $mod+Down focus down bindsym $mod+Up focus up bindsym $mod+Right focus right # move focused window bindsym $mod+Shift+j move left bindsym $mod+Shift+k move down bindsym $mod+Shift+l move up bindsym $mod+Shift+semicolon move right # alternatively, you can use the cursor keys: bindsym $mod+Shift+Left move left bindsym $mod+Shift+Down move down bindsym $mod+Shift+Up move up bindsym $mod+Shift+Right move right # split in horizontal orientation bindsym $mod+h split h # split in vertical orientation bindsym $mod+v split v # enter fullscreen mode for the focused container bindsym $mod+f fullscreen toggle # change container layout (stacked, tabbed, toggle split) bindsym $mod+s layout stacking bindsym $mod+w layout tabbed bindsym $mod+e layout toggle split # toggle tiling / floating bindsym $mod+Shift+space floating toggle # change focus between tiling / floating windows bindsym $mod+space focus mode_toggle # focus the parent container bindsym $mod+a focus parent # focus the child container #bindsym $mod+d focus child # Define names for default workspaces for which we configure key bindings later on. # We use variables to avoid repeating the names in multiple places. set $ws1 \u0026#34;1\u0026#34; set $ws2 \u0026#34;2\u0026#34; set $ws3 \u0026#34;3\u0026#34; set $ws4 \u0026#34;4\u0026#34; set $ws5 \u0026#34;5\u0026#34; set $ws6 \u0026#34;6\u0026#34; set $ws7 \u0026#34;7\u0026#34; set $ws8 \u0026#34;8\u0026#34; set $ws9 \u0026#34;9\u0026#34; set $ws10 \u0026#34;10\u0026#34; # switch to workspace bindsym $mod+1 workspace number $ws1 bindsym $mod+2 workspace number $ws2 bindsym $mod+3 workspace number $ws3 bindsym $mod+4 workspace number $ws4 bindsym $mod+5 workspace number $ws5 bindsym $mod+6 workspace number $ws6 bindsym $mod+7 workspace number $ws7 bindsym $mod+8 workspace number $ws8 bindsym $mod+9 workspace number $ws9 bindsym $mod+0 workspace number $ws10 # move focused container to workspace bindsym $mod+Shift+1 move container to workspace number $ws1 bindsym $mod+Shift+2 move container to workspace number $ws2 bindsym $mod+Shift+3 move container to workspace number $ws3 bindsym $mod+Shift+4 move container to workspace number $ws4 bindsym $mod+Shift+5 move container to workspace number $ws5 bindsym $mod+Shift+6 move container to workspace number $ws6 bindsym $mod+Shift+7 move container to workspace number $ws7 bindsym $mod+Shift+8 move container to workspace number $ws8 bindsym $mod+Shift+9 move container to workspace number $ws9 bindsym $mod+Shift+0 move container to workspace number $ws10 # reload the configuration file bindsym $mod+Shift+c reload # restart i3 inplace (preserves your layout/session, can be used to upgrade i3) bindsym $mod+Shift+r restart # exit i3 (logs you out of your X session) bindsym $mod+Shift+e exec \u0026#34;i3-nagbar -t warning -m \u0026#39;You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.\u0026#39; -B \u0026#39;Yes, exit i3\u0026#39; \u0026#39;i3-msg exit\u0026#39;\u0026#34; # set key binding for screen lock bindsym $mod+b exec \u0026#34;i3lock -c 17212b\u0026#34; # resize window (you can also use the mouse for that) mode \u0026#34;resize\u0026#34; { # These bindings trigger as soon as you enter the resize mode # Pressing left will shrink the window’s width. # Pressing right will grow the window’s width. # Pressing up will shrink the window’s height. # Pressing down will grow the window’s height. bindsym j resize shrink width 10 px or 10 ppt bindsym k resize grow height 10 px or 10 ppt bindsym l resize shrink height 10 px or 10 ppt bindsym semicolon resize grow width 10 px or 10 ppt # same bindings, but for the arrow keys bindsym Left resize shrink width 10 px or 10 ppt bindsym Down resize grow height 10 px or 10 ppt bindsym Up resize shrink height 10 px or 10 ppt bindsym Right resize grow width 10 px or 10 ppt # back to normal: Enter or Escape or $mod+r bindsym Return mode \u0026#34;default\u0026#34; bindsym Escape mode \u0026#34;default\u0026#34; bindsym $mod+r mode \u0026#34;default\u0026#34; } bindsym $mod+r mode \u0026#34;resize\u0026#34; # move window (you can also use mouse for that) mode \u0026#34;moveit\u0026#34; { bindsym Up move up 20px bindsym Left move left 20px bindsym Down move down 20px bindsym Right move right 20px bindsym Mod4+m mode \u0026#34;default\u0026#34; } bindsym $mod+m focus floating; mode \u0026#34;moveit\u0026#34; # brightness control (works for thinkpad, requires \u0026#39;light\u0026#39; program) bindsym XF86MonBrightnessUp exec \u0026#34;sudo light -A 20; notify-send \u0026#39;Brightness (Up)\u0026#39; $(light)\u0026#39;%\u0026#39; \u0026amp;\u0026amp; light \u0026gt; /var/log/scripts/screen_brightness.log \u0026amp;\u0026amp; killall -SIGUSR1 i3status\u0026#34; bindsym XF86MonBrightnessDown exec \u0026#34;sudo light -U 20; notify-send \u0026#39;Brightness (Down)\u0026#39; $(light)\u0026#39;%\u0026#39; \u0026amp;\u0026amp; light \u0026gt; /var/log/scripts/screen_brightness.log \u0026amp;\u0026amp; killall -SIGUSR1 i3status\u0026#34; # spotify play control (requires \u0026#39;spotify-cli-linux\u0026#39; program and media keys on keyboard) bindsym XF86AudioPlay exec \u0026#34;spotifycli --playpause\u0026#34; bindsym XF86AudioNext exec \u0026#34;spotifycli --next\u0026#34; bindsym XF86AudioPrev exec \u0026#34;spotifycli --prev\u0026#34; # Start i3bar to display a workspace bar (plus the system information i3status # finds out, if available) bar { workspace_buttons yes position top status_command i3status font pango:Roboto 10 height 25 tray_output none colors { background #17212b statusline #ffffff separator #666666 active_workspace #2c3e50 #2c3e50 #1abc9c focused_workspace #2c3e50 #2c3e50 #1abc9c inactive_workspace #2c3e50 #2c3e50 #ecf0f1 urgent_workspace #e74c3c #e74c3c #ecf0f1 } } # hide windows title bar for_window [class=\u0026#34;^.*\u0026#34;] border pixel 1 new_window 1pixel I copied colors of the status bar from a place in the web (I don\u0026rsquo;t remember where) and I liked them, so I decided to keep them in my config.\nYou can see a lot of keywords $mod in this config. It\u0026rsquo;s just Win key on your keyboard. This config contains a few customizations I made. Probably, I\u0026rsquo;ll describe them in details in separate articles.\nOne of the useful customizations is key binding for locking the screen. I needed to install additional program called i3lock and add the following key binding for it:\nbindsym $mod+b exec \u0026#34;i3lock -c 17212b\u0026#34; Value in the end of this config is the background color of the locked screen.\nMoving around the system We don\u0026rsquo;t need to know a lot of keybinding to move aroud the system and use it.\nHere are a few default shortcuts I use daily:\n $mod+Enter - opens terminal window $mod+d - opens dmenu with available programs (start typing your program name and Hit enter; hit Esc to close it) $mod+arrow - switches between windows (arrows: left, right, top, bottom) $mod+Shift+arrow - moves windows (arrows: left, right, top, bottom) $mod+number - switches between workspaces (1, 2, 3, etc.) $mod+Shift+number - moves window to another workspace (1, 2, 3, etc.) $mod+Shit+space - detaches/attaches window (in case you want to have floating window or you don\u0026rsquo;t want to use it in full screen mode) $mod+Shift+q - closes window $mod+Shift+e - opens dialog for closing i3  That\u0026rsquo;s it.\nI also use customized/non-default key bindings, which are not default, but they\u0026rsquo;re defined in my config:\n $mod+b - locks screen $mod+m - allows to move floating (detached) window (we need to use shortcut, move window around and then use shortcut again to finish the process) $mod+r - allows to resize floating (detached) window in the same manner like moving it media keys (mute/volume+/volume-/play/pause/next/prev) - they work in the same way like on any other system, but we need to configure this explicitly for i3 brightness keys (brightness+/-) - same story like media keys  It\u0026rsquo;s powerful thing and we can configure and customize our own key bindings for the stuff we need.\nStatus bar configuration as a code Besides system configuration described above, we can keep status bar configuration as a code too! Configuration of the i3bar is well described in the official documentation. As you could see in my ~/.config/i3/config file above bar section looks as follows:\nbar { workspace_buttons yes position top status_command i3status font pango:Roboto 10 height 25 tray_output none colors { background #17212b statusline #ffffff separator #666666 active_workspace #2c3e50 #2c3e50 #1abc9c focused_workspace #2c3e50 #2c3e50 #1abc9c inactive_workspace #2c3e50 #2c3e50 #ecf0f1 urgent_workspace #e74c3c #e74c3c #ecf0f1 } } Command called status_command invokes i3status program, which is default setup, but there are at least a few programs, which can be used instead of this to customize and enhance status bar. For now, I decided to use default option because it\u0026rsquo;s good enough for me. You can also see that I customized colors, font, height, removed tray icons and moved status bar to the top (default position is bottom).\nWhen we are using i3status, then detailed configuration of status bar is located in ~/.config/i3status/config file. You can check my current config below and in my dotfiles repository\n# i3status configuration file. # see \u0026#34;man i3status\u0026#34; for documentation. # It is important that this file is edited as UTF-8. # The following line should contain a sharp s: # ß # If the above line is not correctly displayed, fix your editor first! general { colors = true interval= 10 color_good = \u0026#39;#88b090\u0026#39; color_degraded = \u0026#39;#ccdc90\u0026#39; color_bad = \u0026#39;#e89393\u0026#39; } order += \u0026#34;wireless _first_\u0026#34; order += \u0026#34;ethernet _first_\u0026#34; order += \u0026#34;battery 0\u0026#34; order += \u0026#34;battery 1\u0026#34; order += \u0026#34;disk /\u0026#34; order += \u0026#34;disk /home\u0026#34; order += \u0026#34;load\u0026#34; order += \u0026#34;cpu_usage\u0026#34; order += \u0026#34;memory\u0026#34; order += \u0026#34;volume master\u0026#34; order += \u0026#34;read_file spotify\u0026#34; order += \u0026#34;read_file screen_brightness\u0026#34; order += \u0026#34;read_file pacman_new_packages\u0026#34; order += \u0026#34;read_file rss\u0026#34; order += \u0026#34;read_file aqi\u0026#34; order += \u0026#34;read_file weather\u0026#34; order += \u0026#34;tztime local\u0026#34; wireless _first_ { format_up = \u0026#34; %quality %essid %ip\u0026#34; format_down = \u0026#34;\u0026#34; } ethernet _first_ { format_up = \u0026#34;%ip (%speed)\u0026#34; format_down = \u0026#34;\u0026#34; } battery 0 { format = \u0026#34;%status %percentage %remaining → 0\u0026#34; format_down = \u0026#34;\u0026#34; last_full_capacity = true integer_battery_capacity = true low_threshold = 11 threshold_type = percentage hide_seconds = true status_chr = \u0026#34; \u0026#34; status_bat = \u0026#34; \u0026#34; status_unk = \u0026#34; \u0026#34; status_full = \u0026#34; \u0026#34; } battery 1 { format = \u0026#34;%status %percentage %remaining → 1\u0026#34; format_down = \u0026#34;\u0026#34; last_full_capacity = true integer_battery_capacity = true low_threshold = 11 threshold_type = percentage hide_seconds = true status_chr = \u0026#34; \u0026#34; status_bat = \u0026#34; \u0026#34; status_unk = \u0026#34; \u0026#34; status_full = \u0026#34; \u0026#34; } disk \u0026#34;/\u0026#34; { format = \u0026#34; %avail\u0026#34; } disk \u0026#34;/home\u0026#34; { format = \u0026#34;⌂ %avail\u0026#34; } load { format = \u0026#34; %1min\u0026#34; } cpu_usage { format = \u0026#34;💻 %usage\u0026#34; } memory { format = \u0026#34;⛁ %used\u0026#34; threshold_degraded = \u0026#34;1G\u0026#34; format_degraded = \u0026#34;MEMORY \u0026lt; %available\u0026#34; } volume master { format = \u0026#34;🔉 %volume\u0026#34; format_muted = \u0026#34;🔇 %volume\u0026#34; device = \u0026#34;default\u0026#34; } read_file spotify { format = \u0026#34;♪ %content\u0026#34; path = \u0026#34;/var/log/scripts/spotify.log\u0026#34; } read_file screen_brightness { format = \u0026#34;🔆 %content%\u0026#34; path = \u0026#34;/var/log/scripts/screen_brightness.log\u0026#34; } read_file pacman_new_packages { format = \u0026#34;📦 %content\u0026#34; path = \u0026#34;/var/log/scripts/pacman_new_packages.log\u0026#34; } read_file rss { format = \u0026#34;📶 %content\u0026#34; path = \u0026#34;/var/log/scripts/newsboat.log\u0026#34; } read_file aqi { format = \u0026#34;%content\u0026#34; path = \u0026#34;/var/log/scripts/aqi.log\u0026#34; } read_file weather { format = \u0026#34;%content\u0026#34; path = \u0026#34;/var/log/scripts/weather.log\u0026#34; } tztime local { format = \u0026#34; %a %Y-%m-%d ⌚ %H:%M %Z %z \u0026#34; } We can setup refresh interval of our status bar, which is 10 s in my case, but we can increase or decrease it if we want.\nAs you can see, I configured multiple things. Going from the left:\n network connectivity (WiFi + strength or wired connection + IP address) usage of battery 0 usage of battery 1 (I have 2 batteries in my Thinkpad) free space on the root directory free space in the home directory load (number of processes waiting to be executed) usage of CPU usage of RAM sound currently played Spotify song screen brightness number of new pacman packages to be updated number of new RSS news from newsboat air quality in my city monitored via Airly weather in my city date, time and time zone  To make it all work, I needed to write a few additional scripts in Python and Bash, create log files to be read in the status bar, configure dunst notifications to monitor changing Spotify songs, etc. Maybe I\u0026rsquo;ll put details of these configs in the separate articles.\nNotifications By default i3 doesn\u0026rsquo;t have any notifications. If we want to have them, we need to install notification daemon. We have a few choices. I decided to go with dunst, which is nice and minimalistic notification daemon. It\u0026rsquo;s also configurable and we can put its configuration into ~/.config/dunst/dunstrc file. You can check my configuration for this daemon in my dotfiles repo as well as previous configs. I\u0026rsquo;ve done a few adjustments in this file to make notifications be consistent with colors of the system and my personal preferences. I also moved notification window a little bit down because it was covering status bar. You can test notification with notify-send command. Remember to kill dunst after applying changes in the config to see them. Moreover, after installing dunst, we need to start it to invoke the daemon and then after future system start-ups it will start automatically.\nWorking with multiple screens In my current setup, I have laptop screen and external monitor. By default, i3 utilizes all available screens and first workspace is located in my primary (laptop) monitor. When I would like to use this workspace on my external screen, when laptop lid is closed, then I need to disable laptop screen. It\u0026rsquo;s not neccessary, when you are using both laptop and external monitor. To do that, I\u0026rsquo;m using xrandr program. I created wrapper for this program called monitor.sh, which you can find in .scripts directory in my dotfiles repository.\nKey functionalities of this script looks as follows:\nfunction list { xrandr --listmonitors } function laptopoff { xrandr --output eDP-1 --off } function laptopmirror { xrandr --output eDP-1 --mode 1920x1080 --output HDMI-2 --mode 1920x1080 --same-as eDP-1 } function reset { xrandr --auto } function wallreload { feh --bg-scale ~/Pictures/config/wallpaper/wallpaper.jpg } When I start the system, log in and close the laptop lid, I need to execute monitor.sh laptopoff to disable laptop screen, and then monitor.sh wallreload to reload wallpaper and adjust it into the higher resolution for the workspace 1. eDP-1 is name of my laptop monitor and it may be different in your case. In order, to reset settings, I can use reset command. It\u0026rsquo;s more convenient than remembering all xrandr commands.\nWiFi and Bluetooth WiFi i3 doesn\u0026rsquo;t have any control panel window known from desktop environments like Gnome. If we want to use WiFi and Bluetooth, we need command line tools (or GUI if we prefer) installed additionally in the system. For WiFi, I\u0026rsquo;m using nmcli. To list WiFi networks, we can type:\nnmcli dev wifi To connect to the given network, we can type:\nnmcli --ask device wifi connect hot_spot_name I also created wrapper for this, which you can find in network.sh file inside .scripts directory in my dotfiles repository.\nBluetooth We have the same story with Bluetooth. In order to connect to bluetooth devices, I\u0026rsquo;m using bluetoothctl program.\nTo display devices, we can type:\nbluetoothctl devices In order to connect to the device, we can type:\nbluetoothctl connect mac_address I also created wrapper for this stuff, which allows me to connect to different devices, enable/disable bluetooth, start scanning, show paired devices, etc. You can find it in bluetooth.sh in my dotfiles repository in the same place where previous scripts are located.\nFinal thoughts i3 WM is definitely great Window Manager. Probably the best I have been using so far. Initial configuration and setup can be overwhelming, but once we get into it, it will become clear and simple. Whole system is very fast, highly configurable, we can store complete configuration in the files and easily reproduce it on other machines or in our own machine in case when something will go wrong or we just want to reinstall the system. Using shortcuts and tiling windows all the time may be odd in the beginning, but once we get used to it, usage of this system is very efficient and conveninent. I have been using MS Windows, macOS, Unity desktop environment and Gnome in the past. i3wm is my favorite environment so far. Once we perform all the configuration in the beginning, we don\u0026rsquo;t have to touch it later until we want to change or add something. I wouldn\u0026rsquo;t recommend this WM to someone who doesn\u0026rsquo;t like computers, configurations, solving problems, etc. If you want something working out of the box, which you can trade for speed, high customization, control over your system, etc., then you should choose macOS, Windows or maybe Gnome if you prefer Linux.\nReferences  i3wm.org - official website i3wm.org/docs - official docs (very informative) i3 Arch Linux config (video) Tiling Window Management and i3wm config additions (video) Co to jest Tiling? [PL] (video)  ","permalink":"https://wittchen.io/posts/i-switched-to-i3wm/","summary":"Introduction From a long time I wanted to try lightweight WM (Window Manager) for Linux. I installed i3 once a few years ago, but I had no idea how to use it, so I just closed this thing and got back to Gnome. Recently, I watched several videos and tutorials about Linux and i3 on youtube, which helped me to learn this WM, how it works and how to use it.","title":"I switched to i3 WM"},{"content":"Recently GitHub introduced really interesting feature to their service called Actions. Actions can be used for automating various tasks related to the repositories like CI, CD, testing, deployment and whatnot. The general concept is as follows: We can create so called action, which can be based on a JavaScript project or a Docker container. We can also use existing actions in the Marketplace. Next, we can create workflow in the yml file, where we define our workflow. Workflow can consist of on a job with many steps using different actions. We can also define multiple jobs, where one depends on another. Workflows can be triggered in many ways. E.g. by push, pull request, creating issue, publishing release, scheduled event or external event.\nE.g. we can define scheduled event, which will trigger workflow every hour as follows:\non: schedule: - cron: \u0026#39;0 * * * *\u0026#39; It has the same syntax like cron.\nWe can do many things with workflows and actions like deploying websites, artifacts with libraries, run tests on multiple environments, execute shell scripts on external servers and more. Have a look at the official Github documenation and Marketplace to see what kind of actions people are creating.\nI wanted to try out these actions and workflows, so I automated the deployment process of my website (this one, which you\u0026rsquo;re visiting right now). Its code is open source and you can see it at https://github.com/pwittchen/wittchen.io. I host my website on the external web server. I can access it via FTP and SSH. Website is based in hexo framework for static website generation. Before deployment I regenerate contents of the public/ directory with command:\nmake regenerate Then, I can commit and push my changes to the GitHub repository. My action is triggered whenever I push a change to the public/ directory on the repository on the master branch. Once it\u0026rsquo;s done, workflows checks out my repository and starts copying files the the FTP server in the defined directory. GitHub allows us to keep the secrects like usernames and passwords, tokens etc. inside the repository configuration. we can access it via repository settings on the GitHub website. Once they\u0026rsquo;re created, they cannot be viewed or edited. We can just delete them (and create again if we want to). Our workflow file has to be located in the .github/workflows/ directory. We can have more than one workflow.\nYou can see my deploy.yml workflow below:\nname:Publish Websiteon:push:branches:- masterpaths:- \u0026#39;public/*\u0026#39;jobs:FTP-Deploy-Action:name:FTP-Deploy-Actionruns-on:ubuntu-lateststeps:- uses:actions/checkout@master- name:FTP-Deploy-Actionuses:SamKirkland/FTP-Deploy-Action@2.0.0env:FTP_SERVER:${{ secrets.FTP_SERVER }}FTP_USERNAME:${{ secrets.FTP_USERNAME }}FTP_PASSWORD:${{ secrets.FTP_PASSWORD }}REMOTE_DIR:${{ secrets.FTP_REMOTE_DIR }}LOCAL_DIR :\u0026#34;public\u0026#34;ARGS:--delete --transfer-allI we can see, I defined secrects for FTP server address, username, password and remote directory.\nPreviously I was using deploy.sh bash script, which looked like that:\n#!/usr/bin/env bash source .ftpconfig lftp ftp://$USER:$PASS@$HOST -e \u0026#34;set ftp:ssl-allow no; rm domains/$HOST/public_html/css/apollo.css; mirror -R -v --only-newer public domains/$HOST/public_html; quit\u0026#34; I had to be careful to avoid commiting .ftpconfig file and exclude it from commits like that:\ngit update-index --assume-unchanged .ftpconfig In my workflow, I used FTP-Deploy-Action, which uses lftp program for the deployment, so it\u0026rsquo;s the same program I used for deployment of my website before, but now it\u0026rsquo;s executed on the GitHub infrastructure - not my computer. Thanks to that, I have automated website deployment process and whenever I update my website and push the changes, it\u0026rsquo;s uploaded automatically to my server via FTP.\nAs we could see, GitHub actions can be hosted in the GitHub repositories, we can use them directly in our workflows and define our own custom actions in the same way.\nOn the GitHub website, we can read that depending on our subscription status, we can have several amounts of free minutes for executing actions and after crossing given thershold, we will be charged per minute in pay-as-you go model. As far I as see, amount of minutes is enough for personal usage and prices are reasonable.\nIf you\u0026rsquo;re using GitHub, then Actions are definitely worth considering for automation, because they give you endless opportunities for automating your work and CI/CD pipelines with huge flexibility and stability thanks to Docker containers. In the future, probably I\u0026rsquo;ll play more with it and maybe automate the last stage of the release process of my Java and Kotlin libraries with that feature.\nReferences  https://github.com/features/actions https://help.github.com/en/github/automating-your-workflow-with-github-actions https://help.github.com/en/github/automating-your-workflow-with-github-actions/configuring-a-workflow https://help.github.com/en/github/automating-your-workflow-with-github-actions/building-actions https://help.github.com/en/github/automating-your-workflow-with-github-actions/setting-up-continuous-integration-on-github https://github.com/marketplace?type=actions https://github.com/maddox/actions  ","permalink":"https://wittchen.io/posts/github-actions-in-action/","summary":"Recently GitHub introduced really interesting feature to their service called Actions. Actions can be used for automating various tasks related to the repositories like CI, CD, testing, deployment and whatnot. The general concept is as follows: We can create so called action, which can be based on a JavaScript project or a Docker container. We can also use existing actions in the Marketplace. Next, we can create workflow in the yml file, where we define our workflow.","title":"GitHub Actions in action!"},{"content":"After the recent Firefox update (70.0.1 64-bit), I\u0026rsquo;ve got a problem with font rendering on Arch Linux. I\u0026rsquo;ve installed this update probably on 31.10.2019 or 01.11.2019 (I\u0026rsquo;m not exactly sure right now). On several pages (e.g. Facebook or Github) fonts weren\u0026rsquo;t rendered correctly. It looked like fonts without anti-aliasing what was quite ugly.\nI figured out that I can go to the Firefox Settings and in the \u0026ldquo;Fonts and Colors\u0026rdquo; section, go to \u0026ldquo;Advanced\u0026rdquo; and turn off the option \u0026ldquo;Allow pages to choose their own fonts, instead of your selection above\u0026rdquo;. It fixes problem with ugly fonts on several websites, but rest of the websites is not able to render the right fonts. E.g. when you have website with custom fonts from fonts.google.com (like this website). That\u0026rsquo;s why I couldn\u0026rsquo;t proceed with this solution.\nI looked up style and font family on websites with ugly fonts with Developer Tools and I figured out that messed up font is usually Helvetica. I\u0026rsquo;ve done some search and found ephifonts-no-helvetica package on AUR, which has the following description:\nLike ephifonts, less Helvetica that messes up fonts in Firefox and Chromium. That\u0026rsquo;s what I need!\nI used my own AUR helper called aur.sh (check it out by the way if you\u0026rsquo;re on Arch ;-) to install this package as follows:\naur get ephifonts-no-helvetica Then I restarted Firefox and problem was finally solved. All websites were rendering fonts correctly thanks to freshly installed font package.\n","permalink":"https://wittchen.io/posts/fixing-font-rendering-on-firefox-and-arch-linux/","summary":"After the recent Firefox update (70.0.1 64-bit), I\u0026rsquo;ve got a problem with font rendering on Arch Linux. I\u0026rsquo;ve installed this update probably on 31.10.2019 or 01.11.2019 (I\u0026rsquo;m not exactly sure right now). On several pages (e.g. Facebook or Github) fonts weren\u0026rsquo;t rendered correctly. It looked like fonts without anti-aliasing what was quite ugly.\nI figured out that I can go to the Firefox Settings and in the \u0026ldquo;Fonts and Colors\u0026rdquo; section, go to \u0026ldquo;Advanced\u0026rdquo; and turn off the option \u0026ldquo;Allow pages to choose their own fonts, instead of your selection above\u0026rdquo;.","title":"Fixing font rendering on Firefox and Arch Linux"},{"content":"I recently had an issue with Gnome on Arch Linux during the system boot. After turning my computer on, I saw gray screen with message like:\nOh no! Something has gone wrong. A problem has occurred and the system can\u0026#39;t recover... and I couldn\u0026rsquo;t log in or do anything and started searching solutions for this problem via my phone. First, I switched to terminal mode with Alt+F2(you can switch back to GUI with Alt+F1), logged in and updated system via pacman: sudo pacman -Syu. I tried to install or reinstall different packages mostly related to graphic card drivers, X11 or Gnome, but it didn\u0026rsquo;t help. Luckily, I found this thread on the Arch Forums, where there was a post suggesting disabling Wayland on GDM by opening /etc/gdm/custom.conf file and uncommenting line with\nWaylandEnable=false I did that. After restart, it finally fixed this problem and Gnome was loaded succesfully. That was the first time I had an issue with Boot related to Gnome and Arch. Fortunately, thanks to good community, I was able to fix it pretty quickly (in ~30 minutes) and avoided system re-installation. After that, I also had a few issues with sound on Bluetooth devices, but I fixed them quickly too.\nI hope, you\u0026rsquo;ll find this post useful in case of having similar problems.\n","permalink":"https://wittchen.io/posts/fixing-gnome-boot-problem/","summary":"I recently had an issue with Gnome on Arch Linux during the system boot. After turning my computer on, I saw gray screen with message like:\nOh no! Something has gone wrong. A problem has occurred and the system can\u0026#39;t recover... and I couldn\u0026rsquo;t log in or do anything and started searching solutions for this problem via my phone. First, I switched to terminal mode with Alt+F2(you can switch back to GUI with Alt+F1), logged in and updated system via pacman: sudo pacman -Syu.","title":"Fixing Gnome Boot problem"},{"content":"Size of the root partition / on my system is 25 GB. I recently had a situation where I received notification from the system that there\u0026rsquo;s too little free space on that partition, which was around 1 GB. My first attempt was to clean pacman cache with sudo pacman -Sc. It helped for a moment, but I kept receiving this notification. I searched for the solutions regarding extending the root partition and noticed that it wouldn\u0026rsquo;t be that easy and probably require making backup and reinstalling the system. Although installing Arch is not scary for me anymore, I didn\u0026rsquo;t want to do that again, because it takes some time and after that I will have to configure all my stuff, install apps, etc. which is a lot of work. Due to this fact I started search for the solutions about cleaning root partition. I found nice program called ncdu, which is abbreviation for NCurses Disk Usage according to the man page. You can install it with pacman: sudo pacman -S ncdu. This program shows usage of the directories and shows directories, which take the biggest amount of space on the disk. Once you have that program, you can go to the root partition and run it:\ncd / ncdu It will do the analysis and return an interactive output with directories, size and visualisation of the size:\n-- / ------------------------- . 99,8 GiB [##########] /home . 12,1 GiB [# ] /usr . 7,8 GiB [ ] /var . 689,2 MiB [ ] /opt . 191,4 MiB [ ] /tmp 55,0 MiB [ ] /boot . 11,3 MiB [ ] /etc . 1,8 MiB [ ] /run . 912,0 KiB [ ] /dev ! 16,0 KiB [ ] /lost+found 12,0 KiB [ ] /srv ! 4,0 KiB [ ] /root e 4,0 KiB [ ] /mnt . 0,0 B [ ] /proc . 0,0 B [ ] /sys @ 0,0 B [ ] snap @ 0,0 B [ ] sbin @ 0,0 B [ ] lib64 @ 0,0 B [ ] lib @ 0,0 B [ ] bin We can naviagte through this directories and locate places which takes space on disk, which can be free.\nFor example, here are the contents of the /usr/ directory:\n--- /usr ------------------------ . 5,9 GiB [##########] /share 5,2 GiB [######## ] /lib 816,9 MiB [# ] /bin 279,8 MiB [ ] /include 15,5 MiB [ ] /local 13,1 MiB [ ] /src 5,5 MiB [ ] /lib32 2,5 MiB [ ] /doc @ 0,0 B [ ] sbin @ 0,0 B [ ] lib64 I\u0026rsquo;ve noticed that there were logs in /var/log/journal/, which have significant size. I also had a lot of downloaded packages in /var/cache/pacman/. As I noticed pacman -Sc command doesn\u0026rsquo;t clean all the cache and keeps the newest packages, so if we want to remove everything or almost everything, we can configure pacman appropriately or remove packages manually. These data could be cleaned and saved me a few GB of space, so I stopped seeing system notification. During cleanup, we can also have a look at other cache data, logs and /tmp/ directory. To verify disk sizes and used space, we can use df -H command.\nI hope, you\u0026rsquo;ll find this tips useful and avoid resizing root partition or system re-installation.\n","permalink":"https://wittchen.io/posts/cleaning-root-partition-on-linux/","summary":"Size of the root partition / on my system is 25 GB. I recently had a situation where I received notification from the system that there\u0026rsquo;s too little free space on that partition, which was around 1 GB. My first attempt was to clean pacman cache with sudo pacman -Sc. It helped for a moment, but I kept receiving this notification. I searched for the solutions regarding extending the root partition and noticed that it wouldn\u0026rsquo;t be that easy and probably require making backup and reinstalling the system.","title":"Cleaning root partition on Linux"},{"content":"Sometimes we may want to format external USB drive. I recently encountered a situation, where I had bootable USB drive with operating system ready to install, but I wanted to remove all this stuff and use disk for storing data. I couldn\u0026rsquo;t format this disk with GUI tools for some reason and I kept getting errors or information that it\u0026rsquo;s not possible. In case you don\u0026rsquo;t know, on Linux everything is always possible, so I quit that GUI tool, opened terminal and start playing with good old and simple programs.\nWhen we insert disk and type:\nlsblk we can see the output:\nNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT loop0 7:0 0 181,1M 1 loop /var/lib/snapd/snap/spotify/36 loop1 7:1 0 147,3M 1 loop /var/lib/snapd/snap/skype/66 loop2 7:2 0 88,5M 1 loop /var/lib/snapd/snap/core/7270 loop3 7:3 0 236M 1 loop /var/lib/snapd/snap/kde-frameworks-5/27 loop4 7:4 0 180,2M 1 loop /var/lib/snapd/snap/spotify/35 loop5 7:5 0 149,6M 1 loop /var/lib/snapd/snap/slack/16 sdb 8:16 1 7,5G 0 disk └─sdb1 8:17 1 7,5G 0 part /run/media/pw/DISK3 nvme0n1 259:0 0 477G 0 disk ├─nvme0n1p1 259:1 0 200M 0 part /boot ├─nvme0n1p2 259:2 0 24G 0 part [SWAP] ├─nvme0n1p3 259:3 0 25G 0 part / └─nvme0n1p4 259:4 0 427,8G 0 part /home When we type:\nsudo fdisk -l we\u0026rsquo;ll see:\n... Disk /dev/sdb: 7,51 GiB, 8053063680 bytes, 15728640 sectors Disk model: USB DISK Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: dos Disk identifier: 0x40a863e7 Device Boot Start End Sectors Size Id Type /dev/sdb1 2048 15728639 15726592 7,5G 83 Linux Now, we have basic information about our USB drive. It\u0026rsquo;s located in /dev/sdb and has 7,5 GB of space. Sometimes, we can have mulitple partitions on our drive. In such case, we may want to delete them and create new partition.\nTo do that, we can type:\nfdisk /dev/sdb next, we can use d for deleting partition:\nWelcome to fdisk (util-linux 2.34). Changes will remain in memory only, until you decide to write them. Be careful before using the write command. Command (m for help): d Selected partition 1 Partition 1 has been deleted. and n for creating a new one:\nCommand (m for help): n Partition type p primary (0 primary, 0 extended, 4 free) e extended (container for logical partitions) Select (default p): p Partition number (1-4, default 1): First sector (2048-15728639, default 2048): Last sector, +/-sectors or +/-size{K,M,G,T,P} (2048-15728639, default 15728639): Created a new partition 1 of type \u0026#39;Linux\u0026#39; and of size 7,5 GiB. Partition #1 contains a vfat signature. Do you want to remove the signature? [Y]es/[N]o: Y The signature will be removed by a write command. after that, we can confirm the process with w command:\nCommand (m for help): w The partition table has been altered. Syncing disks. next, we can umount drive:\nsudo umount /dev/sdb and create a file system - in our case, we\u0026rsquo;ll use FAT32 file system in order to make USB drive accessible across all operating systems\nsudo mkfs.vfat /dev/sdb1 after that, we can create a label for our disk with name disk3 (it can be anything):\nsudo mlabel - /dev/sdb1 ::disk3 Please note, when we create file system of a different type, we need to use different commands for creating disk labels. For more information about that, read article about renaming USB devices on Linux.\nThat\u0026rsquo;s it! Maybe it\u0026rsquo;s not that easy as clicking on the GUI, but we can see whole process and format any disk even when something seems to be messed up.\nReferences  https://www.sinisterstuf.org/blog/345/renaming-usb-devices-in-linux https://www.cyberciti.biz/faq/linux-disk-format/  ","permalink":"https://wittchen.io/posts/formatting-usb-disk-on-linux/","summary":"Sometimes we may want to format external USB drive. I recently encountered a situation, where I had bootable USB drive with operating system ready to install, but I wanted to remove all this stuff and use disk for storing data. I couldn\u0026rsquo;t format this disk with GUI tools for some reason and I kept getting errors or information that it\u0026rsquo;s not possible. In case you don\u0026rsquo;t know, on Linux everything is always possible, so I quit that GUI tool, opened terminal and start playing with good old and simple programs.","title":"Formatting USB disk on Linux"},{"content":"During maintenance of the legacy projects, I sometimes see constructions like:\nvoid appendFooter(Report report); or\nvoid populate(Data data); I even saw something like this:\nvoid populate(Source source, Target target); What is wrong with these statements?\nThey\u0026rsquo;re using so called output argument. In the examples above, we\u0026rsquo;re passing a report or data variable, which usually are going to be global variables available in the scope of the whole class. These methods takes them as an argument and modify them. This idea comes from pre-OOP times and could be applied in programs written in C. Nevertheless, in Java, this technique should be avoided and is considered as a bad practice.\nIn Robert C. Martin\u0026rsquo;s \u0026ldquo;Clean Code\u0026rdquo; book, it\u0026rsquo;s written:\nOutput arguments should be avoided.\nWriting code in such way can implicate many problems. Often we don\u0026rsquo;t know, by looking at the method name, how the method is going to modify the input object. Even when we\u0026rsquo;ll write unit tests for each method, the final behavior may be different because in a concrete data flow, one method can modify input object, then another method can modify the same object in a concrete order what will change the final outcome. In this approach data cannot be immutable and body of the method is tightly coupled to the class and it\u0026rsquo;s attributes, which is bad. The more methods like these, the more unpredictable and harder to test code will become. Moreover, when multiple threads will call these methods, then we can encounter errors related to concurrency or data inconsistency.\nHow to fix this problem?\nFirst of all, we should never use input arguments. Variables used in the methods should be available only in the scode of these methods.\nWe can rewrite bad examples listed above in the following way:\nreport.appendFooter(footer); and\nfinal Object value = createValue(); data.setValue(value); and\nSource source = createSource(); target.setValue(source); Now, we clearly see where objects are created, data is immutable, input parameters are not modified inside the methods, we don\u0026rsquo;t rely on the global state inside particular methods and all method\u0026rsquo;s variables are available only in the scope of the method.\nReferences  https://softwareengineering.stackexchange.com/a/245809/189814 https://softwareengineering.stackexchange.com/questions/322490/what-is-an-output-argument-as-refered-to-in-martins-clean-code/322495 https://github.com/denizozger/clean-code#methods  ","permalink":"https://wittchen.io/posts/modifying-methods-input-parameters/","summary":"During maintenance of the legacy projects, I sometimes see constructions like:\nvoid appendFooter(Report report); or\nvoid populate(Data data); I even saw something like this:\nvoid populate(Source source, Target target); What is wrong with these statements?\nThey\u0026rsquo;re using so called output argument. In the examples above, we\u0026rsquo;re passing a report or data variable, which usually are going to be global variables available in the scope of the whole class. These methods takes them as an argument and modify them.","title":"Modifying mehtod's input parameters"},{"content":"During development of the legacy Java applications, we still have to deal with null. It\u0026rsquo;s possible to avoid it completly when we\u0026rsquo;re designing application from the scratch, applying proper code constructions, static code analysis and we\u0026rsquo;re consistent during code reviews. Nevertheless in majority of the cases we will encounter null in daily projects. We may even expect them in the method inputs and we have to be prepared for it. With the functional programming in Java we can deal with them in quite elegant way, but I often see people are not using features available nowadays.\nLet\u0026rsquo;s have a look at the following code snippet:\nprivate List\u0026lt;MyType\u0026gt; getList(final List\u0026lt;MyType\u0026gt; list) { if (list != null || list.isEmpty()) { return Collections.emptyList(); } return list .stream() .filter(...) .collect(Collectors.toList()); } In this example list can be null, so we have to perform null-check. We can also verify if the list is not empty once we\u0026rsquo;re sure it\u0026rsquo;s not null and return empty collection in that case. If the condition is not met, we\u0026rsquo;re converting list to the stream and start processing it.\nWe can use CollectionUtils from Apache Commons library to perform exactly the same check if we have it in our project dependencies:\nprivate List\u0026lt;MyType\u0026gt; getList(final List\u0026lt;MyType\u0026gt; list) { if (CollectionUtils.isEmpty(list)) { return Collections.emptyList(); } return list .stream() .filter(...) .collect(Collectors.toList()); } We can try to figure out, how to achieve the same goal with functional programming concepts in Java and write the same logic within the single, fluent stream. We can call Optional.ofNullable(...) method because we know that our method argument can be null. Next, once we\u0026rsquo;ve got an Optional type, we can call .orElseGet(...) method and provide an object, which we want to return, when nullable value will be null. In this case, it will be an empty list. After that, we can fluently proceed with the stream processing.\nprivate List\u0026lt;MyType\u0026gt; getList(final List\u0026lt;MyType\u0026gt; list) { return Optional .ofNullable(list) .orElseGet(Collections::emptyList) .stream() .filter(...) .collect(Collectors.toList()); } Code snippet above looks much more elegant, it\u0026rsquo;s shorter, more concise and we have achieved our goal within a single stream without any additional if statements and without breaking chain of method invocations.\n","permalink":"https://wittchen.io/posts/get-rid-of-the-list-null-checks/","summary":"During development of the legacy Java applications, we still have to deal with null. It\u0026rsquo;s possible to avoid it completly when we\u0026rsquo;re designing application from the scratch, applying proper code constructions, static code analysis and we\u0026rsquo;re consistent during code reviews. Nevertheless in majority of the cases we will encounter null in daily projects. We may even expect them in the method inputs and we have to be prepared for it. With the functional programming in Java we can deal with them in quite elegant way, but I often see people are not using features available nowadays.","title":"Get rid of the list null-checks"},{"content":"Introduction In my previous article I roughly described Arch Linux installation process. After going through whole process, we will end up with clean terminal without any graphical environment etc. In most cases, we will need it on the desktop.\nDesktop Environment (DE) / Windows Manager (WM) There are two main types of the Linux graphical environments for desktop:\n Window Managers Desktop Environments  Window Managers are much simpler, require a lot of configuration, learning how to use them and you see all windows at once. Moreover, usually you can use them without a mouse and mouse is useless most of the time because you cannot drag and drop windows. Once you master it, working with Window Manager can be very efficient. Example of popular Window Manager is i3. This environments are also lightweight. On the other hand, we have Desktop Environments. They\u0026rsquo;re full of features, windows can be stacked one on another and you can drag and drop them. Several Desktop Environments are extensible through plugins. These kind of graphical interfaces are known to majority of computer users. You can see them on Windows or macOS. Examples of the popular Linux Desktop Environments are Gnome, Xfce and KDE. Of course, mentioned Window Managers and Desktop Environments are not the only avaiable. There are more. I just mentioned these because I\u0026rsquo;ve heard about them or tried them.\nI\u0026rsquo;m using Gnome Desktop Environment right now, so I will show you how to install it in this article\nInstalling X Window System X Window system is a GUI component created in 80s at MIT. One of the most popular implementation of X is X.org, which we\u0026rsquo;re going to install. Gnome is built on top of X that\u0026rsquo;s why, we\u0026rsquo;re installing X first.\nTo install X Window system, we can type:\nsudo pacman -S xorg-server xorg-xinit xorg-server-utils To install desktop features, we can type:\nsudo pacman -S xorg-twm xorg-xclock xterm Now, we can start X Window system, in which we will install Gnome\nstartx Installing Gnome Let\u0026rsquo;s install required fonts:\nsudo pacman -S ttf-dejavu Now, we\u0026rsquo;re ready to install Gnome:\nsudo pacman -S gnome Enable the display manager:\n sudo systemctl enable gdm.service Now, we can reboot our system and once computer restarts, we should see Gnome GUI\nreboot Sound Sound is usually not enabled by default on Arch and we need to install required software:\nsudo pacman -S alsa-utils alsa-utils package is recommended for this task\nWe can type alsamixer to view and adjust the configuration.\nWe can also test our speaker with speaker-test -c 2 command or via Gnome GUI.\nOnce we\u0026rsquo;re done, it\u0026rsquo;s good to reboot the computer.\nSometimes it may be required to perform additional configuration depending on our type of computer or specific sound devices.\nBluetooth If we\u0026rsquo;re using Bluetooth mouse, keyboard, headphones or speaker, we should install appropriate Bluetooth software:\npacman -S pulseaudio-bluetooth Now, we should enable bluetooth.service:\nsystemctl enable bluetooth.service You can connect Bluetooth Device via bluetoothctl or via Gnome GUI.\nbluetoothctl [bluetooth] power on [bluetooth] agent on [bluetooth] scan on [NEW] Device [MAC address] [bluetooth] pair [MAC address] [bluetooth] connect [MAC address] Please note, that devices won\u0026rsquo;t connect automatically after turning the computer on. In order to achieve that, we should mark them as trusted.\nbluetoothctl [bluetooth] trust [MAC address] We should perform the same procedure for all our Bluetooth devices.\nAfter next reboot, our devices should connect automatically before login.\nOther packages Things mentioned above are necessary for running regular desktop environment. Other stuff should be adjusted to our needs. We should keep in mind the fact that Arch is minimalistic distro and it shouldn\u0026rsquo;t be polluted by too many packages. We should install only what we need. Once we\u0026rsquo;re are not using a specified program, it\u0026rsquo;s good to remove it. We should read more about pacman, which is Arch package manager. It allows us to install packages, update and manage them. In order to update our whole operating system and its packages, we can type:\nsudo pacman -Syuw That\u0026rsquo;s one of the many pacman features. We can install new packages calling pacman with -S parameter:\nsudo pacman -S package It\u0026rsquo;s also good to remember that, we can use aur repository, which provides third-party packages from users and vendors in case we want to install a specific kind of software. While playing with aur, I was tired of repatitive tasks, so I created (yet another) simple aur helper available here: https://github.com/pwittchen/aur.sh, which you can use. Please note, it doesn\u0026rsquo;t resolve package dependencies yet.\nSummary Now, we have prepared simple, basic and clean desktop environment. From this point, we can proceed with the further adjustments and customizations (or leave it as it is :-). In the past I worked with Windows, macOS and Ubuntu Linux and personally I think I like Arch Linux distribution with such setup the most. I can control everything, I know what is working under the hood and how it\u0026rsquo;s configured, I have installed only software packages I really need, updates are seamless and everything just works. It\u0026rsquo;s really hard to break anything on this system if you know what you\u0026rsquo;re doing. Moreover, documentation and community are great. Of course, it requires some learning and time in the beginning, but if you\u0026rsquo;re working with computers or like playing with them, in my opinion it\u0026rsquo;s time well invested because Linux knowledge can be our great asset at work or in daily usage of the computer.\n","permalink":"https://wittchen.io/posts/arch-install-notes-gui-and-utils/","summary":"Introduction In my previous article I roughly described Arch Linux installation process. After going through whole process, we will end up with clean terminal without any graphical environment etc. In most cases, we will need it on the desktop.\nDesktop Environment (DE) / Windows Manager (WM) There are two main types of the Linux graphical environments for desktop:\n Window Managers Desktop Environments  Window Managers are much simpler, require a lot of configuration, learning how to use them and you see all windows at once.","title":"Arch Linux - installation notes no. 2 (GUI and utils)"},{"content":"Introduction For a long time, I was considering switching from Ubuntu do Arch Linux distribution, but I didn\u0026rsquo;t have enough knowledge, time and energy to do this. I definitely knew it requires some specific knowledge and manual steps to perform. I also didn\u0026rsquo;t wat to spend too much time on reading the documentation. Moreover, I know that sometimes I could have specific issues related to my hardware, which are not listed in documentation and I have to deal with them on my own. Due to these facts I was discouraged to install Arch. Recently, I found awesome video about Full Arch Linux Install by Luke Smith where everything is explained very clearly in each step. I watched it one time without doing anything and then, watched it next time performing all the steps described there. I had a few issues related to my hardware and BIOS, but I managed to install Arch on my ThinkPad T470s thanks to this video. During the installation, I made a few notes for myself for the future possible installations. Maybe you\u0026rsquo;ll find them useful too. The whole process is actually simpler than I thought. It just requires some practical knowledge about Linux, patience and \u0026ldquo;can do\u0026rdquo; attitude. I divided this article into steps and sub-steps, which are required to perform the installation. Please, keep in mind the fact that in the end of the installation, we will have an empty command prompt with plain OS without any GUI and we will have to install the graphical environment from the terminal. It will not be covered in this article, but I think, I\u0026rsquo;ll cover it in another one. Of course, this article contains just my notes, which help me understand everything well because and I like documenting this kind of things for the future. If you searching for Arch installation guide, I recommend you to see linked video or an official Arch installation guide in Arch Wiki. This article can be additional resource to this stuff.\nBooting installer from USB Creating bootable USB In order to create bootable USB, we need to download *.iso file with Arch from https://www.archlinux.org/download/. We also need to have dd (disk dump) program installed. We need to invoke lsblk before inserting USB drive to see our drives and invoke lsblk again after inserting the USB drive to see, which one it is. We can also have a look at disk sizes, what helps in recognizing our disk. Next, we can call dd:\ndd if=/path/to/arch.iso of=/dev/sdb status=\u0026#34;progress\u0026#34; status=\u0026quot;progress\u0026quot; parameter will allow us to monitor progress of the whole process.\nNote: please, be sure that you are writing on the correct disk! In the example above, we\u0026rsquo;re writing to /dev/sdb. It may be the same in your case, but it may be different too! It\u0026rsquo;s just an example!\nBIOS configuration We need to go into the BIOS before installation. It may be different on different computers. On mine it\u0026rsquo;s hitting Enterafter reboot and then F1. Inside BIOS, we need to change order of booting devices and move USB drive to the top. I also had to disable secure boot and quick boot. Moreover I set UEFI/Legacy Boot to Both (UEFI/Legacy Boot Priority: UEFI First, CSM Support: YES). Sometimes network boot may interrupt boot process, so I set it to USB HDD. I had to play more with this stuff on freshly installed system because it was not booting in the beginning. It may be different on your computer. Sometimes, there may be no issue with it.\nFirst things UEFI check Once we have booted installer from USB stick, we need to perform UEFI check as follows.\nls /sys/firmware/efivars If it outputs an error or nothing, that\u0026rsquo;s ok and we can proceed with installation. If you see bunch of files, then installation procedure may be different or may require additional steps.\nInternet check We need to check an internet connection because we will need it to download packages. We can do it just by simple ping:\nping wittchen.io When we see response, that\u0026rsquo;s ok.\nIt\u0026rsquo;s worth to mention, that it\u0026rsquo;s good to have ethernet cable connection for the installation process. Optionally, you can use wifi-menu to connect wirelessly, but it\u0026rsquo;s not recommended for the installation.\nSystem time and date initial setup To perform system time and date initial setup, we need to run the following command:\ntimedatectl set-ntp true Partitions Let\u0026rsquo;s see what partitions do we have on our system. We can view them with lsblk program.\nlsblk Before we start doing anything, we should remove existing partitions. We can do it with fdisk tool by running it with our main disk as a parameter. Usually it will be /dev/sda, but in my case it was /dev/nvme0n1. We can get this name from lsblk output.\nfdisk /dev/nvme0n1 Removing existing partitions Next, we can choose different options. In our case, we need to choose :d to delete partitions. We need to call this option for each partition.\nSometimes, we may have problems with installation or removing old partitions. In that case, we can use alternative method of cleaning disk:\nsgdisk --zap-all /dev/nvme0n1p1 Creating new partitions Now, we have to prepare our disk for the future system installation. Our goal is to have the following configuration of the partitions\nnvme0n1 259:0 0 477G 0 disk ├─nvme0n1p1 259:1 0 200M 0 part /boot ├─nvme0n1p2 259:2 0 24G 0 part [SWAP] ├─nvme0n1p3 259:3 0 25G 0 part / └─nvme0n1p4 259:4 0 427,8G 0 part /home This is the output from my current system and nvme0n1 is the disk. First partition (nvme0n1p1) is boot partition used during the system boot. Next partition (nvme0n1p2) is a SWAP partition, which acts as an overflow for our RAM memory, when it gets filled up. Third partition (nvme0n1p3) is root partition, which is the root of the file system and programs will be installed there. The last partition (nvme0n1p4) is home partition, where we are going to keep our files.\nIn order to create new partition, we have to call fdisk /dev/nvme0n1p1 (if we haven\u0026rsquo;t done it yet). Let\u0026rsquo;s create boot partition. Type :c for create. We leave first sector empty, hit Enterin the last sector we put +200M for 200 megabytes, which is recommended value for boot partitoin and confirm it with Enter. We follow this procedure for SWAP, which should have size = 1.5 * size of RAM in computer. I currently have 16GB of RAM, so it\u0026rsquo;s 1.5 * 16 GB = 24 GB, so I put +24G in the last sector. Next, we can create root partition. It should have around +25G. You can decrease it if you have small disk or increase it if you have huge disk and plans to install a lot of programs. In the end, we are creating home partition, where in the last sector option we can just hit Enterand fdisk will assign remaining disk space to this partition. When we\u0026rsquo;re done, we should confirm our partition configuration with :w like write. Then, we can type lsblk again to see our written configuration. It should look like in the example above.\nCreating file systems Next, we can to create file systems on our partitions. In general, we can use ext4, which is Linux file system. Some devices may have boot problems or may have specific BIOS setup. In that case, it\u0026rsquo;s recommended to use FAT32 file system. Let\u0026rsquo;s use mkfs program to create file systems.\nWe will create FAT32 file system on our boot partition:\nmkfs.vfat -F32 /dev/nvme0n1p1 Then, we will create ext4 file systems on root and home partitions:\nmkfs.ext4 /dev/nvme0n1p3 mkfs.ext4 /dev/nvme0n1p4 Creating SWAP Now, we can create SWAP on the nvme0n1p2 partition:\nmkswap /dev/nvme0n1p2 Next, we can turn the SWAP on:\nswapon /dev/nvme0n1p2 Mounting partitions Right now, we are ready to mount our partitions.\nWe can mount the root partition as follows:\nmount /dev/nvme0n1p3 /mnt When we list this partition:\nls /mnt we should see lost+found file, which is a generic system file.\nNow on the root partition we can create home and boot directories.\nmkdir /mnt/home mkdir /mnt/boot and mount our previously created partitions into these dirs:\nmount /dev/nvme0n1p1 /mnt/boot mount /dev/nvme0n1p4 /mnt/home and then we can type lsblk to see that everything is created properly.\nArch installation Now, there is an easy part. We have everything prepared and we\u0026rsquo;re ready to install the operating system.\nArch can be installed with literally one command:\npacstrap /mnt base It\u0026rsquo;s recommended to install base-devel package, which contains additional software, which may be required to run everything. We can also install vim, to have an editor to edit our configs and other stuff. The final command can look like this:\npacstrap /mnt base base-devel vim Creating fstab We should also create fstab file, which contains information about system drives and mounted partitions and file systems. We can do it as follows:\ngenfstab -U /mnt \u0026gt;\u0026gt; /mnt/etc/fstab My /etc/fstab file looks like that:\n# Static information about the filesystems. # See fstab(5) for details. # \u0026lt;file system\u0026gt; \u0026lt;dir\u0026gt; \u0026lt;type\u0026gt; \u0026lt;options\u0026gt; \u0026lt;dump\u0026gt; \u0026lt;pass\u0026gt; # /dev/nvme0n1p3 UUID=d94887d0-daff-4a4b-a28a-1de3fdadbb58/ ext4 rw,relatime0 1 # /dev/nvme0n1p1 UUID=97B8-B124 /boot vfat rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=iso8859-1,shortname=mixed,utf8,errors=remount-ro0 2 # /dev/nvme0n1p4 UUID=75b24330-5ca7-47fc-a6ea-3d4cd826df4d/home ext4 rw,relatime0 2 # /dev/nvme0n1p2 UUID=2788826f-9abf-44c7-b2d5-15323be8ba4enone swap defaults 0 0 Operations inside the system Changing root Now, we can change the root:\narch-chroot /mnt After typing command above, we jumped from the bootable USB drive into the operating system installed on the disk of our computer.\nNow, we\u0026rsquo;re able to perform operations inside the system.\nInstalling network manager First of all, we should install network manger via pacman to have network and Internet connectivity:\npacman -S networkmanager to enable network manager, we can type:\nsystemctl enable NetworkManager Installing GRUB We also have to install GRUB, which will be responsible for booting our operating system:\npacman -S grub Next, we have to configure it:\ngrub-install --target=i386-pc /dev/nvme0n1 Please note, we provided path to the disk (drive) - not the partition.\nNext, we should create /boot/grub/grub.cfg configuration file:\ngrub-mkconfig -o /boot/grub/grub.cfg Setting password to set the password, we can just type:\npasswd Setting locale To set locale, we need to edit /etc/locale.gen (e.g. via vim) and uncomment desired locales (one or more).\nIn my case I uncommented:\npl_PL.UTF-8 pl_PL ISO-8859-2 en_US.UTF-8 en_US ISO-88591 becasue I wanted to use both Polish and English language.\nNow, we can type:\nlocale-gen To set default locale, we have to edit /etc/locale.conf and set LANG variable as follows:\nLANG=en_US.UTF-8 Of course, we can set pl_PL.UTF-8 too or any other language we want to use as default system language. I personally use English as a OS language, bacause it\u0026rsquo;s easier to diagnose possible issues, when you have English messages in terminal. Nevertheles, I use Polish as an input language, to be able to use Polish letters, european metric system, Polish currency, etc. It should be adjusted to our needs.\nSetting timezone You can browse time zones in /usr/share/zoneinfo directory. To set our time zone, we need to create a symbolic lin between desired time zone and /etc/localtime file. Once we change our time zone, we can create a symbolic link again.\nln -sf /usr/share/zoneinfo/Europe/Warsaw /etc/localtime My time zone is Warsaw in Europe, but you can set your own time zone here.\nSetting hostname To create our hostname, which is name of the computer, we can edit /etc/hostname file and put our name there.\nMy hostname is arch.\nFinalization Unmounting file systems Before we reboot our computer, we should unmount partitions:\numount -R /mnt Rebooting To reboot computer, we can just type:\nreboot What\u0026rsquo;s next? Once, our computer will be restarted, GRUB should boot our operating system and we should see the black screen with white letters and command prompt. It means, everything went fine, our system is installed and booted! Now, we\u0026rsquo;re ready to install other sutff (e.g. Desktop Environment or Window Manager). We can also leave it without GUI, if our computer has really low specs or when we\u0026rsquo;re planning to use this machine as a server or something like that.\nSummary To wrap up, installing Arch is not trivial and requires some proficiency with Linux and terminal. Neverhteless, once you have some basics, it\u0026rsquo;s no that hard as we can expect. In addition, we have great documentation and resources on the web about it. Going through this process can be nice lesson. You can see, how much stuff automatic installers are doing for us. Moreover, we can totally adjust system to our needs. We don\u0026rsquo;t need to have a bloat of not necessary packages and programs like we have on Ubuntu. We can install exactly what we need and track our packages. I haven\u0026rsquo;t mentioned it before, but Arch has rolling release system. It means, there are no huge system updates like in Ubuntu, Windows or macOS. We can gradually update our system by installing small amount of single packages and our system can be up to date basically everyday. I\u0026rsquo;m using Arch for a few weeks for now and it seems to be one of the best and most stable operating systems I have used so far. It\u0026rsquo;s quite hard to break something on this system until you explicitly break it (e.g. by typing into terminal commands you don\u0026rsquo;t understand). It\u0026rsquo;s also light-weight and customizable. I cannot recommend this system to people who are not familiar with Linux, don\u0026rsquo;t like to play with computers and software, don\u0026rsquo;t want to fix stuff for themselves, customize system etc., but if you\u0026rsquo;re are not in this group, this OS may be for you.\n","permalink":"https://wittchen.io/posts/arch-install-notes/","summary":"Introduction For a long time, I was considering switching from Ubuntu do Arch Linux distribution, but I didn\u0026rsquo;t have enough knowledge, time and energy to do this. I definitely knew it requires some specific knowledge and manual steps to perform. I also didn\u0026rsquo;t wat to spend too much time on reading the documentation. Moreover, I know that sometimes I could have specific issues related to my hardware, which are not listed in documentation and I have to deal with them on my own.","title":"Arch Linux - installation notes"},{"content":"In my previous article I published information about publishing JAR/AAR library to the Maven Central Repository. A few steps of that process were automated, but a few of them were still manual. I mean closing and release process which had to be done by manual clicking on the Sonatype website. Fortunately, it\u0026rsquo;s possible to automate it. In order to do that, I used gradle-nexus-staging-plugin developed by Codearte. Thanks to this plugin I could get rid of the remaining manual steps left in the release process.\nPlease note, if you want to apply configuration described in this article to your project, you need to perform the steps described in the article about Publishing JAR/AAR to the Maven Central.\nIn my project, in the top-level build.gradle file I had to do the following setup:\napply plugin: \u0026#39;io.codearte.nexus-staging\u0026#39; ... buildscript { repositories { google() jcenter() mavenCentral() maven { url \u0026#39;https://plugins.gradle.org/m2/\u0026#39; } } dependencies { ... classpath \u0026#34;io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.12.0\u0026#34; } } ... def getRepositoryUsername() { return hasProperty(\u0026#39;NEXUS_USERNAME\u0026#39;) ? NEXUS_USERNAME : \u0026#34;\u0026#34; } def getRepositoryPassword() { return hasProperty(\u0026#39;NEXUS_PASSWORD\u0026#39;) ? NEXUS_PASSWORD : \u0026#34;\u0026#34; } nexusStaging { packageGroup = GROUP //optional if packageGroup == project.getGroup()  stagingProfileId = \u0026#34;YOUR_STAGING_PROFILE\u0026#34; //when not defined will be got from server using \u0026#34;packageGroup\u0026#34;  username = getRepositoryUsername() password = getRepositoryPassword() } In order to get YOUR_STAGING_PROFILE, we need to call the following command available in the plugin:\n./gradlew getStagingProfile When we are done, we can simply call:\n./gradlew uploadArchives closeAndReleaseRepository These two gradle tasks will upload our artifact, close and release it, so we won\u0026rsquo;t have to perform any manual steps in that process. After that, we just need to wait for the Maven sync as usual.\nMy complete release.sh script looks like that:\n#!/usr/bin/env bash ./gradlew clean build test check uploadArchives closeAndReleaseRepository Before upload and release, I also clean everything, build an artifact, run tests and static code analysis. It\u0026rsquo;s not required, but it\u0026rsquo;s good to do that.\nIf you are interested in complete project configuration, you can have a look at the https://github.com/pwittchen/ReactiveNetwork repository. It\u0026rsquo;s an Android library, but the same configuration can be applied to any JVM project built with Gradle. I have performed library release with this plugin a few times and it seems to work well.\n","permalink":"https://wittchen.io/posts/zen-of-java-library-release-process/","summary":"In my previous article I published information about publishing JAR/AAR library to the Maven Central Repository. A few steps of that process were automated, but a few of them were still manual. I mean closing and release process which had to be done by manual clicking on the Sonatype website. Fortunately, it\u0026rsquo;s possible to automate it. In order to do that, I used gradle-nexus-staging-plugin developed by Codearte. Thanks to this plugin I could get rid of the remaining manual steps left in the release process.","title":"Zen of the Java library release process"},{"content":"Introduction As a Java/JVM/Android developers we rely on the work of other people through frameworks and libraries. Many of them are open-source. Most of the developers are consumers of such projects. What if we would like to create our own library and distribute it to other developers? We can always create it and share a *.jar or *.aar file with others. Drawback of such solution is the fact that source of distribution may not be trusted. We also have problems with versioning. Consumers of the library have to constantly download and update their files. It\u0026rsquo;s much better to publish our library to Maven Central Repository and allow others to easily and seamlessly add it as an external dependency to pom.xml file (in case of Maven) or build.gradle file (in case of Gradle). In such case, dependency is managed by the appropriate build system and distributed via trusted source. This may be not easy for the first time that\u0026rsquo;s why I decided to collect information related to this topic in a single article. Let\u0026rsquo;s see how to do this.\nGenerating a GPG Key Before we upload library, we need to generate GPG key.\nIn order to generate GPG key, we need to open the terminal and type the following command:\ngpg2 --gen-key Then, we should see the output:\n... gpg: key YOUR_KEY_ID marked as ultimately trusted ... Read more at: https://alexcabal.com/creating-the-perfect-gpg-keypair\nDistributing the public key Next, we need to distribute public key. We can do that as follows:\ngpg --keyserver hkp://pool.sks-keyservers.net --send-keys YOUR_KEY_ID We can distribute our key to multiple servers to speed up the synchronization process (pgp.mit.edu, keyserver.ubuntu.com, etc.)\nWe can also list our keys as follows:\ngpg2 --list-keys To list secret keys, we can type:\ngpg2 --list-secret-keys Preparing the Gradle configuration In my case, I used Gradle as a build system, which works well for Java, Kotlin and Android projects. We can use Maven for this purpose as well. As a reference, I used a Gradle script prepared by Chris Banes. You can have a look at it in one of my projects.\nIn my libraries, I usually have the following structure:\n/ ├── library │ ├── gradle.properties │ └── build.gradle │ ├── build.gradle ├── maven_push.gradle └── gradle.properties In maven_push.gradle I keep the mentioned release script. In the library/gradle.properties, I keep details about artifact released from a given directory:\nPOM_NAME=reactivenetwork POM_ARTIFACT_ID=reactivenetwork-rx2 POM_PACKAGING=aar It can be jar if you\u0026rsquo;re releasing pure Java library. Here\u0026rsquo;s an example for Android library.\nIn the /gradle.properties file, I keep release configuration:\nVERSION_NAME=3.0.3 VERSION_CODE=34 GROUP=com.github.pwittchen POM_DESCRIPTION=Android library listening network connection state and Internet connectivity with RxJava Observables POM_URL=https://github.com/pwittchen/ReactiveNetwork POM_SCM_URL=https://github.com/pwittchen/ReactiveNetwork POM_SCM_CONNECTION=scm:git@github.com:pwittchen/ReactiveNetwork.git POM_SCM_DEV_CONNECTION=scm:git@github.com:pwittchen/ReactiveNetwork.git POM_LICENCE_NAME=The Apache Software License, Version 2.0 POM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt POM_LICENCE_DIST=repo POM_DEVELOPER_ID=pwittchen POM_DEVELOPER_NAME=Piotr Wittchen org.gradle.daemon=true org.gradle.jvmargs=-XX:MaxPermSize=1024m -XX:+CMSClassUnloadingEnabled -XX:+HeapDumpOnOutOfMemoryError -Xmx2048m In the library/build.gradle file I need to include release Gradle script:\napply from: \u0026#39;../maven_push.gradle\u0026#39; ... In the $HOME/.gradle/gradle.properties file, I keep system-wide release configuration for Sonatype:\nsigning.keyId=YOUR_KEY_ID signing.password=YOUR_SIGNING_PASSWORD signing.secretKeyRingFile=/home/piotr/.gnupg/secring.gpg NEXUS_USERNAME=YOUR_NEXUS_USERNAME NEXUS_PASSWORD=YOUR_NEXUS_PASSWORD YOUR_NEXUS_USERNAME and YOUR_NEXUS_PASSWORD can be defined during account creation on the http://oss.sonatype.org website.\nOf course, you need to provide your own path to secretKeyRingFile, which was created during generating key.\nIf you\u0026rsquo;re interested in the complete project structure prepared for library release, you can have a look at the following examples:\n Java library (compiled into *.jar file): https://github.com/pwittchen/kirai Android library written in Java (compiled into *.aar file): https://github.com/pwittchen/ReactiveNetwork Android library written in Kotlin (compiled into *.aar file): https://github.com/pwittchen/RxBiometric  Creating a Jira ticket for Sonatype We should create a Sonatype Jira account and a new project ticket. You can have a look at my first issue. It took a bit longer in my case, because I needed to adjust package name.\nTo avoid my mistakes, have a look at the following guides:\n https://central.sonatype.org/pages/ossrh-guide.html https://central.sonatype.org/pages/choosing-your-coordinates.html  Please note, this step is required for the first time only as well as generating keys. After that, we we\u0026rsquo;ll be able to release as many artifacts under the given package name as we want. These steps need to be repeated in the case of registering the new package name.\nThis is reasonable from the security and stability perspective because random people cannot just override widely used packages what might cause serious problems in many projects around the world.\nUploading an artifact Once, we have everything set up, we can go to our project via terminal, and type:\n./gradlew uploadArchives and wait while artifacts are being uploaded.\nReleasing an artifact Next, we need to go to the http://oss.sonatype.org website, log in and on the left-hand side, click \u0026ldquo;Staging Repositories\u0026rdquo;. Then, we need to sort artifacts by date (Updated column), to view the recently updated items. We should find our artifact (it should be on the top) and click it. We can verify its contents to ensure that everything is ok (package name, version, etc.) and then, we should press \u0026ldquo;Release\u0026rdquo; on our artifact. Once release is done, we should press \u0026ldquo;Close\u0026rdquo; on the artifact.\nCommenting the Jira ticket When we are done with the previous steps, we should go back to our Jira ticket and provide the comment:\nI have promoted my first release. Thanks. Waiting for the Maven sync After all of these steps, we need to wait for the acceptance from the people from Sonatype and Maven Sync. Maven Sync can take no longer than 48 hours. It\u0026rsquo;s usually faster, but it won\u0026rsquo;t happen immediately after releasing and closing an artifact like in the release of the Python packages.\nSummary We can see, that release process may be overwhelming and time consuming, but once we release the first artifact, we can skip most of these steps like generating keys and creating Jira ticket. We just need to have Gradle or Maven configuration, upload artifacts, release and close them via sonatype website and wait for the Maven Sync. Process of releasing new versions of the same artifact is the same as the first release (excluding mentioned first-time steps). During the next release, we simply need to bump library version in the Gradle configuration before uploading artifacts. In the future, I\u0026rsquo;m planning to write another article, which shows how to skip manual steps of going to Sonatype website and releasig artifacts via clicking on the page via Gradle plugins, so everything will be automated via CLI.\nLinks and references  https://stackoverflow.com/questions/28846802/how-to-manually-publish-jar-to-maven-central https://chris.banes.dev/2013/08/27/pushing-aars-to-maven-central/ https://dzone.com/articles/deploy-maven-central https://central.sonatype.org/pages/gradle.html https://central.sonatype.org/pages/apache-maven.html https://central.sonatype.org/pages/working-with-pgp-signatures.html https://alexcabal.com/creating-the-perfect-gpg-keypair https://central.sonatype.org/pages/ossrh-guide.html https://central.sonatype.org/pages/choosing-your-coordinates.html https://gist.github.com/diegopacheco/13c0754f0ab36482f4f804ef3f05f989  ","permalink":"https://wittchen.io/posts/publishing-jar-aar-to-maven-central/","summary":"Introduction As a Java/JVM/Android developers we rely on the work of other people through frameworks and libraries. Many of them are open-source. Most of the developers are consumers of such projects. What if we would like to create our own library and distribute it to other developers? We can always create it and share a *.jar or *.aar file with others. Drawback of such solution is the fact that source of distribution may not be trusted.","title":"Publishing a JAR/AAR to the Maven Central"},{"content":"Introduction I recently I had an opportunity to join \u0026ldquo;Kyma meets CCV2 Hackathon\u0026rdquo; in the SAP Labs Poland office in Gliwice. The goal of the hackathon was to create a simple project, which will use Kyma to integrate external services with the SAP Hybris Commerce Platform. CCV2 stands for \u0026ldquo;Commerce Cloud Version 2\u0026rdquo;, which are basically SAP Hybris Commerce solutions deployed on the MS Azure Cloud (that\u0026rsquo;s a long story described in a short way). I joined a team consisting of people from a few different departments in the office, so we didn\u0026rsquo;t actually know each other before the event. We decided to create a simple application consisting of a few microservices, which will send an e-mail with a promotional link to the user once he or she add something to the cart in the on-line shop. After clicking on the link sent via the e-mail, user will be redirected to the front-end application, where he or she has to click on the button as many times as possible in a given period of time.\nThe more clicks were performed, the higher discount user will get, but not higher than 20%. When game is finished, front-end application is sending a request to the voucher service from which we can retrieve a promotional code.\nWith this code, we can go to the SAP Hybris Commerce store-front\u0026hellip;\n\u0026hellip;and get our discount!\nApplication overview General concept of the application flow is presented on the diagram below.\nWe decided to create three microservices:\n mailing service written in Node.js front-end application with clicking game written in JavaScript voucher service written in Kotlin  All microservices needed to have corresponsing Docker containers, which were deployed to the Kyma instance. Kyma was communicating with SAP Hybris Commerce platform written in Java. Thanks to clear separation of a different environments, we were able to integrate services using different technologies.\nCreating a microservice I was responsible for writing voucher storage microservice. On daily basis I use Java programming language, but I wanted to try something new, so I chose Kotlin. Kotlin is a JVM language, so it runs on the same runtime as regular Java applications. Moreover, I could use tools I\u0026rsquo;m familiar with like IntelliJ, Gradle, etc. In my microservice I used Gradle as a build tool, Javalin for designing REST API and Dagger for Dependency Injection. Moreover, for writing unit tests I used JUnit, JUnitParams, Truth and Mockito. I also wrote a few integration tests for the API with REST Assured. As you can see, I could easily use Java libraries in the Kotlin application because those two languages are fully interoperable.\nREST API definition of my application looks pretty simple:\nclass Application { companion object { private val logger = LoggerFactory.getLogger(Application::class.java) private val component = DaggerApplicationComponent.create() private val voucherController = component.voucherController() private val voucherHttpFacade = component.voucherHttpFacade() @JvmStatic fun main(args: Array\u0026lt;String\u0026gt;) { Javalin .create() .enableCorsForAllOrigins() .requestLogger { ctx, time -\u0026gt; logger.info(\u0026#34;${ctx.method()}${ctx.path()}${ctx.status()}took $timems\u0026#34;) }.routes { get(\u0026#34;/voucher\u0026#34;) { voucherHttpFacade.getAll(it) } get(\u0026#34;/voucher/:group\u0026#34;) { voucherHttpFacade.getGroup(it) } get(\u0026#34;/health\u0026#34;) { it.json(Health(\u0026#34;UP\u0026#34;)).status(HttpStatus.OK_200) } get(\u0026#34;/\u0026#34;) { it.status(HttpStatus.FORBIDDEN_403) } } .event(JavalinEvent.SERVER_STARTING) { voucherController.loadVouchers() } .start(7000) } } } I have an endpoint for gathering all vouchers, gathering single voucher for a given group and deactivating it and health-check. In addition, I\u0026rsquo;m loading all the vouchers into the application memory on the server startup using Kotlin coroutine under the hood asynchronously.\noverride fun loadVouchers() { GlobalScope.async { loadVouchersFromAllGroups() } } Application can be build with Gradle as follows:\n./gradlew build I\u0026rsquo;m using Shadow Gradle plugin to create fat jar. Once, build is finished, I can start the application with embdedded Jetty HTTP server on the port 7000.\njava -jar build/libs/app-1.0-all.jar You can find source code of the whole application at: https://github.com/pwittchen/voucher-storage-service.\nDeployment of the microservice In order to deploy the microservice to the Kyma, I needed to prepare Dockerfile, which looks as follows:\nFROMopenjdk:8-jre-alpineMAINTAINERpwittchenWORKDIR/appCOPY build/libs/app-1.0-all.jar .RUN ls -la /appCMD java -jar app-1.0-all.jarIt\u0026rsquo;s just a lightweight Alpine Linux with Java 8 and Kotlin application compiled into fat jar.\nTo build the container, I invoked command:\nsudo docker build -t pwittchen/voucher-storage-service . and to run it, I invoked command:\nsudo docker run -p 127.0.0.1:7000:7000 -t pwittchen/voucher-storage-service I also pushed it to the docker hub because Kyma gets required containers from there.\nNext, I created deployment.yml file for Kubernetess, which is used by Kyma under the hood.\napiVersion:extensions/v1beta1kind:Deploymentmetadata:name:voucher-storage-servicelabels:app:voucher-storage-servicespec:selector:matchLabels:app:voucher-storage-servicetemplate:metadata:labels:app:voucher-storage-servicespec:containers:- name:webimage:docker.io/pwittchen/voucher-storage-service:latestports:- containerPort:7000---apiVersion:v1kind:Servicemetadata:name:voucher-storage-servicelabels:app:voucher-storage-servicespec:ports:- name:httpport:7000selector:app:voucher-storage-serviceSuch configuration had to be provided for Kyma by all microservices.\nSummary Once, we deployed all the microservices and tested the whole flow, we needed to apply a few adjustments. When issues were fixed, whole application worked correctly. This proves that external services written in different technologies can be integrated with SAP Hybris Commerce using Kyma. This hackathon was pretty nice experience, learning opportunity and productive distraction from daily projects. Moreover, our team won the whole event ex aequo with another team located in Germany. Thanks to this hackathon, I have better understanding of Kyma and integration tooling for the SAP Hybris Commerce platform.\n","permalink":"https://wittchen.io/posts/kyma-meets-ccv2-hackathon-summary/","summary":"Introduction I recently I had an opportunity to join \u0026ldquo;Kyma meets CCV2 Hackathon\u0026rdquo; in the SAP Labs Poland office in Gliwice. The goal of the hackathon was to create a simple project, which will use Kyma to integrate external services with the SAP Hybris Commerce Platform. CCV2 stands for \u0026ldquo;Commerce Cloud Version 2\u0026rdquo;, which are basically SAP Hybris Commerce solutions deployed on the MS Azure Cloud (that\u0026rsquo;s a long story described in a short way).","title":"Kyma meets CCV2 hackathon summary"},{"content":"Recently, I had an opportunity to speak at the software development conference abroad for the first time. I visited Malmö in Sweden and gave a talk during the Øredev 2018 conference. The main theme of the conference was Deus Ex Machina, so I decided to adapt to this topic and prepared presentation about Brain-Computer Interfaces, which is my interest since the end of my studies at the Silesian University of Technology where I wrote a Master Thesis about similar topic. Before the conference, I prepared the same presentation in Polish during the SAP Lunch Talks for the colleagues from my company in Gliwice, Poland.\nInteractions with the audience After my presentation people sent tweets on the web and even made really nice notes!\n https://twitter.com/roshan_khan/status/1064559411199467520 https://twitter.com/katrina_tester/status/1064560075786866688  I was impressed by that!\nExcept for interactions on the web, I got a few interesting questions from the audience during the Q\u0026amp;A session and after the presentation. Moreover, people were willing to talk about the subject of the presentation during the conference what was really nice and shown their interest in this area. If you didn\u0026rsquo;t have an opportunity to see this presentation, but you are interested in watching it, it should be available on YouTube on the Øredev Channel and I\u0026rsquo;ll add appropriate link on the talks page on this website once I get it.\nExperiences from the conference Attending such international event as a speaker was really interesting experience, which broadens my mind. I met nice and interesting people from different countries all over the world. There was also some time to grab local craft beers and talk with other speakers. Organization and logistics of the conference were really good. Conference organizers covered costs of the flights, accommodation and organised everything in advance. Moreover, there were additional activities for speakers like sauna, dinner and meeting in the city hall of Malmö. There was also a party and performance in the end of the second day for all attendees. Breaks between the sessions were fine (around 20-30 minutes), so people didn\u0026rsquo;t have to rush from one room to another. There were 7 concurrent sessions on 2 floors. Technicians in the rooms also did great job and everything worked without any problems. It\u0026rsquo;s worth mentioning that food was quite good and healthy what is not usual thing during IT conferences. I also attended talks of other speakers and I can tell that there was wide variety of topics: programming, AR, VR, mathematics, JVM, new programming languages (e.g. Unison), UX, Mobile, Music, Security, Machine Learning, AI, Biohacking, Art, etc. Presenters were well prepered and most of the presentations I attended were interesting and entertaining. There were also discussion panels where audience could ask questions. This form of sharing knowledge and opinions was good addition to regular talks. To sum up, I had to put some effort and spend some time during my preparations and sending call for papers, but in general it was good decision to join this event. I can recommend it to everyone interested in IT.\nReferences and links  https://github.com/pwittchen/neurosky-android-sdk https://github.com/pwittchen/EEGReader http://wittchen.io/tags/bci/ https://speakerdeck.com/pwittchen/brain-computer-interfaces-science-fiction-or-reality https://play.google.com/store/apps/details?id=com.pwittchen.eeganalyzer http://developer.choosemuse.com/ http://developer.neurosky.com/ https://en.wikipedia.org/wiki/Brain%E2%80%93computer_interface http://oredev.org/  ","permalink":"https://wittchen.io/posts/bci-sci-fi-or-reality-oredev-2018/","summary":"Recently, I had an opportunity to speak at the software development conference abroad for the first time. I visited Malmö in Sweden and gave a talk during the Øredev 2018 conference. The main theme of the conference was Deus Ex Machina, so I decided to adapt to this topic and prepared presentation about Brain-Computer Interfaces, which is my interest since the end of my studies at the Silesian University of Technology where I wrote a Master Thesis about similar topic.","title":"Brain-Computer Interfaces - Science Fiction or Reality?"},{"content":"I recently wrote a new library called NeuroSky Android SDK. It\u0026rsquo;s used for writing Android apps using signals of the brain waves received from the NeuroSky MindWave Mobile headsets. Probably I\u0026rsquo;ll write a separate article about it because it\u0026rsquo;s quite interesting topic. This library uses ThinkGear library, which is distributed by the NeuroSky as a *.jar file, so I couldn\u0026rsquo;t use it as a Gradle or Maven dependency in my project and I had to put this *.jar file into the lib directory and link it in the build.gradle file. Moreover, I wanted to create a library, which can be added to the project as a single Gradle dependency without messing around with additional *.jar files or custom configuration. Due to this fact, I decided to create a fat *.aar file and deploy it to the Maven Central repository. For those who are not familar with Android, *.aar is an Android version or *.jar file, which can be used as library in the project. I didn\u0026rsquo;t want to reinvent the wheel, so I searched for the different solutions. Unfortunatey, a few of them didn\u0026rsquo;t work, but luckilly I\u0026rsquo;ve found what I wanted. It\u0026rsquo;s fat AAR Gradle Plugin developed by Mobbeel company.\nHere\u0026rsquo;s how I configured everything:\nIn my top-level build.gradle file I defined dependency to my custom *.jar file and other dependencies.\next.deps = [ // other dependencies goes here...  thinkgear : files(\u0026#39;library/libs/ThinkGear.jar\u0026#39;) ] Next, I added dependency to the plugin within a buildscript section.\nbuildscript { repositories { google() jcenter() mavenCentral() maven { url \u0026#39;https://plugins.gradle.org/m2/\u0026#39; } } dependencies { // other plugin dependencies goes here...  classpath \u0026#39;gradle.plugin.com.mobbeel.plugin:mobbeel-fataar:1.2.0\u0026#39; } } After that, in the library/build.gradle file, I could add dependency to the *.jar file.\ndependencies { api deps.thinkgear // other dependencies goes here... } Then plugin could be applied.\napply plugin: \u0026#39;com.mobbeel.plugin\u0026#39; And I could configure it.\nfatAARConfig { includeAllInnerDependencies false } When we set includeAllInnerDependencies parameter to true, then all transitive dependencies will be included in the fat *.aar. Default value is false and it\u0026rsquo;s OK for now. I could even skip this step, but sometimes I prefer to define things explicitly.\nNow, we can build our library.\n./gradlew build and fat *.aar will be generated in the library/builds/output/ directory as a library-release.aar file. There should be also library-debug.aar. We can unzip this file and notice that it has the following structure:\n. ├── AndroidManifest.xml ├── classes.jar └── libs ├── rxandroid.jar ├── rxjava-2.2.2.jar └── ThinkGear.jar so we can clearly see that all project dependencies are included in the *.aar file. Library deployed to the Maven Central Repository looks the same and now, users can add library as a single dependency to the project in the build.gradle file.\ndependencies { implementation \u0026#39;com.github.pwittchen:neurosky-android-sdk:0.0.2\u0026#39; } *.jar library shipped inside *.aar file will be included in the project and everything will just work.\n","permalink":"https://wittchen.io/posts/creating-fat-aar/","summary":"I recently wrote a new library called NeuroSky Android SDK. It\u0026rsquo;s used for writing Android apps using signals of the brain waves received from the NeuroSky MindWave Mobile headsets. Probably I\u0026rsquo;ll write a separate article about it because it\u0026rsquo;s quite interesting topic. This library uses ThinkGear library, which is distributed by the NeuroSky as a *.jar file, so I couldn\u0026rsquo;t use it as a Gradle or Maven dependency in my project and I had to put this *.","title":"Creating a fat AAR"},{"content":"During development process, we often write unit and integration tests. While unit tests verify corectness of the small pieces of code, integration tests verify software as a whole project and sometimes can treat it as a black box where concrete results are expected. During development of the REST API, we can write integration tests for such API with REST Assured. Integration tests are usually slower, because they need to start the server and sometimes do other stuff. That\u0026rsquo;s why it\u0026rsquo;s good to separate their execution from regular unit tests. On the CI server we can even have separate job for them.\nWe can define the following project structure:\n+ src | +- main | | | +- java | | | +- com ... | +- test | +- java | +- com ... (unit tests) | +- integration (integration tests) In the java/com/ directory we can put unit tests and in the integration/ directory we can put integration tests.\nNow, we can prepare the following configuration in the build.gradle:\ntest { if (System.properties[\u0026#39;test.profile\u0026#39;] != \u0026#39;integration\u0026#39;) { exclude \u0026#39;**/*integration*\u0026#39; } else { exclude \u0026#39;**/*com/*\u0026#39; } } As you can see, when test.profile is different than integration/, we\u0026rsquo;re excluding integration/ directory from tests. Otherwise, we\u0026rsquo;re excluding com/ directory.\nNow, when we want to execute unit tests only, we can type the following command:\n./gradlew test but when we want to run unit test, we can type:\n./gradlew test -Dtest.profile=integration When we want to execute all tests, we can redefine configuration above, write another gradle task or perform one execution after another:\n./gradlew test \u0026amp;\u0026amp; ./gradlew test -Dtest.profile=integration That\u0026rsquo;s it!\n","permalink":"https://wittchen.io/posts/separate-execution-of-unit-and-integration-tests-in-gradle/","summary":"During development process, we often write unit and integration tests. While unit tests verify corectness of the small pieces of code, integration tests verify software as a whole project and sometimes can treat it as a black box where concrete results are expected. During development of the REST API, we can write integration tests for such API with REST Assured. Integration tests are usually slower, because they need to start the server and sometimes do other stuff.","title":"Separate execution of unit and integration tests in Gradle"},{"content":"I recently wrote a simple java app with Dagger 2 as a DI container and Gradle as a build system. I wanted to generate unit test coverage report for this app, so I used Jacoco.\nIn my build.gradle file I configured JaCoCo as follows:\nplugins { id \u0026#39;jacoco\u0026#39; } jacocoTestReport { reports { xml.enabled = true html.enabled = true } } Now, I could type:\n./gradlew test jacocoTestReport Report was generated in build/reports/jacoco/ directory. I noticed that report includes Java code generated by Dagger during the compilation. I didn\u0026rsquo;t want to include it in the report because it doesn\u0026rsquo;t really make any sense to write unit tests for generated code.\nI compiled project and browsed classes generated in build/classes/ directory. I\u0026rsquo;ve noticed that Dagger classes have similar patterns like:\n DaggerApplicationComponent.class ControllerModule_MemberInjector.class ControllerModule_ProvideContextWrapperFactory.class AccountController_Factory.class and so on\u0026hellip;  As you can see ApplicationComponent interface got its implementation with Dagger prefix and classes related to modules has postfixes like _MemberInjector, _Provide* and _Factory.\nWith this knowledge, I could improve my JaCoCo configuration and exclude classes, which match the Dagger pattern.\njacocoTestReport { reports { xml.enabled = true html.enabled = true } afterEvaluate { classDirectories = files(classDirectories.files.collect { fileTree(dir: it, excludes: [ \u0026#39;**/*_Provide*/**\u0026#39;, \u0026#39;**/*_Factory*/**\u0026#39;, \u0026#39;**/*_MembersInjector.class\u0026#39;, \u0026#39;**/*Dagger*\u0026#39; ]) }) } } Now, my report contains only code which was written by me and automatically generated classes are excluded.\nYou can apply similar trick while using other libraries, which generates Java code.\n","permalink":"https://wittchen.io/posts/excluding-generated-code-from-jacoco-report/","summary":"I recently wrote a simple java app with Dagger 2 as a DI container and Gradle as a build system. I wanted to generate unit test coverage report for this app, so I used Jacoco.\nIn my build.gradle file I configured JaCoCo as follows:\nplugins { id \u0026#39;jacoco\u0026#39; } jacocoTestReport { reports { xml.enabled = true html.enabled = true } } Now, I could type:\n./gradlew test jacocoTestReport Report was generated in build/reports/jacoco/ directory.","title":"Excluding generated code from JaCoCo report"},{"content":"In Java, we can test exceptions via unit tests in a few different ways. In this article, I\u0026rsquo;ll present common methods of doing that. Nevertheless, I suppose we there are different methods as well.\nFirst method is basically wrapping a method call with try-catch block, assigning an exception to a variable and performing appropriate assertion. In these examples, I\u0026rsquo;m using JUnit for unit tests and Truth for assertions.\n@Test public void shouldTestExceptionWithTryCatch() { Exception caughtException = null; try { throw new RuntimeExcetpion(\u0026#34;message\u0026#34;); } catch (final Exception e) { caughtException = e; } assertThat(caughtException).hasMessageThat().isEqualTo(\u0026#34;message\u0026#34;); } In the second method, we can define a type of the thrown exception within the @Test annotation. It\u0026rsquo;s useful approach when we don\u0026rsquo;t want to test exception details like message and we care only about the type.\n@Test(expected = RuntimeException.class) public void shouldTestExceptionWithExpectedAnnotation() throws RuntimeException { throw new RuntimeException(\u0026#34;message\u0026#34;); } We can also test exceptions with AssertJ library as follows:\n@Test public void shouldTestExceptionWithAssertJ() throws RuntimeException { Throwable thrown = catchThrowable(this::throwException); org.assertj.core.api.Assertions .assertThat(thrown) .isInstanceOf(RuntimeException.class) .hasMessage(EXCEPTION_MESSAGE); } Another method allows us to test exception type, message and other details without wrapping method call with try-catch block, what increases code readibility and makes it clear. In order to achieve that, we need @Rule annotation and ExpectedException object like in the code snippet below. What is important in this example, we have to define assertions in the beginning and invoke method, which will throw an exception after these assertions. It\u0026rsquo;s different order than in a regular unit test.\n@Rule public ExpectedException expectedException = ExpectedException.none(); @Test public void shouldTestExceptionWithRuleAnnotation() throws RuntimeException { expectedException.expect(RuntimeException.class); expectedException.expectMessage(EXCEPTION_MESSAGE); throw new RuntimeException(\u0026#34;message\u0026#34;); } Alternatively, we can experiment with Vavr and Try interface.\n@Test public void shouldTestExceptionWithTryCatchAndVavr() { final Object object = Try .of(this::throwException) .toOption() .getOrElse(new ErrorObject()); assertThat(object).isInstanceOf(ErrorObject.class); } private Object throwException() { throw new RuntimeException(\u0026#34;message\u0026#34;); } private class ErrorObject {} We can even go crazy and prepare RxJava wrapper for our exception.\nprivate Completable toCompletable(final Runnable runnable) { return Completable.create(emitter -\u0026gt; { try { runnable.run(); emitter.onComplete(); } catch (final Exception e) { emitter.onError(e); } }); } and write test like that:\n@Test public void shouldTestExceptionWithRxJava() { final Throwable throwable = toCompletable(this::throwException).blockingGet(); assertThat(throwable).isInstanceOf(RuntimeException.class); assertThat(throwable.getMessage()).isEqualTo(EXCEPTION_MESSAGE); } For sure, it shouldn\u0026rsquo;t be default choice and I wrote it just for a little experiment. Don\u0026rsquo;t treat that as a production-ready code (unless there\u0026rsquo;s a reson you really need something like that).\nI think, we can find even more ways of testing exceptions. In my opinion, solution with JUnit and @Rule annotation is the cleanest and most flexible one among all of the approaches presented here. It\u0026rsquo;s good to mention that last two approaches are just experiments. I also recommend Truth for writing assertions. Nevertheless, libraries like FEST, AssertJ and others, which have fluent interfaces helping in error analysis are also worth considering in daily usage.\nDo you know other (maybe better) approaches of testing exceptions in Java? Share them in comments :-).\n","permalink":"https://wittchen.io/posts/testing-exceptions/","summary":"In Java, we can test exceptions via unit tests in a few different ways. In this article, I\u0026rsquo;ll present common methods of doing that. Nevertheless, I suppose we there are different methods as well.\nFirst method is basically wrapping a method call with try-catch block, assigning an exception to a variable and performing appropriate assertion. In these examples, I\u0026rsquo;m using JUnit for unit tests and Truth for assertions.\n@Test public void shouldTestExceptionWithTryCatch() { Exception caughtException = null; try { throw new RuntimeExcetpion(\u0026#34;message\u0026#34;); } catch (final Exception e) { caughtException = e; } assertThat(caughtException).","title":"Testing exceptions"},{"content":"Introduction Recently, I decided to create a tiny Android library called RxBattery, which is monitoring battery state of the device with RxJava and RxKotlin. I created a few Java and Android libraries already and this time I decided to use Kotlin programming language instead of Java to learn something new and write something more complicated than \u0026ldquo;Hello World\u0026rdquo; app. Here are my observations.\nBuild System I used Gradle to build the project. It\u0026rsquo;s popular for JVM and Android apps nowadays and works fine with Kotlin. I just needed to add Kotlin Gradle Plugin and Kotlin STD Lib to the /library/build.gradle file to the classpath dependencies in buildscript section. I also needed to define sourceSets to allow IntelliJ and Android Studio recognize directories with sources.\nandroid { sourceSets { androidTest.java.srcDirs += \u0026#34;src/androidTest/kotlin\u0026#34; main.java.srcDirs += \u0026#34;src/main/kotlin\u0026#34; test.java.srcDirs += \u0026#34;src/test/kotlin\u0026#34; } } To keep the project clean, I defined all dependencies and version numbers in top-level build.gradle file, so I could reuse them in all modules.\next { minSdkVersion = 14 compileSdkVersion = 28 buildToolsVersion = \u0026#39;28\u0026#39; gradleVersion = \u0026#39;4.4.1\u0026#39; kotlinVersion = \u0026#39;1.2.60\u0026#39; detektVersion = \u0026#39;1.0.0.RC6-1\u0026#39; } ext.deps = [ rxjava2 : \u0026#39;io.reactivex.rxjava2:rxjava:2.2.0\u0026#39;, rxandroid2 : \u0026#39;io.reactivex.rxjava2:rxandroid:2.0.2\u0026#39;, rxkotlin2 : \u0026#39;io.reactivex.rxjava2:rxkotlin:2.3.0\u0026#39;, supportannotations : \u0026#39;com.android.support:support-annotations:28.0.0-rc01\u0026#39;, appcompatv7 : \u0026#39;com.android.support:appcompat-v7:28.0.0-rc01\u0026#39;, constraintlayout : \u0026#39;com.android.support.constraint:constraint-layout:1.1.2\u0026#39;, junit : \u0026#39;junit:junit:4.12\u0026#39;, truth : \u0026#39;com.google.truth:truth:0.42\u0026#39;, robolectric : \u0026#39;org.robolectric:robolectric:4.0-alpha-3\u0026#39;, mockitocore : \u0026#39;org.mockito:mockito-core:2.21.0\u0026#39;, mockitokotlin : \u0026#39;com.nhaarman.mockitokotlin2:mockito-kotlin:2.0.0-RC1\u0026#39;, dokka : \u0026#39;org.jetbrains.dokka:dokka-gradle-plugin:0.9.17\u0026#39;, detekt : \u0026#34;gradle.plugin.io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detektVersion\u0026#34;, ktlintgradle : \u0026#34;gradle.plugin.org.jlleitschuh.gradle:ktlint-gradle:4.1.0\u0026#34;, kotlinstdlib : \u0026#34;org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion\u0026#34;, kotlingradleplugin : \u0026#34;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion\u0026#34; ] Static Code Analysis For static code analysis, I used CheckStyle, FindBugs, PMD and Android Lint as usual. Moreover, I used ktlint via ktlint-gradle plugin and detekt. I\u0026rsquo;ve added these dependencies to classpath in buildscript section in library/build.gradle file as previosuly\nbuildscript { repositories { mavenCentral() jcenter() google() maven { url \u0026#39;https://plugins.gradle.org/m2/\u0026#39; } } dependencies { classpath deps.kotlingradleplugin classpath deps.detekt classpath deps.ktlintgradle classpath deps.dokka } } I also applied minimal configuration for these plugins.\ndetekt { version = rootProject.ext.detektVersion profile(\u0026#34;main\u0026#34;) { input = \u0026#34;$projectDir\u0026#34; config = \u0026#34;$projectDir/detekt.yml\u0026#34; filters = \u0026#34;.*test.*,.*/resources/.*,.*/tmp/.*\u0026#34; } } ktlint { verbose = true reporters = [\u0026#34;CHECKSTYLE\u0026#34;, \u0026#34;PLAIN\u0026#34;] } I also tried to generate code coverage report, to be able to verify what amount of code is covered by unit tests, but unfortunately Jacoco wasn\u0026rsquo;t able to analyze Kotlin code. I saw on the web that people struggled with the same problem and a few of them could have solved that issue. Maybe I missed something and I could update it in the future.\nContinuous Integration In my open-source projects, I use Travis for CI. Everything can be configured in .travis.yml file and setup looks exactly the same as for Android libraries written in Java.\nlanguage: android android: components: - tools - platform-tools - build-tools-28 - android-28 - extra-android-support - extra-android-m2repository licenses: - android-sdk-license-5be876d5 - android-sdk-license-c81a61d9 - \u0026#39;android-sdk-preview-license-.+\u0026#39; - \u0026#39;android-sdk-license-.+\u0026#39; - \u0026#39;google-gdk-license-.+\u0026#39; jdk: oraclejdk8 before_install: - yes | sdkmanager \u0026#34;platforms;android-27\u0026#34; install: - true script: - ./gradlew clean build test check cache: directories: - $HOME/.m2 I suppose that in case of writing pure Kotlin (non-Android), library configuration would be the same as in regular Java project because everything is built via Gradle. Configuration, which works fine for one of my pure Java libraries looks like that:\nlanguage: java install: # Check install section: http://docs.travis-ci.com/user/build-configuration/#install # If you\u0026#39;d like to skip the install stage entirely, set it to true and nothing will be run. - true after_success: - bash \u0026lt;(curl -s https://codecov.io/bash) - python \u0026lt;(curl -s https://raw.githubusercontent.com/TouK/sputnik-ci/master/sputnik-ci.py) script: - ./gradlew clean build test check I don\u0026rsquo;t think that it would require any significant change in case of Kotlin.\nKotlin vs. Java I\u0026rsquo;ve decided to use Kotlin instead of Java to learn a bit more about this language and try something new. Google promotes this language during Google I/O events and recommends to use it for Android development. Moreover, it\u0026rsquo;s regular JVM language, so we can use it anywhere we want - on Android (mobile), on servers and even on desktop apps. I haven\u0026rsquo;t discovered all the features of this language during writing this tiny project, but I have a few observations. Writing code is a bit strange because I got used to programming in Java. In Kotlin, we define the function or variable name first, then we put colon and we define the type next. It\u0026rsquo;s opposite to Java, where types are defined first.\nfun createBroadcastReceiver(emitter: FlowableEmitter\u0026lt;BatteryState\u0026gt;): BroadcastReceiver { ... val status: Int = intent.getIntExtra(BatteryManager.EXTRA_STATUS, UNKNOWN) ... } Moreover, there\u0026rsquo;s type inference in Kotlin and sometimes compiler is able to guess our type, so we don\u0026rsquo;t have to provide it. See the following example:\nval emitter = mock(FlowableEmitter::class.java) In addition, we don\u0026rsquo;t have to put semicolon in the end of the statement as you can see on the code snippets above, what is really convenient. The thing, I really like about Kotlin is null safety\nif (intent != null) { val status: Int = intent.getIntExtra(BatteryManager.EXTRA_STATUS, UNKNOWN) } If we don\u0026rsquo;t do that, code won\u0026rsquo;t compile. We can avoid such null-checks, by using !!. operator like here:\nval status: Int = intent!!.getIntExtra(BatteryManager.EXTRA_STATUS, UNKNOWN) but by looking at the code, we can see that there are two exclamation marks, so clearly something must be wrong here and we should think about improvement. Moreover, when NPE occurs, it\u0026rsquo;ll be easier to find.\nKotlin is also more concise than Java. It\u0026rsquo;s hard to say if it\u0026rsquo;s an advantage or drawback. In Java we have more code, but we clearly know what\u0026rsquo;s going on when the code is clean. In Kotlin a lot of stuff is implicit.\nE.g. inheritance looks as follows:\nclass MainActivity : AppCompatActivity() and sometimes we don\u0026rsquo;t have variable provided in the lambda, when there\u0026rsquo;s only one value and we can invoke this value by calling it object\nbatteryDisposable = RxBattery .observe(this) .subscribeOn(Schedulers.io()) .observeOn(AndroidSchedulers.mainThread()) .subscribe { textView.text = it.toString() } The thing I like about implicit Kotlin code is data classes. We can create something like that:\ndata class BatteryState( val status: Int, val plugged: Int, val health: Int, val level: Int, val temperature: Int, val voltage: Int ) and it will generate constructor with all these values, getters and toString() method. In Java, we would need to write it by hand, use code generators in the IDE or code generation libraries like Lombok.\nWhen we take a look at the control flow in Kotlin, except for if expression, for and while loops, we also have when expression, which can be kind of neat equivalent to switch instruction in Java. It looks like this:\nfun plugged(): Plugged { return when (pluggedCode) { BatteryManager.BATTERY_PLUGGED_AC -\u0026gt; Plugged.AC BatteryManager.BATTERY_PLUGGED_USB -\u0026gt; Plugged.USB BatteryManager.BATTERY_PLUGGED_WIRELESS -\u0026gt; Plugged.WIRELESS else -\u0026gt; Plugged.UNKNOWN } } It\u0026rsquo;s worth to say that there\u0026rsquo;s good inter-operability between Java and Kotlin. We can use Kotlin modules and libraries in Java projects and vice-versa because everything compiles to the same byte-code. We can even create pure Java code in the Kotlin module. For example, I wanted to have static method called from the Kotlin library. In order to achieve that, I needed to wrap whole class in a Companion Object.\nclass RxBattery { companion object { ... } } Next, in the Kotlin module, I could call it like this:\nRxBattery.observe(this) but in Java module it wasn\u0026rsquo;t possible and I needed to write something like this:\nRxBattery.Companion.observe(context); I didn\u0026rsquo;t want library users to call this Companion value explicitely in Java projects, so I created additional Java class.\npublic class RxBatteryFactory { private RxBatteryFactory() { } public static Flowable\u0026lt;BatteryState\u0026gt; observe(Context context) { return RxBattery.Companion.observe(context); } } and put it next to the Kotlin classes. Now In Java module, people could call method like that:\nRxBatteryFactory.observe(this) It\u0026rsquo;s good to know that it\u0026rsquo;s possible because when we got stuck with implicit Kotlin syntaxt, we can always use Java in one particular scenario.\nLater, I figured out, we can simply add @JvmStatic annotation before the method signature and since now, method method will be visible as static in the Java modules as well and we no longer need additional Java code.\n@JvmStatic fun observe(context: Context): Flowable\u0026lt;BatteryState\u0026gt; { ... } Moreover, all classes created in Kotlin are final by default. It can cause a problems during writing unit tests and creating mocks. If we want to have non-final class (e.g. in order to mock it), we need to mark it explicitly as open.\nopen class MyClass Of course, things mentioned above are not all features of Kotlin. There\u0026rsquo;s much more to discover - e.g. couroutines. To learn more, check Kotlin Language Reference, open-source projects in this language, books, and other articles on the web.\nIt\u0026rsquo;s hard to say if in more complex project Kotlin would be a better choice. Right now, I\u0026rsquo;m more familar and comfortable with Java, but on the other hand, Kotlin has a few interesting features, which makes development better. Maybe I\u0026rsquo;ll give this language more chances in the future to learn it better.\nUnit Tests Unit tests in Kotlin are pretty similar to Java.\n@Test fun shouldCreateBroadcastReceiver() { // given  val emitter = mock(FlowableEmitter::class.java) // when  val broadcastReceiver: BroadcastReceiver = RxBattery.createBroadcastReceiver( emitter as FlowableEmitter\u0026lt;BatteryState\u0026gt; ) // then  assertThat(broadcastReceiver).isNotNull() } We can use JUnit and Java assertion libraries like Google Truth and mocking libraries like Mockito. There\u0026rsquo;s also mockit-kotlin library, but in my case, I used mockito-core. There are also other mocking libraries like Mockk and libraries for BDD like Spek. Moreover, we can achieve more concise syntax for unit tests using various kotlin libraries like kotlintest. I haven\u0026rsquo;t used it in this project yet, but I may update it in the future.\nJavaDoc Generating JavaDoc (or KotlinDoc?) in Kotlin projects is not straightforward. In order to generate documentation, I used dokka gradle plugin. It\u0026rsquo;s pretty easy to use, we just need to add appropriate dependency, apply the plugin and create configuration in build.gradle file.\ndokka { outputFormat = \u0026#39;html\u0026#39; outputDirectory = \u0026#34;$buildDir/javadoc\u0026#34; } Next, we just call: ./gradlew dokka and our JavaDoc is generated in defined outputDirectory.\nLibrary Deployment Library deployment of the Kotlin project is exactly the same as Java project. I simply used maven_push.gradle script created by Chris Banes some time ago, applied it in the library module and configured everything in gradle.properties and library/gradle.properties. Of course, I also needed to have my credentials configured in ~/.gradle/gradle.properties file. Next, I could just call ./gradlew uploadArchives, close and release library on the OSS SonaType website.\nSummary To wrap up, Kotlin is an interesting language. It\u0026rsquo;s hard to say, if it\u0026rsquo;s really better than Java although it has a few interesting features. Nevertheless, it\u0026rsquo;s good to familiarize with it because it\u0026rsquo;s being promoted by Google and JetBrains. JetBrains company actually created and develops this language, so due to this fact, I\u0026rsquo;m able to put more trust in that project. If you would like to see complete code and configuration of the project mentioned in this article, check out my RxBattery repository on GitHub. Last, but not least, learning new things broadens our mind and horizon.\n","permalink":"https://wittchen.io/posts/writing-my-first-library-in-kotlin/","summary":"Introduction Recently, I decided to create a tiny Android library called RxBattery, which is monitoring battery state of the device with RxJava and RxKotlin. I created a few Java and Android libraries already and this time I decided to use Kotlin programming language instead of Java to learn something new and write something more complicated than \u0026ldquo;Hello World\u0026rdquo; app. Here are my observations.\nBuild System I used Gradle to build the project.","title":"Writing my first library in Kotlin"},{"content":"I installed Android SDK and Android Studio on my new ThinkPad T470s with Ubuntu Linux 18.04.1 LTS. As usual, I wanted to create a new Android phone emulator called AVD (Android Virtual Device). I was able to create a new device, but unfortunately I encoutered problems. After opening AVD window, I saw the error message\u0026hellip;\n/dev/kvm is not found KVM (Kernel-based Virtual Machine) is a full virtualization solution for Linux on x86 hardware containing virtualization extensions (Intel VT or AMD-V). In order to enable KVM, I needed to restart the computer and enter the BIOS by pressing F1 key before the system boot. Next, I entered Security tab and enabled Intel Virtualization Technology and Intel VT-d Feature. Now, I could press F10 to save, exit nad restart the computer. Unfortunately, that wasn\u0026rsquo;t the end of the story. I saw another error message\u0026hellip;\n/dev/kvm device permission denied Luckily, I found answer to this issue on StackOverflow. I just needed to install qemu-kvm and add my user to the kvm group.\nI installed required software:\nsudo apt install qemu-kvm Then, checked the ownership of /dev/kvm:\nls -al /dev/kvm The user was root, the group kvm. To check which users are in the kvm group, I could use:\ngrep kvm /etc/group This returned:\nkvm:x:some_number: As there is nothing left to the final :, there are no users in the kvm group.\nTo add the user username to the kvm group, I could use:\nsudo adduser username kvm I can check my username, by typing:\nwhoami Now, I could check group members once again with:\ngrep kvm /etc/group My user should be there. Next, I could just restart the machine, create new AVD, start it and everything worked! I could finally use my Android emulator. Optionally, if you still have a problem, you can call the following command:\nsudo chown username /dev/kvm and replace username with your username\nReferences  https://stackoverflow.com/questions/36527278/dev-kvm-not-found-error-on-windows-in-android-studio https://stackoverflow.com/questions/37300811/android-studio-dev-kvm-device-permission-denied https://en.wikipedia.org/wiki/Kernel-based_Virtual_Machine  ","permalink":"https://wittchen.io/posts/solving-problems-with-avd-and-kvm-on-linux/","summary":"I installed Android SDK and Android Studio on my new ThinkPad T470s with Ubuntu Linux 18.04.1 LTS. As usual, I wanted to create a new Android phone emulator called AVD (Android Virtual Device). I was able to create a new device, but unfortunately I encoutered problems. After opening AVD window, I saw the error message\u0026hellip;\n/dev/kvm is not found KVM (Kernel-based Virtual Machine) is a full virtualization solution for Linux on x86 hardware containing virtualization extensions (Intel VT or AMD-V).","title":"Solving problems with AVD and KVM on Linux"},{"content":"Dropbox abandons Linux users Recently, I\u0026rsquo;ve started receiving a notification from Dropbox desktop app on Linux that they\u0026rsquo;ll stop syncing my files in November. I couldn\u0026rsquo;t understand why. I\u0026rsquo;m using this service for some time and I find it really useful. Moreover, I want to backup several important files on the web server in case of my disk crashes or I\u0026rsquo;ll need to access them from another computer or mobile device. I googled this issue and found pretty long thread on the Dropbox Forum. There\u0026rsquo;s also ongoing discussion on reddit.\nIf you don\u0026rsquo;t want to read all of this stuff, I can make a short summary:\n Dropbox app will support the following file systems: NTFS for Windows, HFS+ or APFS for Mac, and Ext4 for Linux Dropbox app will not support encrypted directories even if you\u0026rsquo;re using Ext4 file system on Linux  I had a few options:\n leave my Dropbox directory unencrypted switch to another OS change service provider to something else create my own solution  I\u0026rsquo;m not going to change my OS now and existing alternatives to Dropbox aren\u0026rsquo;t good enough.\nPreparing Poor Man\u0026rsquo;s Dropbox I\u0026rsquo;ve decided to create Poor Man\u0026rsquo;s Dropbox with bash, lftp and cron. I think it\u0026rsquo;s nice opportunity to learn something new and solve my own problem at the same time. I have my own personal FTP server where I host my website. This server has about 4 GB of disk space. I\u0026rsquo;m not using all of this space because my website has only text and maybe a few small pics. I also store my photos on the local drive, Google Photos and external physical drive and I\u0026rsquo;m not going to backup them on the FTP server. I\u0026rsquo;d like to backup a several dirs with documents, config files, text files and spreadsheets. In such case, mentioned amount of disk space is enough.\nIn the beginning, I\u0026rsquo;ve created a special directory for backup in my local file system: ~/Backup/. Next, I\u0026rsquo;ve created backup/ directory on the FTP server.\nAfter that, I\u0026rsquo;ve prepared make_ftp_backup script:\nBackup script #!/usr/bin/env bash  echo \u0026#34;starting backup process\u0026#34; rm -rf ~/Backup/* echo \u0026#34;preparing directories to backup\u0026#34; cp -avr ~/Dokumenty/finance ~/Backup/finance cp -avr ~/Dokumenty/gym ~/Backup/gym cp -avr ~/Dokumenty/licenses ~/Backup/licenses cp -avr ~/Dokumenty/secret ~/Backup/secret cp -avr ~/Dokumenty/sonatype ~/Backup/sonatype cp -avr ~/Dokumenty/presentations ~/Backup/presentations echo \u0026#34;uploading data to the FTP server\u0026#34; USER=your-user PASS=your-password HOST=your-host.com lftp ftp://$USER:$PASS@$HOST -e \u0026#34;set ftp:ssl-allow no; mirror -R -v --delete-first ~/Backup backup; quit\u0026#34; date \u0026gt;\u0026gt; ~/Dokumenty/logs/ftp_backup.log echo \u0026#34;backup process finished\u0026#34; Once I had my script ready, I made it executable: chmod +x make_ftp_backup and placed it in /usr/local/bin/ directory.\nNow, I could test it by typing the following command in the terminal: make_ftp_backup.\nScript is pretty simple. It deletes old backup files from the local directory, copies updated files to this directory, removes old files on the FTP server and uploads fresh backup files to the server.\nScheduling backup Of course, I\u0026rsquo;m not going to make backups manually, so I used cron to automate this job. I\u0026rsquo;ve typed crontab -e to define new cron job via vim (you can use any editor of your choice).\nIt looks as follows:\n# Backup my important files to my FTP server every hour at minute zero 0 * * * * /usr/local/bin/make_ftp_backup Please note, we should not rely on $PATH or other environmental variables in crontab because most of them are ignored by this service. That\u0026rsquo;s why I provided complete path to the script.\nWe can list our cron jobs by typing crontab -l.\nAfter editing, we could call:\nsudo service cron reload or (if it didn\u0026rsquo;t work):\nsudo service cron restart Cron job should work start working without it, but in case of problems, you can invoke that commands.\nAs you can see in the comments, I\u0026rsquo;m running my script every hour every day at minute zero. I\u0026rsquo;ve found very nice video explaining how to use cron. If you\u0026rsquo;re not familiar with it, check this link. Author of the video created useful code snippets explaining crontab syntax.\nReference information for cron jobs placed there looks as follows:\n# ┌───────────── minute (0 - 59) # │ ┌───────────── hour (0 - 23) # │ │ ┌───────────── day of month (1 - 31) # │ │ │ ┌───────────── month (1 - 12) # │ │ │ │ ┌───────────── day of week (0 - 6) (Sunday to Saturday; # │ │ │ │ │ 7 is also Sunday on some systems) # │ │ │ │ │ # │ │ │ │ │ # * * * * * command_to_execute It really helps for preparing new cron jobs schedule. You can also visit crontab.guru website to test your cron jobs definitions. It\u0026rsquo;s also good to read more about troubleshooting crontab in case of encountering any problems.\nCopying data from the server to the local directory Solution above just uploads local files to the remote server. Sometimes we may want to add some data from another computer or mobile device and access them later on the local computer. We shouldn\u0026rsquo;t place this data to the backup directory because it may be overriden by the backup script. To solve this problem, we can create input directory on the remote server and input directory in the local file system. After that, we can create get_ftp_input script, which will copy remote directory to local file system.\n#!/usr/bin/env bash  USER=your-user PASS=your-password HOST=your-host.com echo \u0026#34;downloading input from the server\u0026#34; lftp ftp://$USER:$PASS@$HOST -e \u0026#34;set ftp:ssl-allow no; mirror -v input ~/Dokumenty/input; quit\u0026#34; date \u0026gt;\u0026gt; ~/Dokumenty/logs/ftp_input.log echo \u0026#34;download complete\u0026#34; It\u0026rsquo;s not real synchronization like in the Dropbox, but at least we have simple way add new files to the local computer from the different device with Internet access and FTP client. We can add this script to the crontab too, if we want to.\nAccessing files on the go On my Android phone, I\u0026rsquo;m using Solid Explorer app for browsing files and directories. It\u0026rsquo;s really good app and it has FTP client built-in, so I can access my backup folder from my mobile phone if I need to.\nSummary I know this solution is far from perfect (I call it poor myself) and it doesn\u0026rsquo;t handle two way synchronization, but at least I have full control over it and nobody tells me what file system or operating system I have to use or what I need to leave encrypted or unencrypted. It\u0026rsquo;s clean, simple and fine for me now. Maybe I\u0026rsquo;ll enhance this solution some day. E.g. I can add a new script performing backup whenever I change any file in defined list of directories. In order to do that, I\u0026rsquo;ll need a file watcher running as a system service in the background. The biggest room is the room for improvement.\n","permalink":"https://wittchen.io/posts/poor-mans-dropbox/","summary":"Dropbox abandons Linux users Recently, I\u0026rsquo;ve started receiving a notification from Dropbox desktop app on Linux that they\u0026rsquo;ll stop syncing my files in November. I couldn\u0026rsquo;t understand why. I\u0026rsquo;m using this service for some time and I find it really useful. Moreover, I want to backup several important files on the web server in case of my disk crashes or I\u0026rsquo;ll need to access them from another computer or mobile device.","title":"Poor Man's Dropbox"},{"content":"While creating a Pull Requests it\u0026rsquo;s good to squash all of our intermediate commits into one to avoid clutter in the git log, simplify analysis and allow for simple code revert when necessary.\nSolution #1 Some time ago I\u0026rsquo;ve found project http://rebaseandsqua.sh/ made by Jake Wharton. It\u0026rsquo;s really useful, handy and allows us to rebase and squash commits quite easily.\nWe can just call:\ncurl rebaseandsqua.sh | sh then edit our commit messages and push the changes.\nSolution #2 If we want to understand this process and do it manually instead of delegating it to the script from the web, we should perform the following steps:\nFirst, we need to decide how many commits, we want to squash. Let\u0026rsquo;s say 3:\ngit rebase -i HEAD~3 We should see something like this in our editor of choice:\npick 48d7c25 adding link to vim-jdb plugin in README.md pick 97376b4 Update README.md pick a92b5bf adding squash alias to .gitconfig Next, we can decide, which commits we want to squash:\npick 48d7c25 adding link to vim-jdb plugin in README.md squash 97376b4 Update README.md squash a92b5bf adding squash alias to .gitconfig When, we save it, all of our commits will be squashed into one containing all commit messages. We can now edit this message with command:\ngit commit --amend You can read more about it in the official Git documentation.\nSolution #3 Some time ago I created a git alias for myself for merging last commits in .gitconfig:\nmerge-local-commits = !sh -c \u0026#39;git reset --soft HEAD~$1\u0026#39; - We can invoke it with e.g.:\ngit merge-local-commits 3 It works pretty fine, but we need to remember how many commits we want to merge, type a commit message and perform commit again.\nSolution #4 Recently I\u0026rsquo;ve found another solution to this problem represented with the following alias:\nsquash = \u0026#34;!f(){ git reset --soft HEAD~${1} \u0026amp;\u0026amp; git commit --edit -m\\\u0026#34;$(git log --format=%B --reverse HEAD..HEAD@{1})\\\u0026#34;; };f\u0026#34; It\u0026rsquo;s doing the same thing as previous alias, but it preserves all the commit messages. Thanks to that, we can keep all of our commit messages or delete them and leave just one, which is the most relevant for the given change. When we want to \u0026ldquo;squash\u0026rdquo; 3 commits, we can just type:\ngit squash 3 and we are ready to override all the intermediate commits with the single commit for the Pull Request:\ngit push -f Summary As you can see, there are many ways to squash commits into one. Probably there are another solutions, which are not described in this article. You can pratice them in some kind of \u0026ldquo;dummy\u0026rdquo; repo and then, when you\u0026rsquo;ll feel comfortable with it, introduce it in your daily workflow. I hope, now you won\u0026rsquo;t be afraid of squashing your commits :-).\n","permalink":"https://wittchen.io/posts/squashing-commits/","summary":"While creating a Pull Requests it\u0026rsquo;s good to squash all of our intermediate commits into one to avoid clutter in the git log, simplify analysis and allow for simple code revert when necessary.\nSolution #1 Some time ago I\u0026rsquo;ve found project http://rebaseandsqua.sh/ made by Jake Wharton. It\u0026rsquo;s really useful, handy and allows us to rebase and squash commits quite easily.\nWe can just call:\ncurl rebaseandsqua.sh | sh then edit our commit messages and push the changes.","title":"Different ways of squashing commits"},{"content":"Today, I\u0026rsquo;ve released next version of my most popular open-source project - ReactiveNetwork. I\u0026rsquo;ve released version 0.12.4 for RxJava1.x and version 1.0.0 for RxJava2.x. Please note, RxJava1.x is no longer officially supported and I\u0026rsquo;m going to follow the same approach in my RxJava-based projects. It\u0026rsquo;s not the first release of this project, but I\u0026rsquo;m breaking the API and removing existing methods, so I decided to stick to proper versioning standard. I didn\u0026rsquo;t always do it properly in the past, but it\u0026rsquo;s never too late.\nRealization I have tech debt Except for bumping dependencies and organizational stuff, I\u0026rsquo;ve decided to reduce tiny technical debt I created over the time. I kept adding many customizations for observing Internet connectivity and end up having many variants of the same methods with different parameters like these:\nObservable\u0026lt;Boolean\u0026gt; observeInternetConnectivity(int interval, String host, int port, int timeout) Observable\u0026lt;Boolean\u0026gt; observeInternetConnectivity(int initialIntervalInMs, int intervalInMs, String host, int port, int timeout) Observable\u0026lt;Boolean\u0026gt; observeInternetConnectivity(final int initialIntervalInMs, final int intervalInMs, final String host, final int port, final int timeoutInMs, final ErrorHandler errorHandler) Observable\u0026lt;Boolean\u0026gt; observeInternetConnectivity(final InternetObservingStrategy strategy) Observable\u0026lt;Boolean\u0026gt; observeInternetConnectivity(final InternetObservingStrategy strategy, final String host) Single\u0026lt;Boolean\u0026gt; checkInternetConnectivity(InternetObservingStrategy strategy) Single\u0026lt;Boolean\u0026gt; checkInternetConnectivity(String host,int port, int timeoutInMs) Single\u0026lt;Boolean\u0026gt; checkInternetConnectivity(String host, int port, int timeoutInMs, ErrorHandler errorHandler) Single\u0026lt;Boolean\u0026gt; checkInternetConnectivity(final InternetObservingStrategy strategy, final String host) It\u0026rsquo;s flexible approach, but it has a few drawbacks:\n API users could make mistakes during the usage (especially while providing different parameters of the same type) Code readibility is bad Code is hard to maintain Code is hard to extend (in particular cases it may be even impossible) Unit testing is not convenient  That situation leads us into technical debt. It\u0026rsquo;s kind of shame and I don\u0026rsquo;t want to have it in my personal open-source projects, which I can almost totally control.\nPaying the tech debt How to fix this situation? Luckilly, this library is tiny and we can fix it with the Builder Design Pattern. This pattern should be applied in each situation in which we have methods with many parameters and part of these parameters may be optional. I\u0026rsquo;ve decided to create InternetObservingSettings class with internal class representing Builder - InternetObservingSettings.Builder. I haven\u0026rsquo;t used traditional builder pattern there. I used approach proposed by David Moten, which you can check in https://github.com/davidmoten/java-builder-pattern-tricks repository. It\u0026rsquo;s cool trick, which makes code nice to use for the end user.\nNow, when we want to customize Internet Observing Settings, we can do it as follows:\nInternetObservingSettings settings = InternetObservingSettings .initialInterval(initialInterval) .interval(interval) .host(host) .port(port) .timeout(timeout) .errorHandler(testErrorHandler) .strategy(strategy) .build(); ReactiveNetwork.observeInternetConnectivity(settings) .subscribeOn(Schedulers.io()) .observeOn(AndroidSchedulers.mainThread()) .subscribe(new Consumer\u0026lt;Boolean\u0026gt;() { @Override public void accept(Boolean isConnectedToInternet) { // do something with isConnectedToInternet value  } }); Of course, all parameters are optional. We can do the same for another method returning Single RxJava2 type:\nSingle\u0026lt;Boolean\u0026gt; single = ReactiveNetwork.checkInternetConnectivity(settings); Now, I could finally remove old methods. Full library source and documentation can be found at: https://github.com/pwittchen/ReactiveNetwork. That\u0026rsquo;s it!\nI hope my library will be more convenient for users with custom implementation requirements now.\nLast, but not least - If you want to contribute to this project, you\u0026rsquo;re more than welcome! :-)\n","permalink":"https://wittchen.io/posts/releasing-reactive-network-1/","summary":"Today, I\u0026rsquo;ve released next version of my most popular open-source project - ReactiveNetwork. I\u0026rsquo;ve released version 0.12.4 for RxJava1.x and version 1.0.0 for RxJava2.x. Please note, RxJava1.x is no longer officially supported and I\u0026rsquo;m going to follow the same approach in my RxJava-based projects. It\u0026rsquo;s not the first release of this project, but I\u0026rsquo;m breaking the API and removing existing methods, so I decided to stick to proper versioning standard. I didn\u0026rsquo;t always do it properly in the past, but it\u0026rsquo;s never too late.","title":"Releasing ReactiveNetwork v. 1.0.0 (paying the technical debt)"},{"content":"I recently destroyed my good old Nexus 6 phone. It\u0026rsquo;s still working, but display screen is broken. Due to this fact, I\u0026rsquo;ve had an excuse to buy new Pixel 2 phone. It\u0026rsquo;s pretty expansive, but its quality is really good. As usual, I wanted to debug an app on this device and encountered problem related to device permissions.\nOnce I connected the phone, to my laptop and typed adb devices, I\u0026rsquo;ve seen the following message:\nList of devices attached HT7AS1A03004 no permissions (user in plugdev group; are your udev rules wrong?); see [http://developer.android.com/tools/device.html] and I couldn\u0026rsquo;t debug my apps.\nLater, I enabled debugging in:\nSettings -\u0026gt; System -\u0026gt; Developer Options -\u0026gt; USB Debugging Of course, in order to see these options, we need to tap several times on the compilation number first in:\nSettings -\u0026gt; System -\u0026gt; Information about the phone After that, debug options will be enabled\nNevertheless, I still couldn\u0026rsquo;t debug my apps!\nI realized, I have connected phone just for charging\nOnce, I switched it to \u0026ldquo;Transfer files\u0026rdquo;, I could finally debug my phone.\nIt\u0026rsquo;s important to note, that it\u0026rsquo;s good to restart adb (Android Debug Bridge) after changing connection mode to avoid any further problems.\nWe can do this as follows:\nadb kill-server adb start-server Now, we should see the following message:\n* daemon not running; starting now at tcp:5037 * daemon started successfully Next, we can type adb devices again and we see that our device is finally attached.\nList of devices attached HT7AS1A03004 device Now, we can install our apps or run logcat with adb logcat command or even more fancy colored pidcat if we want to.\nI hope, you will find this post useful in case of having similar issues.\n","permalink":"https://wittchen.io/posts/debugging-pixel2/","summary":"I recently destroyed my good old Nexus 6 phone. It\u0026rsquo;s still working, but display screen is broken. Due to this fact, I\u0026rsquo;ve had an excuse to buy new Pixel 2 phone. It\u0026rsquo;s pretty expansive, but its quality is really good. As usual, I wanted to debug an app on this device and encountered problem related to device permissions.\nOnce I connected the phone, to my laptop and typed adb devices, I\u0026rsquo;ve seen the following message:","title":"Debugging Google Pixel 2"},{"content":"Introduction I have my own tiny Python project called spotify-cli-linux, which is (surprise!) command line interface for Spotify desktop app on Linux. Python is not my primary programming language and I work more with Java. Nevertheless, I find this language enjoyable and useful in many cases, so I try to learn something new about it from time to time. In the beginning, I\u0026rsquo;ve provided instructions how to install my Python script in the system via curl and wget, which is fine, but it\u0026rsquo;s not recommended and official way to do it. Moreover, people may be afraid of running shell scripts from remote resources on their machines. That\u0026rsquo;s why I decided to upload my project to PyPi, which is The Python Package Index.\nPublishing process First, I needed to create my own account in PyPi, which can be done via official website.\nNext, I needed to prepare setup.py file in my repository.\nfrom distutils.core import setup setup( name = \u0026#39;spotify-cli-linux\u0026#39;, version = \u0026#39;1.0.0\u0026#39;, description = \u0026#39;A command-line interface to Spotify on Linux\u0026#39;, author = \u0026#39;pwittchen\u0026#39;, author_email = \u0026#39;piotr.wittchen@gmail.com\u0026#39;, url = \u0026#39;https://github.com/pwittchen/spotify-cli-linux\u0026#39;, license = \u0026#39;Apache 2.0\u0026#39;, packages = [\u0026#39;spotifycli\u0026#39;], entry_points = { \u0026#34;console_scripts\u0026#34;: [\u0026#39;spotifycli = spotifycli.spotifycli:main\u0026#39;] }, ) In this file, I could define a name, which can be used for package installation, url of GitHub repository or project website, packages (in my case I moved my script to separate spotifycli directory, which is treated as a package) and entry_points, which will be used for invoking the script from the command line.\nIn my case, I wanted to achieve such situation:\nWhen people, type: spotifycli in the terminal, they\u0026rsquo;ll invoke main function from the spotifycli/spotifycli.py file and configuration you see above, does the job.\nI also created setup.cfg file, with the following content:\n[metadata] description-file = README.md where I defined description-file of my script.\nNext, I needed to install twine, which is a package used for publishing packages to PyPi.\npip install twine You can find other ways to do that on the web, but most of them are outdated and don\u0026rsquo;t work.\nNext, you need to create ~/.pypirc file in your home directory, with the following content:\n[distutils] index-servers = pypi [pypi] username:yourusername password:yourpassword You should put inside the same username and password, which you have used for creating account in https://pypi.org website.\nNow, we\u0026rsquo;re ready to publish our package!\nWe can go to our repository and type:\npython setup.py sdist After that our package ready to deploy will be generated in dist/ directory.\nNext, we can just type:\ntwine upload dist/* and our package will be uploaded to PyPi!\nThen, we can view PyPi page of our project at: https://pypi.org/project/spotify-cli-linux/\nand install it with the following command:\npip install spotify-cli-linux and we can invoke our script as follows:\nspotifycli -h That\u0026rsquo;s it! We deployed our script to PyPi!\nOf course, this approach may change depending on your project. E.g. when you are developing a framework or a library, then you probably won\u0026rsquo;t need any setup for running command line tools, but maybe you\u0026rsquo;ll need something additional (I haven\u0026rsquo;t researched this area).\nWhen you\u0026rsquo;d like to update your project, you just need to update version in setup.py file, generate dist/ directory and upload package again. You can remove uploaded packages from PyPi via the website, but you won\u0026rsquo;t be able to publish package with the version you have already published before (even if it is removed). You always need to provide new version. It\u0026rsquo;s good to have it in mind to avoid mess with versioning.\nReferences  https://zaiste.net/posts/how_to_submit_python_package_to_pypi/ https://gehrcke.de/2014/02/distributing-a-python-command-line-application/ https://blog.jetbrains.com/pycharm/2017/05/how-to-publish-your-package-on-pypi/ http://peterdowns.com/posts/first-time-with-pypi.html https://pypi.org/project/twine/ https://pypi.org/ https://pypi.python.org/  ","permalink":"https://wittchen.io/posts/publishing-python-package-to-pypi/","summary":"Introduction I have my own tiny Python project called spotify-cli-linux, which is (surprise!) command line interface for Spotify desktop app on Linux. Python is not my primary programming language and I work more with Java. Nevertheless, I find this language enjoyable and useful in many cases, so I try to learn something new about it from time to time. In the beginning, I\u0026rsquo;ve provided instructions how to install my Python script in the system via curl and wget, which is fine, but it\u0026rsquo;s not recommended and official way to do it.","title":"Publishing Python package to PyPi"},{"content":"Problem If you are working with Git Version Control System, probably you have seen a commit messages in your git log like:\nMerge branch \u0026#39;master\u0026#39; to \u0026#39;master\u0026#39; or something similar. You might have even pushed such commits! Don\u0026rsquo;t worry, so did I ;-). In this article I\u0026rsquo;m going to explain why is it happenning and how to avoid it.\nSuch situation happens when you performed changes locally and at the same time someone else performed changes on the same branch as well, commited and pushed them to the remote repository. When you are done with your changes, you committed everything and want to push changes. If there are no conflicts, Git wants you to synchronize local repository with the remote repository. That\u0026rsquo;s why you need to merge changes from the remote master branch into your local master branch. After that you can finally push your changes.\nIt\u0026rsquo;s shown on the diagram below.\nanother developer ------o---(commit)---o------------------------------------------ /|\\ | | | pull push | | | \\|/ remote \u0026#39;master\u0026#39; ----o---o--------------o------x-----------------o-------------o--- | /|\\ | /|\\ | | | | pull push (rejected) pull push | | | | \\|/ | \\|/ | you ----------------o-------(commit)----------o-----------------o---(merge)---o---- Actually, there\u0026rsquo;s nothing wrong with it, but on the other hand you have \u0026ldquo;polluted\u0026rdquo; git log. Imagine everyone is following that approach and your code base changes frequently. After some period of time, you\u0026rsquo;ll get a tons of merge 'master' to 'master' messages, which doesn\u0026rsquo;t really tell you anything. It will be hard to navigate through the history of the repository and track changes. Luckily, we can avoid that.\nSolution #1 What to do, when Git wants you to merge remote master branch into local master branch? I think there may be various strategies to deal with that. I\u0026rsquo;m going to show you one approach\n1. Move your last commit into staging area git reset --soft HEAD~1 Now, you removed your last commit, but you have your changes uncommited in staging area.\n2. Move your changes from staging to unstaged area git reset HEAD -- . Now, you have your changes uncommited and unstaged.\n3. Stash your changes git stash Now, our changes are stashed. We can list them as follows:\ngit stash list To show what\u0026rsquo;s in the most recent stash, we can type:\ngit stash show -p To view an arbitrary stash, we can type something like:\ngit stash show -p stash@{1} 4. Pull changes from the remote repository git pull 5. Apply stashed changes git stash apply or\ngit stash pop if we want to delete our applied stash from the list of stashes\n6. Commit and push your changes git add -A git commit -m \u0026#34;my elegant change\u0026#34; git push Now, we have our local repository synchronized with the remote one. We pushed our local changes and we didn\u0026rsquo;t polluted git log with merge 'master' to 'master' commits. If you are not very comfortable with Git, try to practice this in a \u0026ldquo;test\u0026rdquo; repo before applying this approach in your production repo.\nSolution #2 I\u0026rsquo;ve got a feedback about this article from one of the readers (Thanks Cyprian! ;-) and there\u0026rsquo;s a simpler way to solve that problem.\nWe can use rebase functionality as follows:\ngit fetch origin Now we have fetched changes from the origin (remote repo) without applying (merging) them in the local repo. Next, we can rebase our changes:\ngit rebase origin/master During this operation, we have put changes from the remote repository into our local repository without merge operations. Moreover, we preserved our local (not pushed) commits. Now, we can push our changes to the remote repository:\ngit push and we\u0026rsquo;re done!\nI hope, this article will help to keep your git log clean.\nAs you see, I\u0026rsquo;m open for any kind of constructive feedback about these articles, so you can send me e-mails. Probably, I\u0026rsquo;ll add commenting functionality back to this blog, so feedback will be easier.\n","permalink":"https://wittchen.io/posts/avoiding-merging-master-to-master/","summary":"Problem If you are working with Git Version Control System, probably you have seen a commit messages in your git log like:\nMerge branch \u0026#39;master\u0026#39; to \u0026#39;master\u0026#39; or something similar. You might have even pushed such commits! Don\u0026rsquo;t worry, so did I ;-). In this article I\u0026rsquo;m going to explain why is it happenning and how to avoid it.\nSuch situation happens when you performed changes locally and at the same time someone else performed changes on the same branch as well, commited and pushed them to the remote repository.","title":"Avoiding merging master to master branch in Git"},{"content":"Introduction In the cloud computing era, companies start using services like Google Cloud Platform, Amazon Web Services or Microsoft Azure. We can hear about the term \u0026ldquo;Serverless\u0026rdquo;. It doesn\u0026rsquo;t mean that we don\u0026rsquo;t have any servers. It means that third-party services provide us server infsrastrucutre, monitoring and scaling capabilities, so we don\u0026rsquo;t have to care about that stuff by ourselves and we can focus on writing code. We have concepts like Backend as a Service (BaaS) and Funtion as a Service (FaaS). In BaaS we can configure whole backend infrastructure using third-party cloud services. In this case, we can have database, REST API and other services, which we need depending on our use case. In FaaS, we have just a tiny piece of code responsible for a single job, which we can take and deploy into the cloud. AWS Lambda is an example of FaaS and we\u0026rsquo;ll focus on it in this article.\nAWS Console First of all, we need to create our AWS account to have an access to AWS console. You can find the console at: https://aws.amazon.com/console/. I had a few problems regarding registration, but finally I created my account. People in support are quite helpful. Please, keep in mind the fact, that you need to provide your debit card details during the registration and they\u0026rsquo;ll charge you about 3 USD or something like that, which is a verification procedure. In AWS Lambda we\u0026rsquo;ll get 1 million of free requests per month per cloud function, which is enough for tests or even not so demanding commercial services.\nServerless Framework Serverless Framework is very convenient way of deploying Lambdas to AWS. You can install it as follows:\nnpm install serverless -g Next, you can type:\nserverless login in order to log into Serverless. We can use serverless or sls alias for this tool.\nWe also need to authorize Serverless to be able to deploy our Lambdas to AWS. We need to go to AWS Console, in the upper right corner click our name of the user and choose \u0026ldquo;My Security Credentials\u0026rdquo;. Then, we need to expand \u0026ldquo;Access Keys\u0026rdquo; and create new key and secret values. Once we got them, we can authorize Serverless:\nsls config credentials --provider aws --key YOUR_KEY --secret YOUR_SECRET Serverless will store these credentials in ~./aws/credentials file. Of course, this is very simple configruation. If we need more users, groups or more sophisticated authorization mechanisms, we should apply them later via IAM (Identity and Access Management) service.\nCreating Lambda Next, we can create our AWS Lambda template. When, we type:\nsls create --template We will see the list of available templates:\nServerless: Generating boilerplate... Serverless Error --------------------------------------- Template \u0026#34;true\u0026#34; is not supported. Supported templates are: \u0026#34;aws-nodejs\u0026#34;, \u0026#34;aws-nodejs-typescript\u0026#34;, \u0026#34;aws-nodejs-ecma-script\u0026#34;, \u0026#34;aws-python\u0026#34;, \u0026#34;aws-python3\u0026#34;, \u0026#34;aws-groovy-gradle\u0026#34;, \u0026#34;aws-java-maven\u0026#34;, \u0026#34;aws-java-gradle\u0026#34;, \u0026#34;aws-kotlin-jvm-maven\u0026#34;, \u0026#34;aws-kotlin-jvm-gradle\u0026#34;, \u0026#34;aws-kotlin-nodejs-gradle\u0026#34;, \u0026#34;aws-scala-sbt\u0026#34;, \u0026#34;aws-csharp\u0026#34;, \u0026#34;aws-fsharp\u0026#34;, \u0026#34;aws-go\u0026#34;, \u0026#34;aws-go-dep\u0026#34;, \u0026#34;azure-nodejs\u0026#34;, \u0026#34;google-nodejs\u0026#34;, \u0026#34;kubeless-python\u0026#34;, \u0026#34;kubeless-nodejs\u0026#34;, \u0026#34;openwhisk-nodejs\u0026#34;, \u0026#34;openwhisk-php\u0026#34;, \u0026#34;openwhisk-python\u0026#34;, \u0026#34;openwhisk-swift\u0026#34;, \u0026#34;spotinst-nodejs\u0026#34;, \u0026#34;spotinst-python\u0026#34;, \u0026#34;spotinst-ruby\u0026#34;, \u0026#34;spotinst-java8\u0026#34;, \u0026#34;webtasks-nodejs\u0026#34;, \u0026#34;plugin\u0026#34; and \u0026#34;hello-world\u0026#34;. Get Support -------------------------------------------- Docs: docs.serverless.com Bugs: github.com/serverless/serverless/issues Forums: forum.serverless.com Chat: gitter.im/serverless/serverless Your Environment Information ----------------------------- OS: linux Node Version: 7.10.1 Serverless Version: 1.26.0 We will use aws-java-gradle template:\nsls create --template aws-java-gradle After that, we\u0026rsquo;ll get the following project structure:\n├── build.gradle ├── gradle │ └── wrapper │ ├── gradle-wrapper.jar │ └── gradle-wrapper.properties ├── gradlew ├── gradlew.bat ├── serverless.yml └── src └── main ├── java │ └── com │ └── serverless │ ├── ApiGatewayResponse.java │ ├── Handler.java │ └── Response.java └── resources └── log4j.properties If you want to browse source of such template, you can visit my serverless-lambda-playground repo. We can add our configurations in serverless.yml file:\nservice:aws-java-gradleprovider:name:awsruntime:java8package:artifact:build/distributions/hello.zipfunctions:hello:handler:com.serverless.HandlerMain class is the Handler class:\npublic class Handler implements RequestHandler\u0026lt;Map\u0026lt;String, Object\u0026gt;, ApiGatewayResponse\u0026gt; { private static final Logger LOG = Logger.getLogger(Handler.class); @Override public ApiGatewayResponse handleRequest(Map\u0026lt;String, Object\u0026gt; input, Context context) { LOG.info(\u0026#34;received: \u0026#34; + input); Response responseBody = new Response(\u0026#34;Go Serverless v1.x! Your function executed successfully!\u0026#34;, input); return ApiGatewayResponse.builder() .setStatusCode(200) .setObjectBody(responseBody) .setHeaders(Collections.singletonMap(\u0026#34;X-Powered-By\u0026#34;, \u0026#34;AWS Lambda \u0026amp; serverless\u0026#34;)) .build(); } } We can modify handleRequest(Map\u0026lt;String, Object\u0026gt; input, Context context) in order to perform any operation we want. It will be invoked after calling the Lambda. In case of JVM projects, we need to build them first:\n./gradlew build Deployment to the Cloud Next, we can deploy our Lambda to the AWS Cloud!\nsls deploy It may take more time in the beginning, but updates should be faster.\nWe should see something like that:\nServerless: Packaging service... Serverless: Creating Stack... Serverless: Checking Stack create progress... ..... Serverless: Stack create finished... Serverless: Uploading CloudFormation file to S3... Serverless: Uploading artifacts... Serverless: Validating template... Serverless: Updating Stack... Serverless: Checking Stack update progress... ............... Serverless: Stack update finished... Service Information service: aws-java-gradle stage: dev region: us-east-1 stack: aws-java-gradle-dev api keys: None endpoints: None functions: hello: aws-java-gradle-dev-hello Serverless: Publish service to Serverless Platform... Service successfully published! Your service details are available at: https://platform.serverless.com/services/pwittchen/aws-java-gradle Since that moment, our Lambda is deployed!\nBe aware of the regions! I\u0026rsquo;m beginner with AWS, so I haven\u0026rsquo;t noticed that my Lambda was deployed to us-east-1 and I was checking it on the AWS console, while being switched to another region and I didn\u0026rsquo;t know why I cannot see my function.\nNow, we can log into AWS Console and Navigate to Lambda and then to Functions. We should see our function:\nWhen, we type:\nsls info We should see information about the Lambda:\nService Information service: aws-java-gradle stage: dev region: us-east-1 stack: aws-java-gradle-dev api keys: None endpoints: None functions: hello: aws-java-gradle-dev-hello We can view details of our Lambda in AWS Console.\nExposing Lambda via API Gateway We can also apply API Gateway to expose our Lambda to the external world.\nWe can make our endpoint open or secured.\nNext, we can expand Gateway details and we should find \u0026ldquo;Invoke URL\u0026rdquo;.\nWe can call it:\ncurl https://ipj76pb5yl.execute-api.us-east-1.amazonaws.com/prod/aws-java-gradle-dev-hello Of course, url will be different in your setup.\nAfter that, we should receive response:\n{ \u0026#34;message\u0026#34;: \u0026#34;Go Serverless v1.x! Your function executed successfully!\u0026#34;, \u0026#34;input\u0026#34;: { \u0026#34;resource\u0026#34;: \u0026#34;/aws-java-gradle-dev-hello\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/aws-java-gradle-dev-hello\u0026#34;, \u0026#34;httpMethod\u0026#34;: \u0026#34;GET\u0026#34;, \u0026#34;headers\u0026#34;: { \u0026#34;Accept\u0026#34;: \u0026#34;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\u0026#34;, \u0026#34;Accept-Encoding\u0026#34;: \u0026#34;gzip, deflate, br\u0026#34;, \u0026#34;Accept-Language\u0026#34;: \u0026#34;en-US,en;q=0.5\u0026#34;, \u0026#34;CloudFront-Forwarded-Proto\u0026#34;: \u0026#34;https\u0026#34;, \u0026#34;CloudFront-Is-Desktop-Viewer\u0026#34;: \u0026#34;true\u0026#34;, \u0026#34;CloudFront-Is-Mobile-Viewer\u0026#34;: \u0026#34;false\u0026#34;, \u0026#34;CloudFront-Is-SmartTV-Viewer\u0026#34;: \u0026#34;false\u0026#34;, \u0026#34;CloudFront-Is-Tablet-Viewer\u0026#34;: \u0026#34;false\u0026#34;, \u0026#34;CloudFront-Viewer-Country\u0026#34;: \u0026#34;PL\u0026#34;, \u0026#34;Host\u0026#34;: \u0026#34;ipj76pb5yl.execute-api.us-east-1.amazonaws.com\u0026#34;, \u0026#34;upgrade-insecure-requests\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;User-Agent\u0026#34;: \u0026#34;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:61.0) Gecko/20100101 Firefox/61.0\u0026#34;, \u0026#34;Via\u0026#34;: \u0026#34;2.0 a9e1c5fff6a2739d3f7026c216819292.cloudfront.net (CloudFront)\u0026#34;, \u0026#34;X-Amz-Cf-Id\u0026#34;: \u0026#34;mU9mJ_nnAMYSbqz_Iu2otYdSAG7wgW32HeVLGV388duttalquBZAHA==\u0026#34;, \u0026#34;X-Amzn-Trace-Id\u0026#34;: \u0026#34;Root=1-5aae6481-c429ef02c5f6dd6f25c4526a\u0026#34;, \u0026#34;X-Forwarded-For\u0026#34;: \u0026#34;85.14.99.231, 54.182.243.105\u0026#34;, \u0026#34;X-Forwarded-Port\u0026#34;: \u0026#34;443\u0026#34;, \u0026#34;X-Forwarded-Proto\u0026#34;: \u0026#34;https\u0026#34; }, \u0026#34;queryStringParameters\u0026#34;: null, \u0026#34;pathParameters\u0026#34;: null, \u0026#34;stageVariables\u0026#34;: null, \u0026#34;requestContext\u0026#34;: { \u0026#34;requestTime\u0026#34;: \u0026#34;18/Mar/2018:13:07:13 +0000\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/prod/aws-java-gradle-dev-hello\u0026#34;, \u0026#34;accountId\u0026#34;: \u0026#34;782268757726\u0026#34;, \u0026#34;protocol\u0026#34;: \u0026#34;HTTP/1.1\u0026#34;, \u0026#34;resourceId\u0026#34;: \u0026#34;t56p8t\u0026#34;, \u0026#34;stage\u0026#34;: \u0026#34;prod\u0026#34;, \u0026#34;requestTimeEpoch\u0026#34;: 1521378433902, \u0026#34;requestId\u0026#34;: \u0026#34;46b8b8fb-2aad-11e8-8a1b-0b0a282c605c\u0026#34;, \u0026#34;identity\u0026#34;: { \u0026#34;cognitoIdentityPoolId\u0026#34;: null, \u0026#34;accountId\u0026#34;: null, \u0026#34;cognitoIdentityId\u0026#34;: null, \u0026#34;caller\u0026#34;: null, \u0026#34;sourceIp\u0026#34;: \u0026#34;85.14.99.231\u0026#34;, \u0026#34;accessKey\u0026#34;: null, \u0026#34;cognitoAuthenticationType\u0026#34;: null, \u0026#34;cognitoAuthenticationProvider\u0026#34;: null, \u0026#34;userArn\u0026#34;: null, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:61.0) Gecko/20100101 Firefox/61.0\u0026#34;, \u0026#34;user\u0026#34;: null }, \u0026#34;resourcePath\u0026#34;: \u0026#34;/aws-java-gradle-dev-hello\u0026#34;, \u0026#34;httpMethod\u0026#34;: \u0026#34;GET\u0026#34;, \u0026#34;apiId\u0026#34;: \u0026#34;ipj76pb5yl\u0026#34; }, \u0026#34;body\u0026#34;: null, \u0026#34;isBase64Encoded\u0026#34;: false } } Hooray! Our Lambda is working on-line now!\nMonitoring In the \u0026ldquo;Monitoring\u0026rdquo; section of the AWS Lambda Functions Console, we can monitor usage of our service.\nUpdate If we want to update our function, we can simply modify it, rebuild code with ./gradlew build and deploy it again with sls deploy. Once we have it configured it\u0026rsquo;s really easy.\nFunction Removal If we want to remove our Function, we can just type:\nsls remove and we\u0026rsquo;ll see the following messages:\nServerless: Getting all objects in S3 bucket... Serverless: Removing objects in S3 bucket... Serverless: Removing Stack... Serverless: Checking Stack removal progress... ......... Serverless: Stack removal finished... Serverless: Successfully archived your service on the Serverless Platform Summary To wrap up, AWS Lambda is a really convenient way to solve single tasks without worrying about infrastructure, deployment and scalability. If we need one job to be done - e.g. exposing endpoint, transforming images, sending notifications, tiny app running on the server or whatever is required, AWS Lambda is good choice for that. Moreover, thanks to Serverless Framework deployment becomes really easy. In addition, we can develop Lambdas in other languages like Kotlin, Groovy, Scala, Go, Python, Node.js, C# and F#, so we\u0026rsquo;re not limited just to one language. We also should remember that AWS is powerfull platform with about 100 different services and Lambda is just one of them. It\u0026rsquo;s good to familiarize with AWS and other cloud computing platforms like Azure, GCP and so on because more companies start to invest in that and such solutions are becoming standard in certain areas.\nReferences  Serverless Architecture by Martin Fowler AWS + Serverless - video tutorial AWS Console Serverless Framework Serverless Lambda Playground repository  ","permalink":"https://wittchen.io/posts/deployment-of-the-java-code-to-aws-lambda/","summary":"Introduction In the cloud computing era, companies start using services like Google Cloud Platform, Amazon Web Services or Microsoft Azure. We can hear about the term \u0026ldquo;Serverless\u0026rdquo;. It doesn\u0026rsquo;t mean that we don\u0026rsquo;t have any servers. It means that third-party services provide us server infsrastrucutre, monitoring and scaling capabilities, so we don\u0026rsquo;t have to care about that stuff by ourselves and we can focus on writing code. We have concepts like Backend as a Service (BaaS) and Funtion as a Service (FaaS).","title":"Deployment of the Java code to AWS Lambda"},{"content":"Today, I\u0026rsquo;ve released my another tiny project. It\u0026rsquo;s a very simple implementation of Event Bus with RxJava 2 under the hood. This library is compatible with Java 1.7 or higher. I didn\u0026rsquo;t use Java 1.8 or 1.9 because I wanted to make it compatible with Android apps.\nYou can use it as follows:\nBus bus = ReactiveBus.create(); Disposable observer = bus.receive().subscribe(new Consumer\u0026lt;Event\u0026gt;() { @Override public void accept(Event event) { // handle event here  } }); Once, we created Event Bus object and our observer (or more precisely: disposable subscriber), we can start sending events:\nbus.send(Event.name(\u0026#34;my event\u0026#34;).build()); We can also send some serializable data:\nbus.send(Event.name(\u0026#34;my another event with data\u0026#34;).data(serializableObject).build()); All events, will be received by the consumer in subscribe(...) method.\nIf we want to stop propagation of the events, we can just dispose observer like any RxJava subscription:\nobserver.dispose(); Actually, most of the work is done by RxJava itself. In this project, I just put a few pieces together and played around with them in unit tests.\nWith such kind of Event Bus implementation, we can create fluent, functional, reactive piplines of data flow in our apps.\nYou can include this tiny library in your project via Maven:\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.github.pwittchen\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;reactivebus\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.0.5\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.reactivex.rxjava2\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;rxjava\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.1.10\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; or via Gradle:\nimplementation \u0026#39;com.github.pwittchen:reactivebus:0.0.5\u0026#39; implementation \u0026#39;io.reactivex.rxjava2:rxjava:2.1.10\u0026#39; For more details, visit project repository on GitHub: https://github.com/pwittchen/ReactiveBus\nReferences  Articles:  Understanding RxJava Subject — Publish, Replay, Behavior and Async Subject What\u0026rsquo;s different in RxJava 2.0? Implementing an Event Bus with RxJava 1   Other Event Bus implementations:  Otto Event Bus in Guava GreenRobot\u0026rsquo;s Event Bus    ","permalink":"https://wittchen.io/posts/introducing-reactive-bus/","summary":"Today, I\u0026rsquo;ve released my another tiny project. It\u0026rsquo;s a very simple implementation of Event Bus with RxJava 2 under the hood. This library is compatible with Java 1.7 or higher. I didn\u0026rsquo;t use Java 1.8 or 1.9 because I wanted to make it compatible with Android apps.\nYou can use it as follows:\nBus bus = ReactiveBus.create(); Disposable observer = bus.receive().subscribe(new Consumer\u0026lt;Event\u0026gt;() { @Override public void accept(Event event) { // handle event here  } }); Once, we created Event Bus object and our observer (or more precisely: disposable subscriber), we can start sending events:","title":"Introducing ReactiveBus"},{"content":"I\u0026rsquo;ve just finished migrating my personal website and blog from Wordpress to Hexo. I\u0026rsquo;ve been using Wordpress for more than 5 years and decided to check out something new. Hexo amazed me with its simplicity and ease of use. Probably this tool is more recognized around JavaScript developers, because it\u0026rsquo;s written in that language. I discovered it in the last month.\nFeatures of Hexo Static website generator For a simple blog with static content I don\u0026rsquo;t really need dynamic website like Wordpress. Content of the articles changes quite rarely. I just generate static content and deploy it to the server.\nMarkdown support I can write articles with Markdown in any editor I want - Sublime or even Vim! In addition, Hexo themes have really nice support for syntax coloring.\nIt works off-line I can write articles off-line and run my blog very easily on localhost while being disconnected from the Internet. I know it could be possible with Wordpress, but it would require a lot of work.\nIt doesn\u0026rsquo;t have any database Right now, all website code and articles (as a markdown files) are stored in a single Git repository. It makes everything easier and it\u0026rsquo;s really neat solution for simple websites and blogs like this one.\nThemes and plugins Wordpress has them too. Of course, it\u0026rsquo;s important feature, which cannot be avoided in blogging platforms. I\u0026rsquo;m using customized apollo theme right now. My previous customized Wordpress theme - gitsta - was quite simple already, but this one is even more minimalistic, what I personally like.\nHot reload Thanks to browsersync I can edit my blog, while running it on localhost and see updates without refreshing page manually. It\u0026rsquo;s really convenient and saves time.\nI can use it without leaving terminal Hexo gives us CLI tool, which we can use for running blog locally, creating posts, pages and making deployment. I\u0026rsquo;ve made a wrapper for a few commands in Makefile.\nRight now, I can run blog locally with:\nmake run and deploy updated version with:\nmake deploy If you\u0026rsquo;re interested in more technical details, you can view source code and documentation of this website at github.com/pwittchen/wittchen.io.\nRight now, website doesn\u0026rsquo;t have a few features like comments and search. They\u0026rsquo;re not crucial in my case, but I will hopefully add them in the future.\nNew domain I\u0026rsquo;ve migrated my website to the new domain: wittchen.io. It\u0026rsquo;s shorter and simpler.\nOld domains: wittchen.biz.pl and blog.wittchen.biz.pl will redirect you to the new address.\nNew RSS feed address There\u0026rsquo;s also new RSS Feed address, which looks as follows: wittchen.io/feed.xml.\nSummary I personally like this change and I believe that simplicity is the ultimate sophistication.\nI hope you like it too :-).\n","permalink":"https://wittchen.io/posts/new-blog/","summary":"I\u0026rsquo;ve just finished migrating my personal website and blog from Wordpress to Hexo. I\u0026rsquo;ve been using Wordpress for more than 5 years and decided to check out something new. Hexo amazed me with its simplicity and ease of use. Probably this tool is more recognized around JavaScript developers, because it\u0026rsquo;s written in that language. I discovered it in the last month.\nFeatures of Hexo Static website generator For a simple blog with static content I don\u0026rsquo;t really need dynamic website like Wordpress.","title":"New blog, new system, new domain"},{"content":"Introduction In one of my open-source projects - ReactiveNetwork I have a documentation in README.md file and I have JavaDocs as well. This project is an Android library written in Java and built with Gradle. Moreover, I develop this project on two separate Git branches - one for RxJava1.x and another one for RxJava2.x. Similar convention is in the RxJava repository, so I followed it. After each release I publish documentation and JavaDocs on GitHub pages for both versions. It\u0026rsquo;s kind of boring and repeatable task, so I was wondering if there\u0026rsquo;s any way to automate it.\nGenerating JavaDocs I have a Gradle task, which does that as follows:\n./gradlew androidJavadocs and generates JavaDocs in library/build/docs/javadoc/ directory. I keep generated JavaDocs on gh-pages branch in /javadoc/RxJava1.x/ and /javadoc/RxJava2.x/ directories. Now, I need to checkout to RxJava2.x branch generate JavaDocs, switch to gh-pages branch delete contents of javadoc/RxJava2.x/ directory, copy contents from library/build/docs/javadoc/ into javadoc/RxJava2.x/, commit changes, do the same for RxJava1.x branch and push changes. As you noticed, It\u0026rsquo;s a lot of manual work. I\u0026rsquo;ve scripted it as follows in my update_javadocs.sh file:\n!/usr/bin/env bash # update javadocs for RxJava2.x git checkout RxJava2.x ./gradlew clean androidJavadocs git checkout gh-pages rm -rf javadoc/RxJava2.x/* cp -avr library/build/docs/javadoc/* ./javadoc/RxJava2.x git add -A git commit -m \u0026#34;updating JavaDoc for RxJava2.x\u0026#34; rm -rf library/build/docs echo \u0026#34;javadocs for RxJava2.x updated\u0026#34; # update javadocs for RxJava1.x git checkout RxJava1.x ./gradlew clean androidJavadocs git checkout gh-pages rm -rf javadoc/RxJava1.x/* cp -avr library/build/docs/javadoc/* ./javadoc/RxJava1.x git add -A git commit -m \u0026#34;updating javadocs for RxJava1.x\u0026#34; echo \u0026#34;javadocs for RxJava1.x updated\u0026#34; echo \u0026#34;javadocs for both RxJava1.x and RxJava2.x updated - now you can push your changes\u0026#34; Generating user-friendly documentation I keep my whole documentation for the user in README.md file. In order to generate user-friendly website with documentation I used docsify. You can install it as follows via npm:\nnpm i docsify-cli -g Next, on gh-pages branch I\u0026rsquo;ve created docs/RxJava1.x/ and docs/RxJava2.x/ directories and copied there appropriate README.md files from RxJava1.x and RxJava2.x branches. Next I could go inside each directory and type:\ndocsify init . Docsify generated nice website with documentation gathered dynamically from README.md file. After that, I\u0026rsquo;ve done a few manual adjustments. Now, the only thing a need to do is to keep README.md files updated. That\u0026rsquo;s why I made a script for copying README.md files from RxJava1.x and RxJava2.x branch into appropriate directories on gh-pages branch and named it update_docs.sh:\n#!/usr/bin/env bash git checkout gh-pages git show RxJava1.x:README.md \u0026gt;docs/RxJava1.x/README.md git show RxJava2.x:README.md \u0026gt;docs/RxJava2.x/README.md git add -A git commit -m \u0026#34;updating docs\u0026#34; echo \u0026#34;docs updated, now you can push your changes\u0026#34; Summary Now, I have boring process of generating Docs and JavaDocs for two separate Git branches automated and I can simply invoke my scripts:\n./update_javadocs.sh ./update_docs.sh git push and that\u0026rsquo;s it! You can see websites with documentation at:\n http://pwittchen.github.io/ReactiveNetwork/docs/RxJava1.x http://pwittchen.github.io/ReactiveNetwork/docs/RxJava2.x  and JavaDocs at:\n http://pwittchen.github.io/ReactiveNetwork/javadoc/RxJava1.x http://pwittchen.github.io/ReactiveNetwork/javadoc/RxJava2.x  I hope this article will give some ideas of automating your repeatable tasks.\n","permalink":"https://wittchen.io/posts/automating-generation-of-the-on-line-documentation-for-java-library/","summary":"Introduction In one of my open-source projects - ReactiveNetwork I have a documentation in README.md file and I have JavaDocs as well. This project is an Android library written in Java and built with Gradle. Moreover, I develop this project on two separate Git branches - one for RxJava1.x and another one for RxJava2.x. Similar convention is in the RxJava repository, so I followed it. After each release I publish documentation and JavaDocs on GitHub pages for both versions.","title":"Automating generation of the on-line documentation for Java library"},{"content":"On the 8th of February 2018, during Quality Meetup #15, I gave a presentation titled \u0026ldquo;Fixing a billion dollar mistake\u0026rdquo;. Tony Hoare introduced Null Reference w in ALGOL language in 1965. He calls this decision a \u0026ldquo;billion dollar mistake\u0026rdquo;. It was so easy to implement and probably it caused a loss of millions of dollars due to the mistakes done in the software over the 40 years. During the time, people came up with different ideas of solving that problem with software libraries, good programming practices, static code analysis and compile time code analysis. Moreover, we have new programming languages with null safety features. During the presentation I\u0026rsquo;ve shown how to deal with the null reference problem in the JVM projects no matter if it\u0026rsquo;s a greenfield solution or legacy code.\nSlides from the presentation are available below.\nView Slides on SpeakerDeck\nSee a few pictures and archived meeting info at: qualityexcites.pl/quality-meetup/meetup-15\nThanks everyone for coming!\n","permalink":"https://wittchen.io/posts/quality-meetup-15-fixing-a-billion-dollar-mistake/","summary":"On the 8th of February 2018, during Quality Meetup #15, I gave a presentation titled \u0026ldquo;Fixing a billion dollar mistake\u0026rdquo;. Tony Hoare introduced Null Reference w in ALGOL language in 1965. He calls this decision a \u0026ldquo;billion dollar mistake\u0026rdquo;. It was so easy to implement and probably it caused a loss of millions of dollars due to the mistakes done in the software over the 40 years. During the time, people came up with different ideas of solving that problem with software libraries, good programming practices, static code analysis and compile time code analysis.","title":"Quality Meetup no. 15 - Fixing a billion dollar mistake"},{"content":"From some time, I wanted to create my own app, which will display some data in top panel in macOS or Gnome environment on Linux. I collected some resources about that and I knew that for macOS I need to write an app in Obj-C and for Gnome I need to write a plugin in JavaScript. In both cases it requires some ceremony and preparation. Recently I\u0026rsquo;ve found a great app for macOS called BitBar (by the way it\u0026rsquo;s open-source). BitBar allows to put anything to macOS menu bar (top panel) in no time! With this project creating top panel apps is simplified to the limit. Moreover, there\u0026rsquo;s another project called Argos, which does the same thing, but for Linux with Gnome (it\u0026rsquo;s an open-source Gnome Extension). In both cases, we just need to create a shell script, put it into appropriate directory (in case of Argos, it\u0026rsquo;s ~/.config/argos/ and in case of BitBar, we define it during the installation or first run) and then app displays our data automatically. We can also set refresh rate. E.g. if we want our script to be executed every 60 seconds, we can name it script.60s.sh. We can also create more advanced scripts and more details can be found in BitBar and Argos documentation. In my case, I wanted to create a script, which reads CAQI (Common Air Quality Index) in my current location based on Airly sensors. Airly provides nice API, which we can use in our projects. Please remember that most of the sensors are located in Poland. On my Ubuntu Linux with Gnome 3, I created a new script in the following path:\n~/.config/argos/caqi.60s.sh For a BitBar script location could be different. Both for BitBar and Argos follow the same naming convention. My script looks as follows:\n#!/usr/bin/env bash  CAQI=$(curl -s -X GET --header \u0026#39;Accept: application/json\u0026#39; --header \u0026#39;apikey: YOUR_API_KEY\u0026#39; \\  \u0026#39;https://airapi.airly.eu/v1/nearestSensor/measurements?latitude=YOUR_LATITUDE\u0026amp;longitude=YOUR_LONGITUDE\u0026amp;maxDistance=1000\u0026#39; \\  | jq .airQualityIndex | cut -f1 -d\u0026#34;.\u0026#34;) MSG=\u0026#34;Unknown\u0026#34; case 1 in $(($CAQI \u0026lt;= 25))) MSG=\u0026#34;Great!\u0026#34;;; $(($CAQI \u0026lt;= 50))) MSG=\u0026#34;Good!\u0026#34;;; $(($CAQI \u0026lt;= 75))) MSG=\u0026#34;Medium\u0026#34;;; $(($CAQI \u0026lt;= 100))) MSG=\u0026#34;Bad\u0026#34;;; $(($CAQI \u0026gt;= 101))) MSG=\u0026#34;Very Bad\u0026#34;;; esac echo \u0026#34;CAQI: $CAQI($MSG)\u0026#34; Please note, script above was created for API v. 1. If you\u0026rsquo;re interested in the latest version of the script, have a look at https://github.com/pwittchen/airly.sh repository.\nIt works fine on Linux. The only requirement is to install jq. For macOS, I needed to change jq to /usr/local/bin/jq to make it work. I gathered information about air quality level from this website: https://www.airqualitynow.eu/pl/about_indices_definition.php [PL]. Of course, we need to replace API_KEY with our api key, which we can get from https://developer.airly.eu/ website as well as YOUR_LATITUDE and YOUR_LONGITUDE with coordinates of our location. It can be static location in our city. We can get them e.g. from Google Maps.\nAs a result, we have beautiful text in our top panel:\nThis screenshot was taken on Ubuntu Linux with Gnome 3. On macOS it works the same (I checked it).\n","permalink":"https://wittchen.io/posts/air-quality-monitoring-script-for-argos-linux-and-bitbar-macos/","summary":"From some time, I wanted to create my own app, which will display some data in top panel in macOS or Gnome environment on Linux. I collected some resources about that and I knew that for macOS I need to write an app in Obj-C and for Gnome I need to write a plugin in JavaScript. In both cases it requires some ceremony and preparation. Recently I\u0026rsquo;ve found a great app for macOS called BitBar (by the way it\u0026rsquo;s open-source).","title":"Air quality monitoring script for Argos (Linux) and BitBar (macOS)"},{"content":"Recently, I\u0026rsquo;ve decided to refresh my knowledge regarding Docker and created an image with Alpine Linux and Java 9, which can be a useful base for the future projects. I used Alpine as a base image because it became quite popular in the Docker world due to its simplicity and the fact that it\u0026rsquo;s pretty lightweight when we compare it to containers based on other Linux distributions. Pure Alpine Docker container has about 4.144 MB, what is really impressing.\nContainer with Java 9 My Dockerfile looks pretty simple:\nFROMalpine:latestMAINTAINERpwittchenUSERrootRUN wget http://download.java.net/java/jdk9-alpine/archive/181/binaries/jdk-9-ea+181_linux-x64-musl_bin.tar.gzRUN tar -xzvf *.tar.gzRUN chmod +x jdk-9RUN mv jdk-9 /usr/local/shareENV JAVA_HOME=/usr/local/share/jdk-9ENV PATH=\u0026#34;$JAVA_HOME/bin:${PATH}\u0026#34;RUN rm -rf *.tar.gzWe\u0026rsquo;re downloading JDK, unpacking it, moving to /usr/local/share directory, creating $JAVA_HOME environmental variable and adding $JAVA_HOME/bin to the $PATH. After that, we\u0026rsquo;re removing downloaded *.tar.gz file. We can find it on Docker Hub: https://hub.docker.com/r/pwittchen/alpine-java9/ To pull the image from Docker Hub, just type:\nsudo docker pull pwittchen/alpine-java9 To run it with CLI, type:\nsudo docker run -i -t pwittchen/alpine-java9 Then, we can play around with jshell inside the container:\n/ # jshell Dec 27, 2017 1:18:10 PM java.util.prefs.FileSystemPreferences$1 run INFO: Created user preferences directory. | Welcome to JShell -- Version 9-ea | For an introduction type: /help intro jshell\u0026gt; System.out.println(\u0026#34;hello from docker!\u0026#34;) hello from docker! This container is not so small and has about 919.2 MB. It contains whole JDK, so probably this size could be reduced.\nNote!\nRight now (21st of March 2018), this solution doesn\u0026rsquo;t work any longer. Please, search for an official Alpine image with Java 9 or use image with Ubuntu and Java 9 located in dockerfiles-java repo.\nContainer with Java 8 I\u0026rsquo;ve also created another image with Java 8 (just in case):\nFROMalpine:latestMAINTAINERpwittchenUSERrootRUN apk updateRUN apk fetch openjdk8RUN apk add openjdk8We can also find it on GitHub: github.com/pwittchen/dockerfiles-java (inside the alpine-java8 directory), Docker Hub: https://hub.docker.com/r/pwittchen/alpine-java8/ and pull it from the Docker Hub:\nsudo docker pull pwittchen/alpine-java8 and run it with CLI as follows:\nsudo docker run -i -t pwittchen/alpine-java8 In this case, container has 118.5 MB, which is better result than for the previous container. In this case, we\u0026rsquo;re installing Java 8 for Alpine from official repository, so probably it\u0026rsquo;s already optimized. I hope, you\u0026rsquo;ll find it useful while developing your projects in Java 8 or Java 9.\n","permalink":"https://wittchen.io/posts/creating-a-docker-container-with-alpine-linux-including-java-8-and-9/","summary":"Recently, I\u0026rsquo;ve decided to refresh my knowledge regarding Docker and created an image with Alpine Linux and Java 9, which can be a useful base for the future projects. I used Alpine as a base image because it became quite popular in the Docker world due to its simplicity and the fact that it\u0026rsquo;s pretty lightweight when we compare it to containers based on other Linux distributions. Pure Alpine Docker container has about 4.","title":"Creating a Docker container with Alpine Linux including Java 8 and 9"},{"content":"Yesterday, I gave a presentation about connectivity in the Android apps during the DroidCon Poland 2017 Conference in Kraków.\nBelow, you can see slides from this presentation.\n View slides on SpeakerDeck\nThere\u0026rsquo;s also tweet related to this presentation from DroidCon Kraków:\nPiotr Wittchen tells us about how we can we keep the track of network \u0026#x1f30e; or Internet connectivity changes in our app \u0026#x1f4f1;\u0026#x1f198;\u0026#x1f642; pic.twitter.com/7YGGzNJeb2\n\u0026mdash; droidcon Kraków (@droidconkr) December 2, 2017  I hope, you enjoyed it. Any kind of feedback is welcome (in the comments below this article or via e-mail). Don\u0026rsquo;t forget to check ReactiveNetwork library I mentioned during the presentation.\n","permalink":"https://wittchen.io/posts/droidcon-poland-2017-is-your-app-really-connected/","summary":"Yesterday, I gave a presentation about connectivity in the Android apps during the DroidCon Poland 2017 Conference in Kraków.\nBelow, you can see slides from this presentation.\n View slides on SpeakerDeck\nThere\u0026rsquo;s also tweet related to this presentation from DroidCon Kraków:\nPiotr Wittchen tells us about how we can we keep the track of network \u0026#x1f30e; or Internet connectivity changes in our app \u0026#x1f4f1;\u0026#x1f198;\u0026#x1f642; pic.twitter.com/7YGGzNJeb2\n\u0026mdash; droidcon Kraków (@droidconkr) December 2, 2017  I hope, you enjoyed it.","title":"DroidCon Poland 2017 - Is your app really connected?"},{"content":"During Hack Your Career event at the Silesian University of Technology, I\u0026rsquo;ve prepared a presentation titled Reactive Programming - Efficient Server Applications with a colleague from work. Arek told about theory of Reactive Programming, shown basic concepts, data types and a few examples in the code. During my part of the presentation, I\u0026rsquo;ve wrote a very simple server and client in Java (9 on the server, 7 on the client) with Vert.x (Core and Rx), RxJava 2, OkHttp 3, Android and RxAndroid. Presentation was targeted mainly to the university students with no experience with reactive programming, but it was an open event and anyone could attend it. Below, we can see a very simple code snippet showing how to create a reactive HTTP server with Vert.x. We can create a stream of requests, make Flowable out of it, apply any kind of RxJava 2 operator including backpressure handling and subscribe the stream. Moreover, we can also reactively start the server with rxListen(int port) method. This is just a basic example, where will be sending request to the only one endpoint. In the case, when we want to handle more endpoints, we can use vertx-web library and design REST API.\nfinal HttpServer server = Vertx .vertx() .createHttpServer(); server .requestStream() .toFlowable() .onBackpressureDrop() .subscribe(request -\u0026gt; { logger.info(\u0026#34;{} {}\u0026#34;, request.rawMethod(), request.absoluteURI()); request.response().end(\u0026#34;request received\u0026#34;); }); server .rxListen(8080) .subscribe(httpServer -\u0026gt; logger.info(\u0026#34;server is running at port 8080...\u0026#34;)); We can build this server with Gradle as follows:\n./gradlew shadowJar and then, we can run it:\njava -jar build/libs/server-fat.jar Our client will be an Android application, which will read data from the accelerometer sensor, send it to the server and display it in the TextView on a mobile device. We will use ReactiveSensors library (which was recently migrated to RxJava 2) for getting sensor readings as a Flowable data stream. Next, we will apply backpressure DROP strategy, filter only events of changing sensors (we neglect changing of the accuracy), read only one event per one second with throttleLast(int, TimeUnit) operator and map event to a String with device coordinates. Next, we are ready to send data with Completable performRequest(String), which we created earlier. Sensors readings are acquired in the computation() scheduler, send to the server with io() scheduler and passed to the UI thread on Android with AndroidSchedulers.mainThread(). Distributing operations to the different schedulers is made with subscribeOn(Scheduler) and observeOn(Scheduler).\nreactiveSensors .observeSensor(Sensor.TYPE_ACCELEROMETER) .onBackpressureDrop() .filter(ReactiveSensorFilter.filterSensorChanged()) .throttleLast(1, TimeUnit.SECONDS) .map(this::getSensorReading) .doOnNext(event -\u0026gt; performRequest(event) .subscribeOn(Schedulers.io()) .subscribe()) .subscribeOn(Schedulers.computation()) .observeOn(AndroidSchedulers.mainThread()) .subscribe(event -\u0026gt; tvReadings.setText(event)); It\u0026rsquo;s worth noticing that Completable performRequest(String) is using OkHttp 3 under the hood as a HTTP client, because it\u0026rsquo;s very simple example with one endpoint. In the case, we want to handle more endpoints on the client-side, it\u0026rsquo;s better to use Retrofit library. It\u0026rsquo;s also interesting that in our case, we can simulate behavior of the accelerometer and other sensors with the latest Android device emulator available in the Android SDK. It works surprisingly smooth.\nComplete working example can be found at: https://github.com/pwittchen/reactive-client-server. Later, I\u0026rsquo;ve also shown, how to use RxJava to distribute computational operations to a different threads of the CPU cores, but I\u0026rsquo;ll probably publish a separate article about that on this blog. It was the same example I shown during my JDD presentation this year.\nSlides from my part of the presentation are available below.\n{% raw %}\n{% endraw %}\nView slides on SpeakerDeck\n","permalink":"https://wittchen.io/posts/simple-reactive-http-client-and-server-with-rxjava-vertx-and-android/","summary":"During Hack Your Career event at the Silesian University of Technology, I\u0026rsquo;ve prepared a presentation titled Reactive Programming - Efficient Server Applications with a colleague from work. Arek told about theory of Reactive Programming, shown basic concepts, data types and a few examples in the code. During my part of the presentation, I\u0026rsquo;ve wrote a very simple server and client in Java (9 on the server, 7 on the client) with Vert.","title":"Simple reactive HTTP client and server with RxJava, Vert.x and Android"},{"content":"Introduction In the past months, I\u0026rsquo;ve attended a few conferences and meetups related to IT. I also plan to attend a few more in the last quarter of the year as a speaker. I\u0026rsquo;d like to show you a few tips, which can encourage you to attend such events, be more involved in them and spend some time away from your desk ;-). If you are working in a software company, in the most cases you could treat going for a conference as a non-customer facing business trip, so your regular days off will be safe and can be used for your personal plans and holidays :-). I tried all of the methods described in this article both in Poland and abroad, so I can tell you they\u0026rsquo;re confirmed in practice.\nUse your company\u0026rsquo;s educational budget There are companies, which offer so called educational budget, which is defined each year. Such budget can be used for attending the conferences and trainings. In the company where I work now (SAP Hybris), I have such benefit and I could use it to go to the Spring I/O in the Barcelona, Spain last year, J On The Beach in Malaga, Spain and Devoxx in Kraków, Poland this year. Of course, travel, food and accommodation expanses were covered by this budget as well as conference tickets.\nICE Kraków Congress Centre - Devoxx Poland 2017 Venue\nMalaga, Spain\nBe a speaker This year I was a speaker during JDD conference in Kraków, Poland. I had confirmed business trip and an accommodation in high quality hotel paid by the conference organizers. I could also attend a dinner with other conference speakers and see all conference talks and hang out with participants without spending a penny. In the December 2017, I\u0026rsquo;m also going to be a speaker during DroidCon Poland conference, where organizers offered to cover accommodation costs as well. Usually, you can expect that from good quality events, but it may happen that part of the costs will have to be covered by you, so it\u0026rsquo;s good to be prepared for that.\nMy JDD 2017 Conference Talk in Kraków, Poland\nBe a rejected speaker I\u0026rsquo;ve send my submission during Call For Papers for GDG Dev Fest in Lviv, Ukraine. I was rejected, but organizers offered me a free conference ticket. Organizers had over 150 C4P submissions including those of people from Google, Twitter, etc., so I wasn\u0026rsquo;t lucky this time. Ukraine is quite cheap country comparing to Poland and I wanted to visit Lviv, so I paid for travel and accommodation by myself and joined this event.\nGDG Dev Fest Ukraine 2017 Conference in Lviv\nView from Pravda Beer Theatre on the Market Square in Lviv, Ukraine\nBe a blogger I create this blog for a few years and I think its quality is becoming better and better every year and more people visit it. Last year, JDD conference organizers offered me a free conference ticket in exchange for promoting their conference on my blog. It was good exchange, because this event is interesting and related to the content of my website. In addition, conference ticket is not so cheap and costs about ~500 PLN or something like that. This situation encouraged me to be more engaged in the Java community and this year I attended the same conference as a speaker.\nBe a volunteer From a long time I wanted to visit London in UK and attend DroidCon London conference as well. It\u0026rsquo;s one of the most popular Android conferences in the Europe. Conference ticket is very expansive and costs 695 GBP, which is approximately ~3352 PLN. Nevertheless, you can save some money if you buy it very early (like almost one year before the conference). I used most of my personal educational budget in the company and I could, but I didn\u0026rsquo;t want to spend such amount of money from my own pocket just for a conference ticket. I\u0026rsquo;ve sent to the organizers a proposal of promotion of their event on my blog in exchange for a free conference ticket. They didn\u0026rsquo;t really want that, but they asked me to be a volunteer for a 2 days, so I could help them a little and get the free ticket. I decided to go for it. UK is much more expansive place than any city in Poland, so I had to spend some money for accommodation, food and transportation. Nevertheless, I don\u0026rsquo;t regret it, because it was nice experience and London is worth visiting at least for a few days. Moreover, I haven\u0026rsquo;t really encountered typical London weather. There was hot and sunny during my stay. Only one day was a bit cloudy with a small rain, but it wasn\u0026rsquo;t as cold as in Poland on my way back. I also made a few connections and gave my business cards to a few people. Such kind of networking can create new possibilities related to work, local \u0026amp; global communities, speaking on meetups, conferences etc. Of course, when you go to UK, don\u0026rsquo;t forget to check out the map of every pub in UK.\nBusiness Design Centre London - DroidCon London 2017 Venue\nLondon, UK in late October 2017 (The Shard is visible in the background)\nTower Bridge visible from The Shard, London, UK\nSummary As you can see, there are many ways to attend expensive IT conferences and you don\u0026rsquo;t really have to spend your own money on the tickets every time. You just need to be in a good company, a bit more engaged, give something from yourself to others and it will bring you profits. Attending many conferences won\u0026rsquo;t make you the best developer in the world, but sitting in front of your desk and doing the same thing for many days won\u0026rsquo;t do that either. It\u0026rsquo;s good to find a balance and time for the new experiences, changing your surroundings for some time, seeing new places and meeting new people. When you can mix that with your profession and work, that\u0026rsquo;s great!\n","permalink":"https://wittchen.io/posts/5-ways-to-attend-expansive-it-conferences-for-almost-free/","summary":"Introduction In the past months, I\u0026rsquo;ve attended a few conferences and meetups related to IT. I also plan to attend a few more in the last quarter of the year as a speaker. I\u0026rsquo;d like to show you a few tips, which can encourage you to attend such events, be more involved in them and spend some time away from your desk ;-). If you are working in a software company, in the most cases you could treat going for a conference as a non-customer facing business trip, so your regular days off will be safe and can be used for your personal plans and holidays :-).","title":"5 ways to attend expensive IT conferences for (almost) free"},{"content":"Recently, during Meet \u0026amp; Code event organized by Media 3.0 and SAP Hybris, I\u0026rsquo;ve gave a talk for university and high-school students about basics of Git. Presentation was titled Git - tips \u0026amp; tricks and was organized at the Silesian Univeristy of Technology in the AEI Department where I was studying a few years ago. Presentation covered quite essential usage of Git, which could be helpful for people who are planning to learn it from the scratch. Nevertheless, in the talk I included a few tips, which could be applied even by more advanced users in their daily work. You can view slides from this presentation below.\n{% raw %}\n{% endraw %}\nView slides on SpeakerDeck\n","permalink":"https://wittchen.io/posts/git-tips-and-tricks-meet-and-code-gliwice/","summary":"Recently, during Meet \u0026amp; Code event organized by Media 3.0 and SAP Hybris, I\u0026rsquo;ve gave a talk for university and high-school students about basics of Git. Presentation was titled Git - tips \u0026amp; tricks and was organized at the Silesian Univeristy of Technology in the AEI Department where I was studying a few years ago. Presentation covered quite essential usage of Git, which could be helpful for people who are planning to learn it from the scratch.","title":"Meet and Code 2017 - \"Git – tips \u0026 tricks\" presentation"},{"content":"Recently on the JDD 2017 conference, I gave a presentation regarding introduction to Reactive Streams standard in Java 9. I also talked about existing implementations of this standard with the strongest focus on RxJava2 and created simple Reactive Streams implementation in pure Java 9 during the presentation. Below, you can find slides from this talk.\n View presentation on SpeakerDeck\nCode snippets shown during this presentation are available at https://github.com/pwittchen/java-flow-experiments. I have done a tiny live coding session during this talk. Luckily, everything went fine, the code was compiled and executed without errors. Everything I\u0026rsquo;ve done during this presentation and additional exploratory unit tests could be found in this repository so you can check it out if you\u0026rsquo;re interested.\nThere were also tweets made by the audience just before the presentation.\nGoing to learn about the new Flow in #Java9 at #JDD_Krakow pic.twitter.com/60JIEJYwWn\n\u0026mdash; Radosław Skupnik (@Myzzreal) October 3, 2017  I can say that conference room was full. There were even people sitting on the floor due to lack of free chairs what really surprised me. In the Eventory app, more than 85 people joined the lecture, but in reality, there could be about 100 people or more. It was really flattering that such huge and great audience decided to listen to my talk. In fact, that was the biggest audience I have ever had during the public presentation so far. Moreover, people were asking many interesting questions during Q\u0026amp;A session and after the presentation, so it means they were interested in this topic and they wanted to learn more, understand it and apply it in their projects. If you haven\u0026rsquo;t had the opportunity to see this presentation, but you would like to, JDD organizers will provide video recordings from the sessions. In addition, you can monitor Talks page on this blog, where I publish my past and upcoming sessions. Probably, I\u0026rsquo;ll present this topic again during one or two meetups because people are interested in it. Joining JDD 2017 as a speaker was a great experience. It cost me an additional work and effort after hours, but at the end of the day, it was totally worth it and it was much easier to establish contacts and meet new people as a speaker than as an attendee, what is important for me. Moreover, I could learn new things from other people as well because general level of the conference presentations was pretty high. Thanks for the interesting questions, discussions, other good presentations and support before the talk! Below you can find two pictures from this talk made by JDD 2017 photographers.\nYou can watch this presentation on-line:\n Watch video on YouTube\n","permalink":"https://wittchen.io/posts/jdd-2017-juc-flow-presentation-summary/","summary":"Recently on the JDD 2017 conference, I gave a presentation regarding introduction to Reactive Streams standard in Java 9. I also talked about existing implementations of this standard with the strongest focus on RxJava2 and created simple Reactive Streams implementation in pure Java 9 during the presentation. Below, you can find slides from this talk.\n View presentation on SpeakerDeck\nCode snippets shown during this presentation are available at https://github.com/pwittchen/java-flow-experiments. I have done a tiny live coding session during this talk.","title":"JDD 2017 - Get ready for java.util.concurrent.Flow! - summary"},{"content":"Recently, with the remote help of guys from Uber in California, I integrated NullAway and ErrorProne with the one of my open-source Android projects.\nWhat is NullAway? Basically, it\u0026rsquo;s a tool to help eliminate NullPointerExceptions (NPEs) in your Java code. It detects situations where NPE could occur at the compile time. Let\u0026rsquo;s have a look at the following code:\nstatic void log(Object x) { System.out.println(x.toString()); } static void foo() { log(null); } NullAway will find out that we\u0026rsquo;re passing null and we\u0026rsquo;ll get appropriate error message:\nwarning: [NullAway] passing @Nullable parameter \u0026#39;null\u0026#39; where @NonNull is required log(null); ^ It\u0026rsquo;s good to have checks like that because they eliminate possible bugs in advance and follows Clean Code principles.\nA few words about ErrorProne NullAway is built as a plugin to ErrorProne and can run on every single build of our code. Moreover, ErrorProne can perform other checks on our code, which can find out commonly people mistakes. E.g. it can detect a situation, where programmer forgot to add @Test annotation in the unit test method in a test suite and other things. It has built-in bug patterns, which are used during code analysis.\nIntegration with the Android project I\u0026rsquo;ve integrated ErrorProne and NullAway with ReactiveNetwork Android library. First, in the main build.gradle file, I\u0026rsquo;ve added the following lines:\next.deps = [ ... nullaway : \u0026#39;com.uber.nullaway:nullaway:0.1.2\u0026#39;, errorprone : \u0026#39;com.google.errorprone:error_prone_core:2.1.1\u0026#39;, ... ] buildscript { repositories { jcenter() maven { url \u0026#39;https://plugins.gradle.org/m2/\u0026#39; } } dependencies { ... classpath \u0026#39;net.ltgt.gradle:gradle-errorprone-plugin:0.0.11\u0026#39; classpath \u0026#39;net.ltgt.gradle:gradle-apt-plugin:0.11\u0026#39; // NOTE: Do not place your application dependencies here; they belong  // in the individual module build.gradle files  } } Next, in the library/build.gradle file, I\u0026rsquo;ve added appropriate plugins in the top:\napply plugin: \u0026#39;net.ltgt.errorprone\u0026#39; apply plugin: \u0026#39;net.ltgt.apt\u0026#39; Afterwards, I could add dependencies:\ndependencies { ... annotationProcessor deps.nullaway errorprone deps.errorprone } The last thing to do, is the task responsible for running analysis during project compilation:\ntasks.withType(JavaCompile) { if (!name.toLowerCase().contains(\u0026#34;test\u0026#34;)) { options.compilerArgs += [\u0026#34;-Xep:NullAway:ERROR\u0026#34;, \u0026#34;-XepOpt:NullAway:AnnotatedPackages=com.github.pwittchen.reactivenetwork\u0026#34;] } } That\u0026rsquo;s it! Now, I could run analysis by typing:\n./gradlew check and fix the issues. I think, a quite similar approach and configuration could be applied to a regular, pure Java project built with Gradle. If you\u0026rsquo;re interested in the complete configurations, check it out in my project at: https://github.com/pwittchen/ReactiveNetwork. You can also view Pull Request #226 made by @msridhar (kudos for him!).\n","permalink":"https://wittchen.io/posts/integrating-nullaway-with-an-android-project/","summary":"Recently, with the remote help of guys from Uber in California, I integrated NullAway and ErrorProne with the one of my open-source Android projects.\nWhat is NullAway? Basically, it\u0026rsquo;s a tool to help eliminate NullPointerExceptions (NPEs) in your Java code. It detects situations where NPE could occur at the compile time. Let\u0026rsquo;s have a look at the following code:\nstatic void log(Object x) { System.out.println(x.toString()); } static void foo() { log(null); } NullAway will find out that we\u0026rsquo;re passing null and we\u0026rsquo;ll get appropriate error message:","title":"Integrating ErrorProne and NullAway with an Android project"},{"content":"Introduction I really like Gradle build system for JVM apps. It has flexibility like Ant and great dependency management capabilities like Maven. It addition, it doesn\u0026rsquo;t use XML notation, but Groovy programming language, so builds configurations are simple, concise, easier to read and easier to create. In my opinion, Gradle is truly modern build system for JVM apps. Nevertheless, there are projects, which are pretty old and use older systems like Ant. For example, all Hybris projects are based on Ant. Moreover, they have their custom setup and configurations, internal extensions system, etc. I was wondering if it\u0026rsquo;s possible to migrate Hybris Platform build from Ant to Gradle. That\u0026rsquo;s why I created a simple Proof of Concept.\nMigrating from Ant to Gradle If we want to use Gradle, we need to install it first.\nsudo apt-get install gradle # if we\u0026#39;re on Ubuntu Linux brew install gradle # if we\u0026#39;re on macOS For more details and instructions for other systems, check official Gradle installation guide. Then, we need to go to our Hybris platform directory and navigate to hybris/bin/platform After that, we need to initialize gradle inside this directory by running gradle command. Next, we need to create gradle wrapper by running gradle wrapper command. Now we should have the following elements in our directory:\n .gradle (directory) graldew (wrapper file for Unix) gradlew.bat (wrapper file for Windows)  Afterwards, we can create build.gradle configuration file. It should have the following contents:\nant.importBuild \u0026#39;build.xml\u0026#39; apply plugin: \u0026#39;java\u0026#39; repositories { jcenter() } task run() { doLast { exec { executable \u0026#34;./hybrisserver.sh\u0026#34; } } } task cleanGeneratedDirs(type: Delete) { delete \u0026#34;../../data\u0026#34; delete \u0026#34;../../log\u0026#34; delete \u0026#34;../../roles\u0026#34; delete \u0026#34;../../temp\u0026#34; } task cleanConfig(type: Delete) { delete \u0026#34;../../config\u0026#34; } dependencies { compile fileTree(dir: \u0026#39;lib\u0026#39;, include: \\[\u0026#39;*.jar\u0026#39;\\]) } Now, we can execute the following command:\n./gradlew clean build and platform will be built. In order to initialize the platform, we can call:\n./gradlew initialize If we want to start the Hybris server, we can simply call:\n./gradlew run To clear directories generated during build and initialization, we can run:\n./gradlew cleanGeneratedDirs I tried to make clean task dependent on this one, but I got a few errors and didn\u0026rsquo;t spend too much time on investigating them. As you probably noticed, this solution is just a wrapper around Ant build defined in build.xml file and it\u0026rsquo;s not pure Gradle build configuration. Nevertheless, these tips may be useful for the people who need to have custom build configurations and dependencies. There\u0026rsquo;s no doubt that creating and maintaining configurations via Gradle is much easier and more convenient than doing the same job via Ant.\nSummary As we can see, it\u0026rsquo;s possible to migrate Hybris build from Ant to Gradle, but please remember that Hybris has a custom setup and it may not be the best decision in each case. We should always consider pros and cons of such solution and adjust it to our needs. In legacy systems, we often have to stick to existing setups because making \u0026ldquo;revolution\u0026rdquo; may be a huge overhead and doesn\u0026rsquo;t have to pay off. Moreover, all Hybris extensions also have build configurations based on Ant. On the other hand, I can highly recommend Gradle for greenfield JVM projects.\nReferences There\u0026rsquo;s another nice, short article describing migrating Java projects from Ant to Gradle: Easily Convert from Ant to Gradle (objectpartners.com).\n","permalink":"https://wittchen.io/posts/building-sap-hybris-commerce-suite-via-gradle/","summary":"Introduction I really like Gradle build system for JVM apps. It has flexibility like Ant and great dependency management capabilities like Maven. It addition, it doesn\u0026rsquo;t use XML notation, but Groovy programming language, so builds configurations are simple, concise, easier to read and easier to create. In my opinion, Gradle is truly modern build system for JVM apps. Nevertheless, there are projects, which are pretty old and use older systems like Ant.","title":"Building and running SAP Hybris Commerce Platform via Gradle"},{"content":"I\u0026rsquo;m continuing Rxfication of the Android. Recently I released brand new library called ReactiveAirplaneMode. As you may guess, it allows listening Airplane mode on Android device with RxJava observables. A usual I\u0026rsquo;ve hidden all implementation details, BroadcastReceivers and rest of the Android related stuff behind RxJava abstraction layer, so API is really simple. Just take a look on that:\nReactiveAirplaneMode.create() .observe(context) .subscribeOn(Schedulers.io()) .observeOn(AndroidSchedulers.mainThread()) .subscribe(isOn -\u0026gt; textView.setText(String.format(\u0026#34;Airplane mode on: %s\u0026#34;, isOn.toString()))); In the code above subscriber will be notified only when airplane mode changes. If you want to read airplane mode and then listen to it, you can use the following method:\nReactiveAirplaneMode.create() .getAndObserve(context) .subscribeOn(Schedulers.io()) .observeOn(AndroidSchedulers.mainThread()) .subscribe(isOn -\u0026gt; textView.setText(String.format(\u0026#34;Airplane mode on: %s\u0026#34;, isOn.toString()))); If you want to check airplane mode only once, you can use get(context) method, which returns Single\u0026lt;Boolean\u0026gt; value:\nReactiveAirplaneMode.create() .get(context) .subscribeOn(Schedulers.io()) .observeOn(AndroidSchedulers.mainThread()) .subscribe(isOn -\u0026gt; textView.setText(String.format(\u0026#34;Airplane mode on: %s\u0026#34;, isOn.toString()))); If you want to check airplane mode only once without using Reactive Streams, just call isAirplaneModeOn(context) method:\nboolean isOn = ReactiveAirplaneMode.create().isAirplaneModeOn(context); You can add this library to your project via Gradle:\ndependencies { compile \u0026#39;com.github.pwittchen:reactiveairplanemode:0.0.1\u0026#39; } If you want to know more details, see sample app, documentation \u0026amp; tests, check repository with the source code at: https://github.com/pwittchen/ReactiveAirplaneMode.\n","permalink":"https://wittchen.io/posts/introducing-reactive-airplane-mode/","summary":"I\u0026rsquo;m continuing Rxfication of the Android. Recently I released brand new library called ReactiveAirplaneMode. As you may guess, it allows listening Airplane mode on Android device with RxJava observables. A usual I\u0026rsquo;ve hidden all implementation details, BroadcastReceivers and rest of the Android related stuff behind RxJava abstraction layer, so API is really simple. Just take a look on that:\nReactiveAirplaneMode.create() .observe(context) .subscribeOn(Schedulers.io()) .observeOn(AndroidSchedulers.mainThread()) .subscribe(isOn -\u0026gt; textView.setText(String.format(\u0026#34;Airplane mode on: %s\u0026#34;, isOn.toString()))); In the code above subscriber will be notified only when airplane mode changes.","title":"Introducing ReactiveAirplaneMode"},{"content":"Recently, I decided to organize my Unix dotfiles in a better way. I had a few custom scripts I used in my Tmux bottom bar. I kept these scripts in .scripts directory and during installation or upgrade of my personal configuration, install.sh script was copying them from .scripts directory to /usr/local/bin/ directory. I wanted to make this configuration more solid and consistent, so I decided to transform these scripts into tmux plugins managed by tpm. I was already using a few plugins like:\n tmux-sidebar tmux-copycat tmux-pain-control tmux-urlview  In my Tmux bottom bar, I display battery level, uptime, CPU, RAM, IP number and song currently played on Spotify. Previously I just used scripts copied to /usr/local/bin/ and configuration looked like that:\nset -g status-right \u0026#34;↑ #(showUptime) ⇅ #(showCpuUsage) ☰ #(showRamUsage) ∴ #(showIp) ↯ #{showBatteryLevel} ⧖ #(date \u0026#39;+%a, %b %d, %H:%M\u0026#39;) \u0026#34; I created the following plugins to replace these scripts:\n tmux-plugin-battery tmux-plugin-uptime tmux-plugin-cpu tmux-plugin-ram tmux-plugin-ip tmux-plugin-spotify  In order to use Tmux plugins, we need to install Tmux Plugin Manager:\ngit clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm\nand initialize it at the bottom of our .tmux.conf file:\nrun \u0026#39;~/.tmux/plugins/tpm/tpm\u0026#39; After that, it\u0026rsquo;s good to reload shell (source ~/.zshrc) and Tmux config (tmux source-file ~/.tmux.conf) Next, we can add our plugins to .tmux.conf file:\nset -g @plugin \u0026#39;tmux-plugins/tmux-sidebar\u0026#39; set -g @plugin \u0026#39;tmux-plugins/tmux-copycat\u0026#39; set -g @plugin \u0026#39;tmux-plugins/tmux-pain-control\u0026#39; set -g @plugin \u0026#39;tmux-plugins/tmux-urlview\u0026#39; set -g @plugin \u0026#39;pwittchen/tmux-plugin-battery\u0026#39; set -g @plugin \u0026#39;pwittchen/tmux-plugin-uptime\u0026#39; set -g @plugin \u0026#39;pwittchen/tmux-plugin-cpu\u0026#39; set -g @plugin \u0026#39;pwittchen/tmux-plugin-ram\u0026#39; set -g @plugin \u0026#39;pwittchen/tmux-plugin-ip\u0026#39; set -g @plugin \u0026#39;pwittchen/tmux-plugin-spotify\u0026#39; When we are in Tmux, we can install plugins by pressing prefix + I to install plugins. In my case, prefix = Ctrl+b. After that, we can hit Enter and we\u0026rsquo;re ready to go! Now, I could update my .tmux.conf with the variables defined by my plugins:\nset -g status-right \u0026#34; 🔉 #{spotify_song} ↑ #{uptime} ⇅ #{cpu} ☰ #{ram} ∴ #{ip} ↯ #{battery_level} ⧖ #(date \u0026#39;+%a, %b %d, %H:%M\u0026#39;) \u0026#34; After this operation, I could remove custom scripts from my dotfiles and desired functionality is delivered via plugins. Moreover, anyone can install these plugins via tpm without messing with custom scripts!\nRight now, my plugins are in kind of messy state and they don\u0026rsquo;t work perfectly across all operating systems (e.g. there are problems on macOS), but they\u0026rsquo;re usable under Linux Ubuntu 16.04 LTS and it\u0026rsquo;s a good beginning for organizing mess created by the custom scripts. That\u0026rsquo;s it! I have plans to publish another article describing how to write your custom Tmux plugin, which can be managed via tpm.\n","permalink":"https://wittchen.io/posts/using-tmux-with-tpm/","summary":"Recently, I decided to organize my Unix dotfiles in a better way. I had a few custom scripts I used in my Tmux bottom bar. I kept these scripts in .scripts directory and during installation or upgrade of my personal configuration, install.sh script was copying them from .scripts directory to /usr/local/bin/ directory. I wanted to make this configuration more solid and consistent, so I decided to transform these scripts into tmux plugins managed by tpm.","title":"Using Tmux plugins with Tpm"},{"content":"In the latest release of ReactiveNetwork library, I focused on Walled Garden AKA Great Firewall support during checking Internet connectivity. There are countries with limited Internet access like China and in such cases, pinging commonly known host like www.google.com may have different results than in other countries because it may be blocked. We may get false positive results because users will generally have an access to the Internet, but they don\u0026rsquo;t have access only to several websites. To solve that problem, I created WalledGardenInternetObservingStrategy and made it default strategy for checking Internet connectivity inside the library. Of course, you can still use SocketInternetObservingStrategy if you want to. Detailed release notes are as follows: RxJava1.x\n added WalledGardenInternetObservingStrategy - fixes #116 made WalledGardenInternetObservingStrategy a default strategy for checking Internet connectivity added documentation for NetworkObservingStrategy - solves #197 added documentation for InternetObservingStrategy - solves #198 bumped Kotlin version to 1.1.3-2 bumped Gradle Android Tools version to 2.3.3 bumped Retrolambda to 3.7.0  RxJava2.x\n added WalledGardenInternetObservingStrategy - fixes #116 made WalledGardenInternetObservingStrategy a default strategy for checking Internet connectivity added documentation for NetworkObservingStrategy - solves #197 added documentation for InternetObservingStrategy - solves #198 fixed package name in AndroidManifest.xml file - solves #195 bumped RxJava2 version to 2.1.2 bumped Kotlin version to 1.1.3-2 bumped Gradle Android Tools version to 2.3.3 bumped Retrolambda to 3.7.0 increased code coverage with unit tests  Repository address: https://github.com/pwittchen/ReactiveNetwork.\nHappy coding!\n","permalink":"https://wittchen.io/posts/reactivenetwork-v-0110-walled-garden/","summary":"In the latest release of ReactiveNetwork library, I focused on Walled Garden AKA Great Firewall support during checking Internet connectivity. There are countries with limited Internet access like China and in such cases, pinging commonly known host like www.google.com may have different results than in other countries because it may be blocked. We may get false positive results because users will generally have an access to the Internet, but they don\u0026rsquo;t have access only to several websites.","title":"Releasing ReactiveNetwork v. 0.11.0"},{"content":"I\u0026rsquo;ve recently released ReactiveNetwork library v. 0.10.0 for RxJava1.x and RxJava2.x. ReactiveNetwork is an Android library listening network connection state and Internet connectivity with RxJava Observables, which I\u0026rsquo;m developing for approximately 2 years now. In this version, I\u0026rsquo;ve done a few bug fixes and added new features for RxJava2.x version. Below, you can find the release notes: Release for RxJava1.x\n bumped RxJava1 version to 1.3.0 bumped test dependencies created Code of Conduct updated Kotlin version in sample apps added retrolambda to the sample Java app - issue #163 fixed behavior of network observing in disconnected state - issue #159  Release for RxJava2.x\n bumped RxJava2 version to 2.1.1 bumped test dependencies created Code of Conduct updated unit tests updated Kotlin version in sample apps added retrolambda to the sample Java app - issue #163 fixed behavior of network observing in disconnected state - issue #159 added the following methods to ReactiveNetwork class:  Single\u0026lt;Boolean\u0026gt; checkInternetConnectivity() Single\u0026lt;Boolean\u0026gt; checkInternetConnectivity(InternetObservingStrategy strategy) Single\u0026lt;Boolean\u0026gt; checkInternetConnectivity(String host, int port, int timeoutInMs) Single\u0026lt;Boolean\u0026gt; checkInternetConnectivity(String host, int port, int timeoutInMs, ErrorHandler errorHandler) Single\u0026lt;Boolean\u0026gt; checkInternetConnectivity(InternetObservingStrategy strategy, String host, int port, int timeoutInMs, ErrorHandler errorHandler)    You can add it to your project via Gradle: RxJava1.x:\ndependencies { compile \u0026#39;com.github.pwittchen:reactivenetwork:0.10.0\u0026#39; } RxJava2.x:\ndependencies { compile \u0026#39;com.github.pwittchen:reactivenetwork-rx2:0.10.0\u0026#39; } Now, in RxJava2.x version, we have the possibility to check Internet connectivity once without any pooling with new Single type. It may be helpful in the specific use-cases when we\u0026rsquo;re focusing on smaller battery usage, a smaller amount of data being sent over the network and lower number of network connections. I\u0026rsquo;m planning to publish more real life usage examples of this library in the future articles on this blog. I have plans for a few updates in the next version. If you\u0026rsquo;re interested in this project or you\u0026rsquo;re using it, please stay tuned and keep an eye on it at GitHub.\n","permalink":"https://wittchen.io/posts/releasing-reactivenetwork-v-0100/","summary":"I\u0026rsquo;ve recently released ReactiveNetwork library v. 0.10.0 for RxJava1.x and RxJava2.x. ReactiveNetwork is an Android library listening network connection state and Internet connectivity with RxJava Observables, which I\u0026rsquo;m developing for approximately 2 years now. In this version, I\u0026rsquo;ve done a few bug fixes and added new features for RxJava2.x version. Below, you can find the release notes: Release for RxJava1.x\n bumped RxJava1 version to 1.3.0 bumped test dependencies created Code of Conduct updated Kotlin version in sample apps added retrolambda to the sample Java app - issue #163 fixed behavior of network observing in disconnected state - issue #159  Release for RxJava2.","title":"Releasing ReactiveNetwork v. 0.10.0"},{"content":"I\u0026rsquo;ve recently released new version of prefser library for Android. In case you don\u0026rsquo;t know, it\u0026rsquo;s a wrapper for Android SharedPreferences with object serialization and RxJava Observables. This version has the new artifact, which has codebase migrated to RxJava2.x. As usual, I kept backward compatibility with RxJava1.x. You can find more details about the project at https://github.com/pwittchen/prefser. If you want to use it in your mobile project, you need the following dependencies in the build.gradle file:\ndependencies { compile \u0026#39;com.github.pwittchen:prefser-rx2:2.1.0\u0026#39; compile \u0026#39;io.reactivex:rxandroid:2.0.1\u0026#39; } Short release notes can be found at https://github.com/pwittchen/prefser/releases. This update was requested by at least two developers on GitHub and it\u0026rsquo;s my second most popular project, so I hope you\u0026rsquo;ll find it useful if you\u0026rsquo;re in the process of migrating from RxJava1.x to RxJava2.x. I still have 4 remaining RxJava1.x libraries waiting for the upgrade. If you want to perform any updates via Pull Requests, you\u0026rsquo;re more than welcome.\n","permalink":"https://wittchen.io/posts/release-of-prefser-210-with-rxjava2/","summary":"I\u0026rsquo;ve recently released new version of prefser library for Android. In case you don\u0026rsquo;t know, it\u0026rsquo;s a wrapper for Android SharedPreferences with object serialization and RxJava Observables. This version has the new artifact, which has codebase migrated to RxJava2.x. As usual, I kept backward compatibility with RxJava1.x. You can find more details about the project at https://github.com/pwittchen/prefser. If you want to use it in your mobile project, you need the following dependencies in the build.","title":"Release of prefser v. 2.1.0 with RxJava2 support"},{"content":"Introduction I\u0026rsquo;m still exploring reactive programming world and RxJava library. Recently, I\u0026rsquo;ve migrated a few of my open-source libraries from RxJava1 to RxJava2 and written yet another project in RxJava2 from the beginning. Nevertheless, I\u0026rsquo;m still learning this library and its concept. It\u0026rsquo;s very wide topic. In RxJava1 we simply had one reactive data type called Observable. In RxJava2, we have more data types like Observable, Flowable, Single, Maybe \u0026amp; Completable. In this article, I\u0026rsquo;ll briefly explain their purpose and tell you when to use which. The general idea behind these types is code semantics. We should tell consumer of our code, what he or she can expect from our API. Introducing more reactive data types can increase readability and stability of our code base.\nObservable Observable is basically the same Reactive type, we had in RxJava1. It doesn\u0026rsquo;t have backpressure support. We should use Observable, when:\n our data source emits less than 1000 items, so there\u0026rsquo;s practically no chance of occurring OutOfMemoryException we are working with GUI events, which usually don\u0026rsquo;t occurs very often and don\u0026rsquo;t have to be backpressured we are working with synchronous code on legacy JVM like Java 1.6 and we want to have streams features like in Java 8  Flowable Flowable type has very similar semantics to Observable. We can operate on Flowable streams with map, flatmap, filter, etc. in the same way as on the Observable type. The main difference is backpressure support. We should use Flowable when we are:\n dealing with 10k+ elements in a stream dealing with frequent events (e.g. sensors readings) reading/parsing files from disk reading values from database through JDBC using network/streaming I/O reading/writing to many blocking or pull-based data sources  To learn more, read note about Observable vs. Flowable on wiki of RxJava2 on GitHub.\nSingle Single reactive type has been redesigned from scratch in RxJava 2. It\u0026rsquo;s designed to handle just one event in an asynchronous manner. Good application of this type is single HTTP request when we expect just one response or error and nothing else. It can emit on onSuccess (single value) or onError event (error).\nMaybe Maybe represents a deferred computation and emission of a maybe value or exception. Maybe is a wrapper around an operation/event that may have either:\n A single result Error No result  Just take a look at the scheme. The interface of the main consumer of this type have the following methods: onSuccess, onError, onComplete. Conceptually, Maybe is a union of Single and Completable providing the means to capture an emission pattern where there could be 0 or 1 item or an error signaled by some reactive source.\nCompletable Completable type can be used when we have an Observable that we don\u0026rsquo;t care about the value resulted from the operation (result is void). It handles only onComplete and onError events. Conceptually, Maybe is a union of Single and Completable providing the means to capture an emission pattern where there could be 0 or 1 item or an error signalled by some reactive source. Read more about Maybe type on RxJava wiki.\nSummary As we can see, RxJava2 gives us new types, which can help explain our intentions more clearly. We can adjust concrete type to the specific situation. In addition, we can use backpressure for the data sources, which emit a lot of elements to make our projects more robust and stable. Last, but not least RxJava2 is compatible with Reactive Streams API, which is going to be part of the Java 9 specification.\nReferences  JavaDoc for RxJava2 What\u0026rsquo;s diffferent in 2.0? StackOverflow Thread: What is the difference between Observable, Completable and Single in RxJava? StackOverflow Thread: What\u0026rsquo;s the difference between RxJava2\u0026rsquo;s Maybe and Optional? Clearer RxJava intentions with Single and Completable Blog of Akarnokd (one of the main RxJava contributors) RxJava GitHub repository ReactiveX Reactive Programming with RxJava (O\u0026rsquo;Reilly Media Book) Reactive Streams Reactive Manifesto  ","permalink":"https://wittchen.io/posts/new-reactive-data-types-in-rxjava2/","summary":"Introduction I\u0026rsquo;m still exploring reactive programming world and RxJava library. Recently, I\u0026rsquo;ve migrated a few of my open-source libraries from RxJava1 to RxJava2 and written yet another project in RxJava2 from the beginning. Nevertheless, I\u0026rsquo;m still learning this library and its concept. It\u0026rsquo;s very wide topic. In RxJava1 we simply had one reactive data type called Observable. In RxJava2, we have more data types like Observable, Flowable, Single, Maybe \u0026amp; Completable.","title":"New reactive data types in RxJava2"},{"content":"Introduction In my company, there\u0026rsquo;s a concept of so-called \u0026ldquo;innovation day\u0026rdquo;. I have the possibility to \u0026ldquo;use\u0026rdquo; 1 innovation day per 2 development sprints. Last year, I used only 1 day due to the tight release schedule and a lot of work. Now, we are right after release, so I had time to take innovation day once again. I\u0026rsquo;ve decided to create YaaS Java SDK. If you don\u0026rsquo;t know what the YaaS is, check out my previous article about basic usage of YaaS proxy for the microservice. In a few words, it\u0026rsquo;s a proxy for the microservices with authorization \u0026amp; monitoring capabilities, which allows using other services available on the YaaS market. SDK created by me is really simple, was created in a short period of time and does not cover all features of the YaaS. This SDK allows performing authorized requests to the microservices hidden behind YaaS proxy. Tech stack used for this project is as follows:\n Java 8 Gradle OkHttp3 RxJava2 with Reactive Streams Gson  For unit testing I used:\n JUnit Truth Mockito  Quick start I wanted to make this SDK as simple as possible so the user can add YaaS integration to the Java application within just a few lines of code.\nYaaSProject project = new YaaSProject.Builder() .withClientId(\u0026#34;YOUR_CLIENT_ID\u0026#34;) .withClientSecret(\u0026#34;YOUR_CLIENT_SECRET\u0026#34;) .withOrganization(\u0026#34;YOUR_ORGANIZATION\u0026#34;) .withService(\u0026#34;YOUR_SERVICE\u0026#34;) .withVersion(\u0026#34;v1\u0026#34;) .withZone(Zone.EU) .build(); Client client = new YaaS(project); client.get(\u0026#34;path/to/your/endpoint\u0026#34;) .subscribe(response -\u0026gt; System.out.println(response.body().string())); As you can see, it looks really simple and straightforward. In the code snippet above, we\u0026rsquo;ve done the following thigs:\n Defined YaaS Project with YaaS service Created YaaS Client Performed HTTP GET request to the endpoint of the microservice asynchronously Received and printed body of the HTTP response from the microservice on the current thread as a String  All of that was done with Single type from RxJava2, which wraps Response type from OkHttp. We have a reactive stream of HTTP response here and we can do with it whatever RxJava2 offers us. Like filtering, mapping, throttling, combining it with other stream and so on. For more information, visit repository of the project at: https://github.com/pwittchen/yaas-java-sdk.\nFuture plans I have the following plans related to this project, which may be realized when I\u0026rsquo;ll have time:\n Add more unit tests (I didn\u0026rsquo;t have enough time to cover all cases) Add continuous integration Integrate YaaS with SAP Hybris Backoffice or SAP Hybris Core Platform through this SDK (PoC) YaaS Android SDK (copy YaaS Java SDK, downgrade it to Java 7 \u0026amp; optionally migrate to Kotlin and create sample mobile app) Optionally, add more features to YaaS Java SDK Optionally, deploy an artifact to Maven Central repository Optionally, create SDKs for different programming languages (especially those I don\u0026rsquo;t know well or I don\u0026rsquo;t know at all - just to learn them)  Links Interesting links related to this article:\n Source code of the YaaS Java SDK Basic usage of YaaS as a proxy for the microservice YaaS website SAP Hybris website  ","permalink":"https://wittchen.io/posts/introducing-yaas-java-sdk/","summary":"Introduction In my company, there\u0026rsquo;s a concept of so-called \u0026ldquo;innovation day\u0026rdquo;. I have the possibility to \u0026ldquo;use\u0026rdquo; 1 innovation day per 2 development sprints. Last year, I used only 1 day due to the tight release schedule and a lot of work. Now, we are right after release, so I had time to take innovation day once again. I\u0026rsquo;ve decided to create YaaS Java SDK. If you don\u0026rsquo;t know what the YaaS is, check out my previous article about basic usage of YaaS proxy for the microservice.","title":"Introducing YaaS Java SDK"},{"content":"I\u0026rsquo;ve recently released new version of Prefser. It\u0026rsquo;s a wrapper for Android SharedPreferences with object serialization and RxJava Observables. The new version number is 2.0.7. In this release, I performed mostly internal work not related to the external library API. Nevertheless, it\u0026rsquo;s important for the library development in the future. The following things were done:\n updated dependencies updated Gradle configuration migrated unit tests to Robolectric started executing unit tests on Travis CI added integration with codecov.io and coverage report extracted code related to accessors from the Prefser class (refactoring library internals)  Organizational work is done and now I\u0026rsquo;m ready for migration to RxJava2 in this project on a separate branch. I want to keep backward compatibility with RxJava1 as in my other projects. This update is planned for version 2.1.0. Stay tuned!\n","permalink":"https://wittchen.io/posts/prefser-207/","summary":"I\u0026rsquo;ve recently released new version of Prefser. It\u0026rsquo;s a wrapper for Android SharedPreferences with object serialization and RxJava Observables. The new version number is 2.0.7. In this release, I performed mostly internal work not related to the external library API. Nevertheless, it\u0026rsquo;s important for the library development in the future. The following things were done:\n updated dependencies updated Gradle configuration migrated unit tests to Robolectric started executing unit tests on Travis CI added integration with codecov.","title":"Releasing Prefser v. 2.0.7"},{"content":"In RxJava we have a few operators for joining Observables. The most common are:\n concat merge zip  Take a look at the documentation in these links. It has interactive marble diagrams showing how the operators work on the streams. You can move marbles along the lines and see how the output stream changes. It really helps to understand how it works. Code snippets in this article are based on RxJava 2.1.0 with JUnit 4.12 and Google Truth 0.32 for unit tests. Let\u0026rsquo;s say, we have the following Observables:\npublic Observable\u0026lt;String\u0026gt; emitNumbers() { return Observable.fromArray(\u0026#34;1\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;3\u0026#34;, \u0026#34;4\u0026#34;).delay(1, TimeUnit.SECONDS); } public Observable\u0026lt;String\u0026gt; emitLetters() { return Observable.fromArray(\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;); } We can merge them in the different ways.\nConcat Concat operator emits the emissions from two or more Observables without interleaving them. We can perform the following operation:\npublic Observable\u0026lt;String\u0026gt; concatStreams() { return Observable.concat(emitNumbers(), emitLetters()); } The easiest way to verify, how this operator works, is to create exploratory unit test as follows:\n@Test public void shouldConcatStreams() { // given  Observable\u0026lt;String\u0026gt; observable = playground.concatStreams(); List\u0026lt;String\u0026gt; expectedValues = Arrays.asList(\u0026#34;1\u0026#34;,\u0026#34;2\u0026#34;,\u0026#34;3\u0026#34;,\u0026#34;4\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;c\u0026#34;,\u0026#34;d\u0026#34;); List\u0026lt;String\u0026gt; joinedValues = new ArrayList\u0026lt;\u0026gt;(); // when  observable.blockingSubscribe(s -\u0026gt; joinedValues.add(s)); // then  assertThat(joinedValues).isEqualTo(expectedValues); } This operation can be represented graphically as well.\n 1 --- 2 --- 3 --- 4 | a --- b --- c --- d | | concat | \\|/ 1 -- 2 -- 3 -- 4 --- a -- b -- c -- d As we can see one stream is appended to another regardless of the execution time of both streams.\nMerge Merge operator combines multiple Observables into one by merging their emissions. Here we have a similar story, but changed operator:\npublic Observable\u0026lt;String\u0026gt; mergeStreams() { return Observable.merge(emitNumbers(), emitLetters()); } We are writing another unit test:\n@Test public void shouldMergeStreams() { // given  Observable\u0026lt;String\u0026gt; observable = playground.mergeStreams(); List\u0026lt;String\u0026gt; expectedValues = Arrays.asList(\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;c\u0026#34;,\u0026#34;d\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;2\u0026#34;,\u0026#34;3\u0026#34;,\u0026#34;4\u0026#34;); List\u0026lt;String\u0026gt; joinedValues = new ArrayList\u0026lt;\u0026gt;(); // when  observable.blockingSubscribe(s -\u0026gt; joinedValues.add(s)); // then  assertThat(joinedValues).isEqualTo(expectedValues); } Merge operation should look like that:\n 1 --- 2 --- 3 --- 4 | a --- b --- c --- d | | merge | \\|/ a -- b -- c -- d --- 1 -- 2 -- 3 -- 4 This operator doesn\u0026rsquo;t synchronize the streams and merges them as values are emitted. Numbers are emitted later than letters, so letters are placed in the beginning of the output stream. Try to manipulate marble on the interactive diagram on the reactivex.io website to see how it should work.\nZip The last operator, I\u0026rsquo;d like to discuss in this article is \u0026ldquo;Zip\u0026rdquo; operator. Zip combines the emissions of multiple Observables together via a specified function and emit single items for each combination based on the results of this function. In simple words, it waits until many observables are emitted and then combines them into a pair (or triple Observable, etc. in the case or more Observables). Now, we need to create a function, which will transform our streams and return combined stream.\npublic Observable\u0026lt;String\u0026gt; zipStreams() { return Observable.zip(emitNumbers(), emitLetters(), (s1, s2) -\u0026gt; String.format(\u0026#34;(%s,%s)\u0026#34;, s1, s2)); } Next, we can verify it with test as usual:\n@Test public void shouldZipStreams() { // given  Observable\u0026lt;String\u0026gt; observable = playground.zipStreams(); List\u0026lt;String\u0026gt; expectedValues = Arrays.asList(\u0026#34;(1,a)\u0026#34;,\u0026#34;(2,b)\u0026#34;,\u0026#34;(3,c)\u0026#34;,\u0026#34;(4,d)\u0026#34;); List\u0026lt;String\u0026gt; joinedValues = new ArrayList\u0026lt;\u0026gt;(); // when  observable.blockingSubscribe(s -\u0026gt; joinedValues.add(s)); // then  assertThat(joinedValues).isEqualTo(expectedValues); } and it can be represented graphically like that:\n 1 --- 2 --- 3 --- 4 | a --- b --- c --- d | | zip | \\|/ (1,a) -- (2,b) --- (3,c) -- (4,d) Now, we have pairs of merged streams.\nSummary Of course, RxJava is complicated library and these methods are not covering all possibilities of merging and combining the Observable streams. Neverhteless, examples in this article are quite basic and may help you to understand how mentioned operators work. After that we can apply the best operator to appropriate situation.\n Reference thread on StackOverflow: http://stackoverflow.com/questions/28843318/android-rxjava-joining-lists\n","permalink":"https://wittchen.io/posts/joining-lists-of-rxjava-observables/","summary":"In RxJava we have a few operators for joining Observables. The most common are:\n concat merge zip  Take a look at the documentation in these links. It has interactive marble diagrams showing how the operators work on the streams. You can move marbles along the lines and see how the output stream changes. It really helps to understand how it works. Code snippets in this article are based on RxJava 2.","title":"Joining lists of RxJava Observables"},{"content":"Sometimes, we may need to emit different RxJava Observables depending on the specific condition dynamically. Moreover, it\u0026rsquo;s good to do it right without breaking a chain (stream of Observables). We want to combine different Observables together and do not want to nest one subscription inside another subscription because this will lead us to \u0026ldquo;subscription hell\u0026rdquo; similar to \u0026ldquo;callback hell\u0026rdquo;. Luckily RxJava has mechanisms to deal with such problems. In this article, I\u0026rsquo;m basing my examples on RxJava 2.1.0. Let\u0026rsquo;s say we have two Observables:\npublic Observable\u0026lt;String\u0026gt; trueObservable() { return Observable.fromCallable(() -\u0026gt; \u0026#34;trueObservable\u0026#34;); } public Observable\u0026lt;String\u0026gt; falseObservable() { return Observable.fromCallable(() -\u0026gt; \u0026#34;falseObservable\u0026#34;); } and we have another Observable wrapping Boolean value:\npublic Observable\u0026lt;Boolean\u0026gt; createCondition(boolean returnedValue) { return Observable.fromCallable(() -\u0026gt; returnedValue); } This Observable can emit true or false depending on the provided parameter. What we want to do is to:\n emit trueObservable() when createCondition(boolean) returns true emit falseObservable() when createCondition(boolean) returns false emit falseObservable() when createCondition(boolean) emits empty Observable (default behaviour)  We can do it in the following way:\npublic Observable\u0026lt;String\u0026gt; emitTrueObservableDynamically() { return createCondition(true) .defaultIfEmpty(false) .flatMap(condition -\u0026gt; condition ? trueObservable() : falseObservable()); } In such case, this method will emit trueObservable(). When we change parameter of the createCondition(boolean) method to false, Observable will emit falseObservable(). When we replace createCondition(boolean) method with Observable.empty(), method will return falseObservable() by default. As we can see, it\u0026rsquo;s easily solved with flatMap and defaultIfEmpty operators. This is quite useful technique, which we can apply to reactive applications to control our flow without breaking the chain. Please note, it\u0026rsquo;s just an example you can create more complicated constructions and handle more complicated types than just boolean and more than two use cases.\n Reference thread for this article on StackOverflow: http://stackoverflow.com/questions/34195218/rxjava-exequte-observable-only-if-first-was-empty.\n","permalink":"https://wittchen.io/posts/emitting-different-rxjava-observables-depending-on-the-condition-with-flatmap/","summary":"Sometimes, we may need to emit different RxJava Observables depending on the specific condition dynamically. Moreover, it\u0026rsquo;s good to do it right without breaking a chain (stream of Observables). We want to combine different Observables together and do not want to nest one subscription inside another subscription because this will lead us to \u0026ldquo;subscription hell\u0026rdquo; similar to \u0026ldquo;callback hell\u0026rdquo;. Luckily RxJava has mechanisms to deal with such problems. In this article, I\u0026rsquo;m basing my examples on RxJava 2.","title":"Emitting different observables conditionally"},{"content":"Introduction I\u0026rsquo;ve recently read a book about Test Driven Development by Kent Beck. It\u0026rsquo;s really good, presents the importance of the TDD and shows how to make a life of the software developer easier. In the TDD we follow red-green-refactor process in which we create a failing unit test, then we fix it and refactor it to make code-base better. There\u0026rsquo;s no golden rule when to refactor or how to refactor code and each project is different, but there are a few principles we may follow when we want to improve our projects through refactoring.\nFinding similarities and duplications One of the common code smells is duplication. We should search for the following patterns:\n Two similar loops » try to merge them into one loop Two similar instructions inside conditional statements » try to unify operations and get rid of the \u0026ldquo;if\u0026rdquo; statement Two similar methods » try to unify them and remove one of them Two similar classes » try to unify them and remove one of them and so on\u0026hellip;  Perform these operations carefully. If something goes wrong, go one step backward. Sometimes it may be impossible to remove all duplications.\nIsolating changes Before we start performing changes, it\u0026rsquo;s good to isolate a piece of code. We can move it e.g. to separate method, perform changes and then inline our method. That could help us avoid breaking the whole system.\nData migration If we want to change the meaning of the data, we can temporarily duplicate them, perform changes, update interfaces and then remove original code.\nMethod extraction If a method in our class is too big (according to Clean Code, \u0026ldquo;too big\u0026rdquo; is longer than 20 lines), we should find code doing specialized mini-task and extract part of it to a separate method. In IntelliJ IDEA we can use Ctrl+Alt+M shortcut or ⌘+Alt+M on Mac for that.\nMethod inlining Sometimes, we\u0026rsquo;re extracting too many pieces of code to separate methods, what may decrease code readability. If the code inside the method is really simple, so it could be written in a single line or optionally in two lines, we may think about inlining this method. To do so, we should remove method and place code directly in the place where it\u0026rsquo;s called. To perform inlining in IntelliJ, we can use Ctrl+Alt+N shortcut or ⌘+Alt+N on Mac.\nInterface extraction When we want to create additional implementations of the operations, which already exists in our code-base, we may extract these operations into the interface. IntelliJ IDEA also has support for that. I\u0026rsquo;m not sure if there\u0026rsquo;s a shortcut, but you can use Ctrl+Shit+A shortcut or ⌘+Shift+A on Mac to open window with operation search and then type \u0026ldquo;extract interface\u0026rdquo;. It should work.\nMoving method It may happen, that our class or interface is becoming too big or it has methods, which are not directly related to this class. In such case, we may simply move one method or a few methods to another, more appropriate class or create a separate class or interface for them.\nObject-method We may encounter a situation when a specific method has too many parameters. In such case, we may consider creating Object-method. It\u0026rsquo;s some kind of data class, which contains attributes the same as method parameters. It will help us to pass data in our system in a more readable way. We can also connect this solution with a Builder software design pattern.\nAdding parameter During the time, the business logic of our system is getting bigger and one of our methods need to be extended. In such case, we can add another parameter to it. We may also consider creating another, similar method with just one more parameter. When we\u0026rsquo;re providing API or framework for other developers, we have to remember about proper \u0026ldquo;deprecated\u0026rdquo; annotations.\nMoving parameter from method to the constructor It may happen that we want to move a parameter from the method to a constructor to simplify the logic of the project. In order to that, we can move local variable to a class variable (in IntelliJ IDEA: Ctrl+Alt+V shortcut or ⌘+Alt+V on Mac) and then create constructor with this variable (Alt+Insert or ⌘+N on Mac).\nSummary As we can see, there are a few principles, which we may apply during code refactoring to make our project better. Moreover, most of them are supported by IntelliJ IDEA, which is great IDE. If you\u0026rsquo;re programming in another language than Java and want to have refactoring tools, you should check JetBrains products. Nevertheless, there\u0026rsquo;s no golden rule of refactoring. Sometimes it\u0026rsquo;s better to leave the code as it is. Especially if code-base is huge, the project is in production and there are no unit tests. If you want to know more about principles from this article, read Test Driven Development book by Kent Beck. Probably there are more principles than these described in this article. We should perform refactoring carefully and we need to remember about tests. Everything depends on the concrete project and our situation.\n","permalink":"https://wittchen.io/posts/basic-code-refactoring-principles/","summary":"Introduction I\u0026rsquo;ve recently read a book about Test Driven Development by Kent Beck. It\u0026rsquo;s really good, presents the importance of the TDD and shows how to make a life of the software developer easier. In the TDD we follow red-green-refactor process in which we create a failing unit test, then we fix it and refactor it to make code-base better. There\u0026rsquo;s no golden rule when to refactor or how to refactor code and each project is different, but there are a few principles we may follow when we want to improve our projects through refactoring.","title":"Basic code refactoring principles"},{"content":"While developing open-source projects it\u0026rsquo;s important to monitor usage of them. Having that information we know on which projects we should concentrate the most and which are becoming more popular. In this short article, I\u0026rsquo;ll present you two tools, which can help you with that.\nGitHub On GitHub, each project has \u0026ldquo;Traffic\u0026rdquo; tab. After clicking on it, we can see how many visitors and unique visitors we have, we can also check how many project clones and unique clones were performed (including CI servers). Moreover, we can see referring sites for our projects. It\u0026rsquo;s useful information because we can check how people gather information about our project.\nSonatype GitHub stats can be used for any type of project for any language. When we\u0026rsquo;re developing Java or JVM library and we publish it on SonaType, we can also use oss.sonatype.org website for monitoring usage of our libraries. It provides us quite interesting information, which actually tells us if anyone is using our library.\nIn the \u0026ldquo;Central Statistics\u0026rdquo; section, we can select GroupId and also ArtifactId. We can see accumulated information about downloads of all our projects in time and check, which project is the most popular. We can also view downloads from unique IPs. What I found interesting here is the fact that one of my projects called prefser is quite popular and people really started using it in their projects! Approximately 47% of downloads of all my projects are downloads of that single library. Nevertheless, the last release of this library (v. 2.0.6) was almost one year ago. It encouraged me to put more effort into this project and make it better. I actually started working on it again and planned new releases. Trust of many people is a huge motivation factor \u0026amp; honor for me. Do you know any more methods of measuring usage of your projects? Maybe for different technologies than Java? Share your experiences in comments :).\n","permalink":"https://wittchen.io/posts/monitoring-usage-of-oss/","summary":"While developing open-source projects it\u0026rsquo;s important to monitor usage of them. Having that information we know on which projects we should concentrate the most and which are becoming more popular. In this short article, I\u0026rsquo;ll present you two tools, which can help you with that.\nGitHub On GitHub, each project has \u0026ldquo;Traffic\u0026rdquo; tab. After clicking on it, we can see how many visitors and unique visitors we have, we can also check how many project clones and unique clones were performed (including CI servers).","title":"Monitoring usage of open-source projects"},{"content":"Introduction The company, where I currently work - SAP Hybris is developing a project called YaaS, which is an abbreviation of Hybris as a Service. Unfortunately, this article is not sponsored yet :). What a pity :(. I just like to understand many things \u0026amp; how they work to see the bigger picture. Moreover, company strategy is to leverage YaaS and search for the new possibilities and use cases of this project. There are situations where delegating some work to a separate service makes sense so this knowledge may be useful even when we\u0026rsquo;re developing the monolithic enterprise applications. That\u0026rsquo;s why I wrote this article. I work in a completely different project - Enterprise Commerce Platform, where I\u0026rsquo;m the part of the Backoffice team. As you can read on the official website, YaaS is a microservices ecosystem helping businesses to rapidly augment and build new, highly flexible solutions. It\u0026rsquo;s kind of marketing statement, which business people may like. Nevertheless, for developers, it\u0026rsquo;s just a bunch of buzzwords, which does not help you to understand this project. One of the aims of this article is to explain it in a simple and clear way.  From the technical point of view, YaaS gives you the following possibilities:\n it can be a proxy for your microservice, which can be deployed anywhere it gives you separate proxy servers for EU and US, which you can use depending on the server or user location it provides you a domain like api.eu.yaas.io/yourorganization/yourservice/ it provides secured connection it gives a mechanism, which allows you to secure endpoints of your microservice via dynamically generated token it gives you the possibility to manage access to your service for advanced use cases with features like clients, roles, etc. it gives you monitoring possibilities it allows you to perform versioning of your API it allows you to integrate other services/packages from YaaS Market with your service it gives you web interface called YaaS Builder, which you can use for managing your projects and organization  YaaS is NOT:\n the hosting platform like Heroku or AWS - you need to have another place where you can deploy your service (like Heroku or whatever) the part of the Core Hybris Platform - it\u0026rsquo;s completely separate project, but it can be integrated with the Hybris Platform  The official website of the project is: www.yaas.io. In this article, I won\u0026rsquo;t explain all the features of YaaS. I will simply show you:\n how to create a simple proxy for your microservice how to secure endpoint of your microservice how to access secured endpoint of your microservice  Maybe I\u0026rsquo;ll explain more features in the separate articles in the future.\nCreating a simple proxy for the microservice We need to do the following steps:\n Go to https://builder.yaas.io Create an account \u0026amp; log in Create an organization Create a project Within the project create a service Provide address to your service Provide API version (e.g. v1) Deploy service Right now, your service is deployed, but not accessible yet Create a Client and assign it to your service Now you should be able to access your service at: https://api.eu.yaas.io/orgranization/service/v1  Below you can see a screenshot from service configuration inside the YaaS Builder.\nSecuring the endpoint of the microservice We have created our service. Now, we want to secure its endpoint. To do so, we can create Authorization Rule from the Service configuration inside YaaS Builder.\nWe can define methods of the HTTP request, endpoint address, and other parameters. When we\u0026rsquo;re done, we can proceed to more tricky part. Authorization procedure of the microservice endpoint is presented in the scheme below.\nFirst, we need to obtain Bearer ID. To do so, we need to perform HTTP request with Client ID and Client Secret. We can do it from terminal via curl:\ncurl -X POST -i -H \u0026#34;Content-Type: application/x-www-form-urlencoded\u0026#34; -d \u0026#34;grant_type=client_credentials\u0026amp;client_id=YOUR_CLIENT_ID\u0026amp;client_secret=YOUR_CLIENT_SECRET\u0026#34; https://api.eu.yaas.io/hybris/oauth2/v1/token Then, we\u0026rsquo;ll receive a response like that:\n{\u0026#34;token_type\u0026#34;:\u0026#34;Bearer\u0026#34;,\u0026#34;access_token\u0026#34;:\u0026#34;023-018f03da-cdb7-4710-a4cf-70f89e23003f\u0026#34;,\u0026#34;expires_in\u0026#34;:3600,\u0026#34;scope\u0026#34;:\u0026#34;hybris.tenant=pwtest\u0026#34;} and we can make an authorized call to our microservice:\ncurl -X POST -i -H \u0026#34;Authorization: Bearer 023-018f03da-cdb7-4710-a4cf-70f89e23003f\u0026#34; -H \u0026#34;Content-Type: application/json\u0026#34; -d \u0026#34;\u0026#34; https://api.eu.yaas.io/pwittchen/test/v1/endpoint after that, we should receive a response from the microservice. Note, that Bearer ID will be valid for the particular amount of time. Hint #1: To make calls more readable in the article, I split them into lines. If you\u0026rsquo;re making a real call it\u0026rsquo;s better to have whole instruction in a single line. Hint #2: You can get Client Secret and Client ID from the YaaS Builder while editing your Client.\nSummary As we could see, creating a microservice proxy and securing the endpoint is not so complicated, but it\u0026rsquo;s not straightforward as well. It requires some knowledge about YaaS and its design. Using this approach won\u0026rsquo;t be a good idea every time, but I think there are use cases when it can be useful. Especially, when we care about monitoring \u0026amp; security and when we want to have unified \u0026amp; controlled access to our services. Here are a few of my ideas of delegating work to the microservice from the monolithic enterprise commerce application:\n file or image storage backups of the data classification of the products - e.g. we can delegate images to the external service, which will use machine learning and neural networks to classify products by colors or by something else long running operations \u0026amp; queues - e.g. we can delegate such things to the separate microservice to relieve CPU \u0026amp; Memory of the server, where core system is running and simply receive push notification with final result of the operation from the microservice when the work is done sending e-mails and other types of notifications and more\u0026hellip; (if you have your own ideas - share them in comments!)  I think the basic idea could be the distribution of computations to the different servers, what may extend capabilities of the core system, make it faster, lighter and more stable. In addition, it should make work of developers easier and more joyful because they could work on the smaller parts of the system, which have a clearly specified goal and smaller codebase, which is easier to manage.\n","permalink":"https://wittchen.io/posts/yaas-as-a-proxy-for-microservice/","summary":"Introduction The company, where I currently work - SAP Hybris is developing a project called YaaS, which is an abbreviation of Hybris as a Service. Unfortunately, this article is not sponsored yet :). What a pity :(. I just like to understand many things \u0026amp; how they work to see the bigger picture. Moreover, company strategy is to leverage YaaS and search for the new possibilities and use cases of this project.","title":"Basic usage of YaaS as a proxy for the microservice"},{"content":"During F8 Facebook Developers Conference 2017, Facebook revealed its plans for the nearest years. Among different stuff, keynote from the day 2 was especially interesting for me. Speakers talked about connectivity projects increasing access to the Internet across the globe, different methods of human-computer interaction, virtual reality, and last, but not least Brain-Computer Interface.\nIt\u0026rsquo;s super-interesting for me, because 4 years ago I wrote Master Thesis about Brain-Computer Interface for Mobile Devices at my university \u0026amp; published a few short articles about Brain-Computer Interface on this blog. You can also download my EEG Analyzer Android app from Google Play Store. I also wrote another app called EEG Controller for communicating with the external world with brain and optionally with eye blinks. It wasn\u0026rsquo;t published. Maybe I\u0026rsquo;ll enhance and publish it in the future or I\u0026rsquo;ll create a better app for the similar thing. Of course, my apps are much simpler \u0026amp; less advanced than the Facebook plans, but still, both of them are aiming to solve similar problems.\nFacebook is planning to hire 60 engineers and PhDs to develop new Brain-Computer Interface. If I understood them correctly, they\u0026rsquo;re planning to create non-invasive hardware \u0026amp; software, which will be as much accurate as invasive hardware. In simple words it means, they\u0026rsquo;re not going to create implants for the brain, but some kind of wearable device, which will have the same (or better) accuracy as the brain implants, which exists today. Definitely, it\u0026rsquo;s not an easy task. If you are skeptical about such brain technologies, I can tell you that technology available today is far away from \u0026ldquo;reading the mind or thoughts\u0026rdquo;. It rather analyzes \u0026amp; interprets brain waves and signals. It allows to determine, if we are concentrated, relaxed, sleepy, tired, etc. With more precise tools, we can simply gather more data and information, which will hopefully allow developing tools, which are capable of \u0026ldquo;typing with the brain\u0026rdquo;. Nowadays, consumer wearable electroencephalographs like NeuroSky MindWave or Muse allows to read rather \u0026ldquo;binary\u0026rdquo; data like: you\u0026rsquo;re concentrated or not \u0026amp; you\u0026rsquo;re relaxed or not. In addition, they can give you such results in percentage value. It can be used for developing simple communication apps, which can allow people to communicate with just a brain, but using them may be not so convenient, slow or inefficient. Despite these disadvantages, for people with diseases like LIS, it may be the only hope for communicating with the world.\nI\u0026rsquo;m keeping fingers crossed for the Facebook BCI project! Moreover, I\u0026rsquo;m planning to extend my own work and create more complex BCI solutions in the future. Right now, I had these ideas only in my head. I\u0026rsquo;m also not going to compete with Facebook because I don\u0026rsquo;t have knowledge or resources (at least not yet) to develop my own BCI hardware. Not to mention about 60 engineers, which are far smarter \u0026amp; more experienced than me. I have an idea about using hardware, which already exists on the market and to write better software for using it because a lot of solutions available now are quite poor in my opinion. It may leverage the potential of BCI in daily usage and make technologies like EEG more available \u0026amp; affordable for the people who need it for research or medical solutions. Having in mind the fact that Facebook is putting a lot of serious effort in BCI technology, I\u0026rsquo;m becoming more convinced that this technology may the future and the way to go.\n","permalink":"https://wittchen.io/posts/facebook-is-making-bci/","summary":"During F8 Facebook Developers Conference 2017, Facebook revealed its plans for the nearest years. Among different stuff, keynote from the day 2 was especially interesting for me. Speakers talked about connectivity projects increasing access to the Internet across the globe, different methods of human-computer interaction, virtual reality, and last, but not least Brain-Computer Interface.\nIt\u0026rsquo;s super-interesting for me, because 4 years ago I wrote Master Thesis about Brain-Computer Interface for Mobile Devices at my university \u0026amp; published a few short articles about Brain-Computer Interface on this blog.","title":"Facebook is making solutions to talk from the brain – so do I"},{"content":"Introduction I\u0026rsquo;ve been using Evernote for some time for taking longer notes, but it started to annoy me a little bit. The main drawback is lack of the Linux desktop app. I\u0026rsquo;m using this app on Android phone, Macbook (at work) and on Linux (at home). There are community apps like NixNote2, which is nice, but in my opinion it\u0026rsquo;s not good enough. Moreover, Evernote seems to have too many features, which distract me and I don\u0026rsquo;t really use most of them. A few of these features may be really helpful for some use cases, but not for mine. I need simpler \u0026amp; cleaner tool for taking basic personal notes, which is available on all operating systems. I\u0026rsquo;ve started searching for Evernote alternatives. Below you can find my types worth checking.\nGoogle Keep It\u0026rsquo;s nice \u0026amp; quite popular tool from Google with Android app. I started using it before Evernote. It doesn\u0026rsquo;t have dedicated desktop app, but it has Chrome extension, which behaves almost like a desktop app. It\u0026rsquo;s great for short \u0026amp; quick text notes, simple hand drawing notes, notes with pictures \u0026amp; even simple voice notes. It\u0026rsquo;s some kind of replacement or extension for physical yellow sticky notes. When I want to note something like one sentence or keyword quickly and I have only my phone with me, it\u0026rsquo;s perfect choice. Nevertheless, it\u0026rsquo;s not so good for a longer notes. Link: https://keep.google.com\nSimplenote This app is nice, clean \u0026amp; elegant. Moreover, it has desktop apps for all popular destkop \u0026amp; mobile operating systems: Windows, Linux, macOS, Android \u0026amp; iOS. It has less features than Evernote, but it\u0026rsquo;s sufficient for me. In addition, it easily synchronizes across all devices and allows you to export notes into single *.zip file. It doesn\u0026rsquo;t have folders/categories, but it has tags, which may be helpful during organizing your stuff. This is my strong personal candidate to replace Evernote. This app is developed by Automattic, a company behind Wordpress \u0026amp; other nice tools. Link: https://simplenote.com\nBoostnote Boostnote is another interesting tool worth checking out. It\u0026rsquo;s open-source and works on Linux, Windows \u0026amp; macOS. Unfortunately, it doesn\u0026rsquo;t have mobile \u0026amp; web apps yet. This tool is good for collecting code snippets and markdown notes, what makes it great for software developers. Moreover, you can attach any storage on your disk to this tool and fully control it. For example, you can add storage in your Dropbox account and synchronize it across devices. You can also attach it to your private Git repository and track changes in the notes. Nevertheless it requires additional work like committing \u0026amp; pushing changes to repository. This tool is under development. Maybe it wouldn\u0026rsquo;t be perfect replacement for Evernote, but it definitely looks promising. Link: https://boostnote.io\nSummary As we can see there are many tools for taking notes. Sometimes, I also use regular physical notepad, sticky notes \u0026amp; pen, which are perfect when power goes down or you want to have a break from the machines. We don\u0026rsquo;t have to be sticked to one tool forever.\n","permalink":"https://wittchen.io/posts/3-alternatives-to-evernote/","summary":"Introduction I\u0026rsquo;ve been using Evernote for some time for taking longer notes, but it started to annoy me a little bit. The main drawback is lack of the Linux desktop app. I\u0026rsquo;m using this app on Android phone, Macbook (at work) and on Linux (at home). There are community apps like NixNote2, which is nice, but in my opinion it\u0026rsquo;s not good enough. Moreover, Evernote seems to have too many features, which distract me and I don\u0026rsquo;t really use most of them.","title":"3 Alternatives to Evernote"},{"content":"Introduction Some time ago, I decided to learn Vim. A lot of people are afraid of this editor and they usually don\u0026rsquo;t want to know anything about it or just learn how to quit it. In my opinion, it\u0026rsquo;s good to learn it because after mastering the basics, we can work very efficiently. After some time of usage, we may even replace editors like Atom or Sublime Text with Vim. Moreover, Vim is default editor for a few Unix tools like Git, so it\u0026rsquo;s good to know how to use it when we accidentally open it. In addition, sometimes we have an access only to the terminal (e.g. via ssh) and we need to perform a task on the remote server, so we don\u0026rsquo;t have any possibility to use editors with GUI. In such cases, Vim is a perfect solution. Last, but not least - if you want to be a real h4x0r, you should know it (or at least its basics) ;-).\nLearning basics Vim is not an intuitive text editor like many others. It needs to be learned. Just like a programming language. There are a few basic things, which you need to know to use Vim:\n Opening editor: just type vi or vi filename to open file. Basic modes: interactive (enter it with i key), visual (enter it via v key), read only (default - go back to this mode via Esc key). You can also use Esc key to cancel any kind of operation. Navigation: to navigate in the document, we need to be in read only mode and instead of arrow keys, we use h (left), j (down), k (up), l (right). Note that these keys are close to each other in a row on the keyboard. Such setup may be even more comfortable than arrow keys. Saving changes in file: to save file, type :w. Quiting: To quit vim, type :q. Quiting without saving: :q!. Quiting with saving: :wq.  In my opinion, the best way to learn Vim basics is to use vimtutor application. Just open terminal and type vimtutor. It will open a text file with Vim tutorial inside Vim and you can follow instructions in this file to learn how to use this editor. You can also use other resources like:\n http://www.openvim.com/ (interactive on-line tutorial) https://linuxconfig.org/vim-tutorial http://www.nuxified.org/vi_survival_guide/ https://github.com/mhinz/vim-galore and many others  Efficient navigation and file editing Thanks to various key bindings, Vim allows you to navigate \u0026amp; edit files very quickly. E.g. you can jump between words with w key. You can also combine different key bindings. E.g. d is for deleting text. When you combine d \u0026amp; w (dw) you can delete single word. This \u0026ldquo;Vim language\u0026rdquo; can be a subject of the separate article, so I won\u0026rsquo;t explain it in details in this article. It\u0026rsquo;s good to go through tutorials and learn this editor as you use it.\nPersonal configuration You can customize Vim and keep its configuration in .vimrc file located in your home directory. Below, you can find my configuration with comments. I copied it from somewhere and modified a little bit.\nset clipboard=unnamed \u0026#34;Enable clipboard filetype plugin indent on \u0026#34;Enable indent plugin syntax enable \u0026#34;Enable syntax coloring syntax on \u0026#34;Turn syntax coloring on :color desert \u0026#34;Set desert syntax coloring set nocompatible \u0026#34;Allow Vim-only settings even if they break vi keybindings. :filetype on \u0026#34;Enable filetype detection set incsearch \u0026#34;Find as you type set ignorecase \u0026#34;Ignore case in search set scrolloff=5 \u0026#34;Number of lines to keep above/below cursor set smartcase \u0026#34;Only ignore case when all letters are lowercase set number \u0026#34;Show line numbers set wildmode=longest,list \u0026#34;Complete longest string, then list alternatives set fileformats=unix \u0026#34;Use Unix line endings set smartindent \u0026#34;Smart autoindenting on new line set smarttab \u0026#34;Respect space/tab settings set history=300 \u0026#34;Number of commands to remember set backspace=2 \u0026#34;Use standard backspace behavior set hlsearch \u0026#34;Highlight matches in search set ruler \u0026#34;Show line and column number set formatoptions=1 \u0026#34;Don\u0026#39;t wrap text after a one-letter word set linebreak \u0026#34;Break lines when appropriate set autoindent \u0026#34;Auto indent based on previous line \u0026#34;Prepare tab/space indent settings set tabstop=4 \u0026#34;Set Tab width to 4 set shiftwidth=4 \u0026#34;Indents will have width of 4 set softtabstop=4 \u0026#34;Set the number of columns for tab set expandtab \u0026#34;Expand tabs to spaces execute pathogen#infect() Plugin manager We can enhance Vim by adding additional plugins. There are a few plugin managers for Vim. I personally like pathogen because it\u0026rsquo;s quite easy to install and easy to use.\nUseful plugins I use 3 plugins right now:\n nerdtree (adds sidebar with list of files and directories) tagbar (adds overview of the currently edited file with navigation like list of methods, attributes etc. and works for different programming languages) ctrlp (adds very fast file search)  Summary Below, you can see my setup with nerdtree \u0026amp; tagbar opened. As you can see, Vim can be very powerful and customizable editor \u0026amp; can make our work more efficient. It has a lot of features. Nevertheless it\u0026rsquo;s not easy to learn and we have to spend some time to learn how to use it. I think, the best approach is to learn the basics, start using it and then learn rest of the stuff we need during the time. Of course, it has drawbacks like lack of default debugger, steep learning curve and so on. On the other hand, I still think it\u0026rsquo;s worth to learn it. There are also languages with command line debuggers, so you can combine Vim with Tmux and have everything you need on one screen. I hope you\u0026rsquo;ll find my tips helpful and you\u0026rsquo;ll be encouraged to give this editor a try. It\u0026rsquo;s definitely not a tool for newbies, but I suppose you are not one of them ;-). ","permalink":"https://wittchen.io/posts/transform-vim-into-efficient-ide/","summary":"Introduction Some time ago, I decided to learn Vim. A lot of people are afraid of this editor and they usually don\u0026rsquo;t want to know anything about it or just learn how to quit it. In my opinion, it\u0026rsquo;s good to learn it because after mastering the basics, we can work very efficiently. After some time of usage, we may even replace editors like Atom or Sublime Text with Vim. Moreover, Vim is default editor for a few Unix tools like Git, so it\u0026rsquo;s good to know how to use it when we accidentally open it.","title":"Transform Vim into efficient IDE"},{"content":"This time, I upgraded my another reactive Android open-source project called ReactiveNetwork to RxJava2.x. Many thanks goes to @tushar-acharya who performed initial migration to the newer version of RxJava. During migration, I\u0026rsquo;ve also created new package rx2 to avoid potential import conflicts during migration inside Android apps. Besides migration, I\u0026rsquo;ve updated sample apps, documentation \u0026amp; JavaDocs on Github pages. You can still use RxJava1.x version and it\u0026rsquo;s available on the branch with that name. To use brand new ReactiveNetwork compatible with RxJava2.x, add the following dependency to your build.gradle file:\ndependencies { compile \u0026#39;com.github.pwittchen:reactivenetwork-rx2:0.9.0\u0026#39; } If you still want or need to use RxJava1.x, use the following dependency:\ndependencies { compile \u0026#39;com.github.pwittchen:reactivenetwork:0.9.0\u0026#39; } New updates and bug-fixes are on the way. Right now I have a few issues in the project backlog. Feel free to contribute to this project and report new issues! Any constructive feedback will be appreciated.\n","permalink":"https://wittchen.io/posts/reactivenetwork-090-rxjava2/","summary":"This time, I upgraded my another reactive Android open-source project called ReactiveNetwork to RxJava2.x. Many thanks goes to @tushar-acharya who performed initial migration to the newer version of RxJava. During migration, I\u0026rsquo;ve also created new package rx2 to avoid potential import conflicts during migration inside Android apps. Besides migration, I\u0026rsquo;ve updated sample apps, documentation \u0026amp; JavaDocs on Github pages. You can still use RxJava1.x version and it\u0026rsquo;s available on the branch with that name.","title":"ReactiveNetwork - release v. 0.9.0 with RxJava2.x support"},{"content":"I just released tmux-auto-pane. It\u0026rsquo;s a tiny shell script for creating pre-defined tile layouts in Tmux on Linux with xdotool. In our workflow, we often have some pre-defined pane configurations in a terminal. The project called tmux-auto-pane helps to automate that process. It can save us some time and make us a bit more productive. We can call tmux-auto-pane with one of the following parameters:\n--help | -h showing help --1l1r one left, one right --1l2r one left, two right --2l1r two left, one right --1u1d one up, one down --1u2d on up, two down --2u1d two up, one down --4tiles 4 tiles, 1 in each corner for example tmux-auto-pane --4tiles will generate such layout:\n ____ ____ | | | |____|____| | | | |____|____| we can also have the following layouts:\n 1l1r 1l2r 2l1r 1u1d 1u2d 2u1d ____ ____ ____ ____ ____ ____ _________ _________ ____ ____ | | | | | | | | | | | | | | | | | | | | |____| |____| | |_________| |____ ____| |____|____| | | | | | | | | | | | | | | | | |____|____| |____|____| |____|____| |_________| |____|____| |_________| Script can be installed via wget:\nsh -c \u0026#34;$(wget https://raw.githubusercontent.com/pwittchen/tmux-auto-pane/master/install.sh -O -)\u0026#34; or via curl:\nsh -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/pwittchen/tmux-auto-pane/master/install.sh)\u0026#34; Due to the fact, that tmux-auto-pane uses xdotool under the hood, unfortunately it works only with Linux right now. It can be improved in the future to work with macOS as well. Source of the project can be found at https://github.com/pwittchen/tmux-auto-pane. This project could be extended to start specific applications in each pane. Maybe, I\u0026rsquo;ll improve it in the future, so users could parametrize their custom applications. I hope Tmux \u0026amp; Linux users will find it useful :).\n","permalink":"https://wittchen.io/posts/tmux-auto-pane/","summary":"I just released tmux-auto-pane. It\u0026rsquo;s a tiny shell script for creating pre-defined tile layouts in Tmux on Linux with xdotool. In our workflow, we often have some pre-defined pane configurations in a terminal. The project called tmux-auto-pane helps to automate that process. It can save us some time and make us a bit more productive. We can call tmux-auto-pane with one of the following parameters:\n--help | -h showing help --1l1r one left, one right --1l2r one left, two right --2l1r two left, one right --1u1d one up, one down --1u2d on up, two down --2u1d two up, one down --4tiles 4 tiles, 1 in each corner for example tmux-auto-pane --4tiles will generate such layout:","title":"Automate tile layouts creation in tmux with tmux-auto-pane"},{"content":"Thanks to @BugsBunnyBR I released new version of ReactiveBeacons library with the RxJava2.x support. It\u0026rsquo;s an Android library scanning BLE (Bluetooth Low Energy) beacons nearby with RxJava Observables. I also kept backward compatibility with RxJava1.x. Different versions of the libraries are located on the separate git branches. It\u0026rsquo;s a similar approach to original RxJava project. I have separate builds on Travis CI, separate artifacts and JavaDocs. Such approach generates more overhead, but in such case, RxJava1.x can be kept in a maintenance mode and RxJava2.x can be a subject of the future development. What has been done in this version?\n migrated library to RxJava2.x on RxJava2.x branch and released it as reactivebeacons-rx2 artifact kept library compatible with RxJava1.x on a RxJava1.x branch and released it as reactivebeacons artifact removed master branch bumped library dependencies added permission annotations organized Gradle configuration transformed instrumentation unit tests to pure java unit tests started executing unit tests on Travis CI server created separate JavaDoc for RxJava1.x and RxJava2.x  If you want to add RxJava2.x version to your Android project, add the following dependency to build.gradle file:\ndependencies { compile \u0026#39;com.github.pwittchen:reactivebeacons-rx2:0.6.0\u0026#39; } For RxJava1.x you can use old artifact id:\ndependencies { compile \u0026#39;com.github.pwittchen:reactivebeacons:0.6.0\u0026#39; } This library was one of the first experiments with my migrations to RxJava2.x. I have plans to migrate rest of my libraries soon. Thanks to the awesome open-source community on GitHub, this process goes faster and I don\u0026rsquo;t have to do everything by myself.\n","permalink":"https://wittchen.io/posts/reactivebeacons-060-rxjava2/","summary":"Thanks to @BugsBunnyBR I released new version of ReactiveBeacons library with the RxJava2.x support. It\u0026rsquo;s an Android library scanning BLE (Bluetooth Low Energy) beacons nearby with RxJava Observables. I also kept backward compatibility with RxJava1.x. Different versions of the libraries are located on the separate git branches. It\u0026rsquo;s a similar approach to original RxJava project. I have separate builds on Travis CI, separate artifacts and JavaDocs. Such approach generates more overhead, but in such case, RxJava1.","title":"ReactiveBeacons - release of v. 0.6.0 with support for RxJava2"},{"content":"I\u0026rsquo;m still learning Vim every day. At first, it looks quite hard and most of the people want to learn how to quit it and never use again. Nevertheless, when you learn some basics, you can be really productive. This editor has much more cool functionalities than just :q shortcut ;-). Recently I discovered, you can use Vim not only for editing files but you can use it for browsing directories as well! Just go to any directory you want in terminal and type:\nvi . Then you have very nice file browser: You can use most of the regular Vim commands like /yourkeyword for searching. You can also navigate up and down with j and k as inside the files. To enter directory, just press Enter You also have other features like - key for going up, s for sorting, R for renaming and D for deleting. To quit this browser, just type :q (the same shortcut as in the editor). I know, this file browsing functionality is not perfect, but it\u0026rsquo;s much better than regular navigation and directory browsing in the console with cd, ls and searching with grep. In some cases it may be a perfect choice!\n","permalink":"https://wittchen.io/posts/browsing-dirs-with-vim/","summary":"I\u0026rsquo;m still learning Vim every day. At first, it looks quite hard and most of the people want to learn how to quit it and never use again. Nevertheless, when you learn some basics, you can be really productive. This editor has much more cool functionalities than just :q shortcut ;-). Recently I discovered, you can use Vim not only for editing files but you can use it for browsing directories as well!","title":"Browsing directories with Vim"},{"content":"Today at Kariera IT conference in Katowice, Poland, I presented talk explaining how to make open-source projects, which people want to use from my perspective. Below, you can find slides from my presentation. Thank you all for the attendance, interesting questions and organizers for inviting me. I hope you learned something new. Of course, any constructive feedback for this talk will be appreciated :).\n Link: How to make open-source projects, which people want to use\n","permalink":"https://wittchen.io/posts/how-to-make-open-source-projects-which-people-want-to-use/","summary":"Today at Kariera IT conference in Katowice, Poland, I presented talk explaining how to make open-source projects, which people want to use from my perspective. Below, you can find slides from my presentation. Thank you all for the attendance, interesting questions and organizers for inviting me. I hope you learned something new. Of course, any constructive feedback for this talk will be appreciated :).\n Link: How to make open-source projects, which people want to use","title":"How to make open-source projects, which people want to use"},{"content":"When we\u0026rsquo;re developing Android apps, we have to remember that different users have different versions of the Android OS. Unfortunately, not all of them has the newest version of the system and some of them have older devices with older systems. Some of these devices may be even unsupported because e.g. Google supports their devices like Nexus and Pixel for only 2 years. When we want to reach as many users as possible and make the app available for almost everyone, we have to handle different Android versions. One of the solutions for that problem is strategy design pattern (it\u0026rsquo;s also called Policy in Domain-Driven Design). I\u0026rsquo;m developing an Android open-source library called ReactiveNetwork, which is used for monitoring connectivity with the network in the system. Network monitoring strategies vary between different versions of Android and I wanted to choose an appropriate strategy for appropriate Android version. To do so, I\u0026rsquo;ve created NetworkObservingStrategy interface:\npublic interface NetworkObservingStrategy { Observable observeNetworkConnectivity(final Context context); void onError(final String message, final Exception exception); } This interface can have many implementations like LollipopNetworkObservingStrategy, PreLollipopNetworkObservingStrategy and MarshmallowNetworkObservingStrategy. Morever, more implementations can be added in the future. After that, we can choose a valid strategy for the concrete version of the system:\npublic static Observable\u0026lt;Connectivity\u0026gt; observeNetworkConnectivity(final Context context) { final NetworkObservingStrategy strategy; if (Preconditions.isAtLeastAndroidMarshmallow()) { strategy = new MarshmallowNetworkObservingStrategy(); } else if (Preconditions.isAtLeastAndroidLollipop()) { strategy = new LollipopNetworkObservingStrategy(); } else { strategy = new PreLollipopNetworkObservingStrategy(); } return strategy.observeNetworkConnectivity(context); } That\u0026rsquo;s it. Now, we have the separate code working for Android M, L and all devices with system version lower than L. This approach can also be applied to other areas.\n","permalink":"https://wittchen.io/posts/handling-different-android-versions-with-strategy-pattern/","summary":"When we\u0026rsquo;re developing Android apps, we have to remember that different users have different versions of the Android OS. Unfortunately, not all of them has the newest version of the system and some of them have older devices with older systems. Some of these devices may be even unsupported because e.g. Google supports their devices like Nexus and Pixel for only 2 years. When we want to reach as many users as possible and make the app available for almost everyone, we have to handle different Android versions.","title":"Handling different Android versions with strategy pattern"},{"content":"Most of the people use git as follows.\n they create a feature branch they make some changes they add all the changes: git add -A they commit changes: git commit -m \u0026quot;I've done changes\u0026quot; they push it: git push  There\u0026rsquo;s a problem with such approach. When we created a lot of changes, it may happen that we forgot to delete something and we pushed some garbage to the remote repository.\nIt\u0026rsquo;s better to review our own changes before the commit.\nWhen we\u0026rsquo;ve done some changes, instead of typing\ngit add -A we can type\ngit add -p It will allow us to review our own changes and approve or disapprove them with typing y (yes) or n (no).\nAfter that process, all changes approved by us are \u0026ldquo;staged\u0026rdquo;. Changes, which are not approved are not staged. We can discard unstaged (and also unapproved) changes by typing git checkout -- .. After that, our repository is clean - unwanted changes are discarded \u0026amp; changes, which we approved are staged. Next, we can simply commit \u0026amp; push our changes to the remote repository.\nThis approach is, in my opinion, very useful and helps to avoid pushing unwanted code to the remote repository, what will hopefully make your co-workers happy.\n","permalink":"https://wittchen.io/posts/review-your-changes-before-the-commit/","summary":"Most of the people use git as follows.\n they create a feature branch they make some changes they add all the changes: git add -A they commit changes: git commit -m \u0026quot;I've done changes\u0026quot; they push it: git push  There\u0026rsquo;s a problem with such approach. When we created a lot of changes, it may happen that we forgot to delete something and we pushed some garbage to the remote repository.","title":"Review your changes in the code before the commit"},{"content":"When we are planning to create our next Android app, besides the codebase, it\u0026rsquo;s also good to plan its design, UI, and UX. Before doing that, we can take a look at some inspirations and work of other people to gather a few UI design patterns, inspirations, and ideas. Good resource of such inspirations is Android Niceties website. As the authors write, this website is a collection of screenshots encompassing some of the most beautiful looking Android apps. You can also take a look at [https://pl.pinterest.com/explore/android-ui/](http://android-ui tag on Pinterest). Do you know any other similar resources? Share them in comments :-).\n","permalink":"https://wittchen.io/posts/android-design-inspirations/","summary":"When we are planning to create our next Android app, besides the codebase, it\u0026rsquo;s also good to plan its design, UI, and UX. Before doing that, we can take a look at some inspirations and work of other people to gather a few UI design patterns, inspirations, and ideas. Good resource of such inspirations is Android Niceties website. As the authors write, this website is a collection of screenshots encompassing some of the most beautiful looking Android apps.","title":"Android design inspirations"},{"content":"Introduction Some time ago, I\u0026rsquo;ve written an article about Test coverage report for Android application. It got some interest (many comments below article and many visits according to Google Analytics), so I decided to refresh this topic. Previously, I\u0026rsquo;ve written instrumentation unit tests, which needed to be executed on a real device or an emulator. It\u0026rsquo;s a good approach when you want to test functionalities strongly connected with the device. E.g. when you want to test operations on a real SQLite database or something like that. Nevertheless, this approach has huge disadvantages. It\u0026rsquo;s hard to run tests on the Continous Integration server because we need to have the emulator or device up \u0026amp; connected all the time and also tests need to interact properly with the device to get passed what is not so easy. In most cases, mocking part of the application\u0026rsquo;s behavior is enough. In that case, we can easily run tests on a CI server and have deterministic test results. In order to do that, we can use Robolectric.\nGradle configuration First, we have to add appropriate dependency to jacoco-android plugin in our top-level build.gradle file:\nbuildscript { repositories { jcenter() } dependencies { classpath \u0026#39;com.android.tools.build:gradle:2.3.0\u0026#39; classpath \u0026#39;com.dicedmelon.gradle:jacoco-android:0.1.1\u0026#39; } } Next, we need to add appropriate test dependencies in another build.gradle file for our app or library.\ndependencies { testCompile \u0026#39;junit:junit:4.12\u0026#39; testCompile \u0026#39;com.google.truth:truth:0.32\u0026#39; testCompile \u0026#39;org.robolectric:robolectric:3.1.2\u0026#39; testCompile \u0026#39;org.mockito:mockito-core:2.7.17\u0026#39; } I\u0026rsquo;ve added also dependencies to JUnit, Truth and Mockito library, which are used in my tests. We also need to add appropriate plugins:\napply plugin: \u0026#39;jacoco\u0026#39; apply plugin: \u0026#39;jacoco-android\u0026#39; To avoid ignoring our tests by the coverage report, we need to configure the following settings: android { testOptions { unitTests.all { jacoco { includeNoLocationClasses = true } } } } Next, we need to configure report output:\njacocoAndroidUnitTestReport { csv.enabled false html.enabled true xml.enabled true } Travis CI configuration We are done with Gradle configuration. I\u0026rsquo;m assuming we have Travis CI build configured. If you don\u0026rsquo;t know, how to do this, visit travis-ci.org and enable builds for your project. It\u0026rsquo; pretty easy. Now, we should visit codecov.io website, register there (e.g. with GitHub account) and add our project. After that, we need to add the following items to our .travis.yml file:\nafter_success: - bash \u0026lt;(curl -s https://codecov.io/bash) script: - ./gradlew clean build test jacocoTestReport check Here we are performing clean, build an application, running unit tests, generating test coverage report with Jacoco and performing check (Lint, FindBugs, PMD \u0026amp; CheckStyle).\nWriting unit tests with Robolectric Next we can place our tests in src/test/ directory.\nSample unit test can look as follows:\n@RunWith(RobolectricTestRunner.class) @Config(constants = BuildConfig.class) public class MyUnitTests { @Test public void myValueShouldBeTrue() { boolean myValue = true; assertThat(myValue).isTrue(); } } In my case, I also needed to create src/test/resources/robolectric.properties file with the following content:\nsdk=23 because Robolectric didn\u0026rsquo;t work with the Android SDK newer than 23. Moreover, I also needed to use Robolectric v. 3.1.2, because I had problems with running tests and generating coverage report with the latest version of the Robolectric.\nSummary When we have everything configured, we can push our tests to the GitHub repository, Travis CI build will be triggered and we can beautiful test coverage report, which can help to improve our tests.\nWe can also click on the main package and see detailed coverage information for the several packages.\nMoreover, we can analyze coverage change in time.\nI\u0026rsquo;ve applied approach described in this article in ReactiveNetwork open-source library.\nIf want to see the complete solution, take a look at the source code of this project or see its coverage report on-line.\n","permalink":"https://wittchen.io/posts/unit-test-coverage-report-with-travis-ci-for-robolectric-on-android/","summary":"Introduction Some time ago, I\u0026rsquo;ve written an article about Test coverage report for Android application. It got some interest (many comments below article and many visits according to Google Analytics), so I decided to refresh this topic. Previously, I\u0026rsquo;ve written instrumentation unit tests, which needed to be executed on a real device or an emulator. It\u0026rsquo;s a good approach when you want to test functionalities strongly connected with the device. E.","title":"Unit test coverage report with Travis CI for Robolectric on Android"},{"content":"While we are working with Version Control Systems like Git, it\u0026rsquo;s good to adapt them to our needs to perform daily work in a more productive way. People often create so-called Git aliases, which are shortcuts for longer commands. E.g. you can edit your .gitconfig file, which is usually located in your home directory and place a few aliases in the [alias] section. For example:\n[alias] ls = log --pretty=format:\u0026#34;%C(yellow)%h%Cred%d\\\\ %Creset%s%Cblue\\\\ [%cn]\u0026#34; --decorate Then you can type: git ls in your Git repository to see pretty Git log. Sometimes people go further and create many more aliases like:\ncp = cherry-pick st = status cl = clone ci = commit co = checkout br = branch and so on. I\u0026rsquo;ve seen configurations containing about 20 aliases or more consisting of shortcuts, which have 2 or 3 letters. Usually, we don\u0026rsquo;t use 20 commands every day. I can remember e.g. 5 shortcuts, but I don\u0026rsquo;t want to remember more. Instead of alias:\nlcm = log -1 --pretty=%B I prefer:\nlast-commit-msg = log -1 --pretty=%B When I\u0026rsquo;m using terminal on Linux or macOS, I have type hinting, so I can type: git la, hit Tab and terminal will autocomplete my command to git last-commit-. Then I can hit Tab again and I can choose one of my aliases and select one by hitting Enter. Now, I don\u0026rsquo;t have to remember all of my aliases. I treat my .gitconfig file as a documentation. Whenever I want to browse aliases, I can type git list-aliases (it\u0026rsquo;s also an alias to !git config -l | grep alias | cut -c 7- | sort) and if I want to find aliases related to diffs, I can type git list-aliases | grep diff. I also have more descriptive aliases like:\nundo-last-commit = reset \u0026ndash;hard HEAD^\nso I know what this command actually does. Morover, divided my aliases into separate sections and marked these sections with comments. The sections are as follows:\n showing metadata showing urls showing commits, logs \u0026amp; branches ignoring files adding \u0026amp; reviewing changes resetting and reverting changes merging changes branching showing diffs searching files  It allows me to keep my aliases in more organized way. It\u0026rsquo;s useful when our .gitconfig file \u0026ldquo;lives\u0026rdquo; and we update it during the work day if we need to. Maybe this approach won\u0026rsquo;t be the best way of using Git for everyone, but it works for me and allows me to solve my daily tasks easier and faster. You can find complete source of my .gitconfig file in my dotfiles repository at https://github.com/pwittchen/dotfiles/blob/master/.gitconfig.\nFurther reading  Must Have Git Aliases: Advanced Examples The Ultimate Git Alias Setup  Happy coding!\n","permalink":"https://wittchen.io/posts/my-approach-to-git-aliases/","summary":"While we are working with Version Control Systems like Git, it\u0026rsquo;s good to adapt them to our needs to perform daily work in a more productive way. People often create so-called Git aliases, which are shortcuts for longer commands. E.g. you can edit your .gitconfig file, which is usually located in your home directory and place a few aliases in the [alias] section. For example:\n[alias] ls = log --pretty=format:\u0026#34;%C(yellow)%h%Cred%d\\\\ %Creset%s%Cblue\\\\ [%cn]\u0026#34; --decorate Then you can type: git ls in your Git repository to see pretty Git log.","title":"My approach to Git aliases"},{"content":"Short introduction Sometimes people need to specify multiple values for single .gitconfig file or they want to share just part of the configuration between two machines. There are different approaches for that. I can show you mine.\nDifferent configs for different Operating Systems On my private computer, I use Linux. I use Git for my private projects and I use my private e-mail address there. At the same time, I use Git at work on macOS with exactly the same Git configuration, but with a different e-mail address. How to deal with that? In my .gitconfig file, I set my private e-mail address, which is used by default. In my .zshrc file, I created two aliases:\nalias setupGitPersonal=\u0026#34;git config --global user.email \\\u0026#34;piotr@wittchen.biz.pl\\\u0026#34;\u0026#34; alias setupGitForWork=\u0026#34;git config --global user.email \\\u0026#34;piotr.wittchen@sap.com\\\u0026#34;\u0026#34; Hint: If you want to configure more stuff than just an e-mail, you can do it in the appropriate alias or you can create separate shell scripts for that and place them in /usr/local/bin/ directory. Then, on Linux, I don\u0026rsquo;t have to do anything and my private e-mail address is used out-of-the-box. On macOS, I do the following trick in .zshrc file:\nif [ `uname` = \u0026#34;Darwin\u0026#34; ]; then setupGitForWork # rest of the macOS config goes here... fi After that, every time I start terminal on macOS, it automatically sets up my e-mail address to the one I use at work and keeps my .gitconfig file updated. Hint: If you don\u0026rsquo;t use zsh, instead of .zshrc file, edit .bashrc file.\nDifferent configs for the same OS on two machines If you\u0026rsquo;re using different configs on the different machines with the same OS, you can try another trick. Create configuration file - e.g. .machine_name in your home directory. Setup one name on one machine and another name on a different machine. Next, include this file in your .zshrc or .bashrc file, perform appropriate check and load different settings basing on variable name.\n. ~/.machine_name if [ $machineName = \u0026#34;workMachine\u0026#34; ]; then setupGitForWork else setupGitPersonal fi Contents of the .machine_name file are simple:\nmachineName=\u0026#34;workMachine\u0026#34; Different configs on the single machine with one OS In such case, we are supposed to perform the manual switch. We can use aliases provided above. When we want to have personal settings, we can open terminal and type setupGitPersonal. When we want to apply work settings, then we can type setupGitForWork.\nSummary As we can see, keeping different configs for different machines or operating systems and changing them depending on our needs is not so hard. I hope these ideas will help you to manage your configs.\n","permalink":"https://wittchen.io/posts/working-with-different-git-configs/","summary":"Short introduction Sometimes people need to specify multiple values for single .gitconfig file or they want to share just part of the configuration between two machines. There are different approaches for that. I can show you mine.\nDifferent configs for different Operating Systems On my private computer, I use Linux. I use Git for my private projects and I use my private e-mail address there. At the same time, I use Git at work on macOS with exactly the same Git configuration, but with a different e-mail address.","title":"Working with different Git configs"},{"content":"Recently, I created a tiny script called spotify-cli, which allows you to control Spotify on Linux from terminal. It\u0026rsquo;s inspired by shpotify, which is a shell script doing similar things, but on macOS. My script is written in Python and uses dbus under the hood, which allows to communicate with bus daemon to pass messages between applications. I used pactl for controlling the system sound.\nYou can install spotify-cli as follows via wget:\nsh -c \u0026#34;$(wget https://raw.githubusercontent.com/pwittchen/spotify-cli-linux/master/install.sh -O -)\u0026#34; or via curl:\nsh -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/pwittchen/spotify-cli-linux/master/install.sh)\u0026#34; After that, you can just type spotifycli in your terminal. You can use spotifycli with the following parameters:\n--help, -h shows help --status shows status (currently played song name and artist) --status-short shows status in a short way (cuts currently played song name and artist) --play plays the song --pause pauses the song --playpause plays or pauses the song (toggles a state) --next plays the next song --prev plays the previous song --volumeup increases sound volume --volumedown decreases sound volume That\u0026rsquo;s it! Happy listening!\nSource code of the project can be found at https://github.com/pwittchen/spotify-cli-linux.\n","permalink":"https://wittchen.io/posts/control-spotify-on-linux-like-a-hacker/","summary":"Recently, I created a tiny script called spotify-cli, which allows you to control Spotify on Linux from terminal. It\u0026rsquo;s inspired by shpotify, which is a shell script doing similar things, but on macOS. My script is written in Python and uses dbus under the hood, which allows to communicate with bus daemon to pass messages between applications. I used pactl for controlling the system sound.\nYou can install spotify-cli as follows via wget:","title":"Control Spotify on Linux like a hacker"},{"content":"Introduction Recently, I attended a training related to ZK framework. One part of that training was quite interesting for me and was related to measuring and monitoring the performance of the web applications. In Chrome Browser, we have Chrome Dev Tools, which can be opened with Ctrl+Shift+I shortcut or ⌘+Shift+I shortcut on Mac. Inside these tools, we have \u0026ldquo;Performance\u0026rdquo; tab. We can hit red \u0026ldquo;record\u0026rdquo; icon in the upper left corner of the Tools window and start recording performance of the website while loading it, clicking around or whatever situation we want to monitor. After that, we can see a really nice graph.\nThis graph presents a performance of our application during the time and shows different metrics divided into the different sections like:\n Loading Scripting Rendering Painting Other Idle  It can help us to find bottlenecks of the performance and critical sections.\nClient-side performance issues As we can see in this example, \u0026ldquo;Scripting\u0026rdquo; takes a lot of time so we can assume that client-side of our application slows down its performance. Moments, where application slowed down are marked with red lines on the main chart. We can select this area and investigate it further.\nWe could find the exact call of the JavaScript method and now we can try to optimize it in the future.\nServer-side performance issues When \u0026ldquo;Scripting\u0026rdquo; doesn\u0026rsquo;t take most of the time, but an application is still slow, we may suppose, that performance problem is caused by the server-side. In case of Java and JVM application, we can use JVisualVM program to monitor performance of our project. It can be subject of the separate article. In Chrome Dev Tools, we may also switch to the \u0026ldquo;Network\u0026rdquo; tab and mark \u0026ldquo;XHR\u0026rdquo; sub-tab, which stands for XML Http Request, which are usually AJAX network calls done via JavaScript to the server.\nNext, we can review our request and check, which one is slow. We may also review its header and response.\nIn the \u0026ldquo;Timing\u0026rdquo; tab we can take a look at the execution time of asynchronous connection. If it\u0026rsquo;s really slow, we may start the further investigation on the server-side in the place where this request is called.\nPlease note, slow XHR connections may be caused not only by inefficient code on the server-side but also by the infrastructure, servers \u0026amp; networking issues. We should isolate pieces of code \u0026amp; perform unit tests to show that it\u0026rsquo;s a server-side issue. We can also perform end-to-end tests, measure performance and compute average execution time to conclude what is the real source of the problem.\nSummary As we can see, monitoring performance and finding bottlenecks is not an easy task, but Chrome Dev Tools can help us to fix such issues in a really convenient way.\n","permalink":"https://wittchen.io/posts/analyzing-performance-of-web-app-with-chrome-dev-tools/","summary":"Introduction Recently, I attended a training related to ZK framework. One part of that training was quite interesting for me and was related to measuring and monitoring the performance of the web applications. In Chrome Browser, we have Chrome Dev Tools, which can be opened with Ctrl+Shift+I shortcut or ⌘+Shift+I shortcut on Mac. Inside these tools, we have \u0026ldquo;Performance\u0026rdquo; tab. We can hit red \u0026ldquo;record\u0026rdquo; icon in the upper left corner of the Tools window and start recording performance of the website while loading it, clicking around or whatever situation we want to monitor.","title":"Analyzing performance of the web application with Chrome Dev Tools"},{"content":"Introduction For most of the time, I was MS Windows user. I was using this OS since Windows 95 up to Windows 10 ( the last version really occasionally). About ~3 years ago, I switched to Linux (Ubuntu) on my private computer. I used it before on virtual machine or sometimes in dual boot with Windows. About one year ago, I changed my job and decided to switch to Macbook Pro at work. I also had an option of choosing a laptop with MS Windows, but I was already a bit familiar with Unix, so I decided to learn something new and try Apple stuff. It had OS X El Capitan installed and it was later upgraded to macOS Sierra. I decided to collect my thoughts related to using Macbook in this article. Below you can see a photo of my current work-station in the office.  In the beginning, it seemed that it\u0026rsquo;s something different than systems I already used, but it was quite similar to Linux. There\u0026rsquo;s Unix shell, HUD like in the Unity on Ubuntu. I don\u0026rsquo;t use Unity on Linux anymore, but I\u0026rsquo;m familiar with that concept. Settings window also looks similar to Unity or Gnome. Macbook is connected to one monitor via HDMI and to another one via mini-display port. The keyboard is connected via USB and magic mouse is connected wirelessly via Bluetooth. It\u0026rsquo;s worth mentioning that Macbook doesn\u0026rsquo;t have RJ45 port, so you need an adapter if you want to be connected to the network via cable. There\u0026rsquo;s adapter from mini-display port to RJ45 and from USB to RJ45. You can choose one of them. If you need any specific device setup, better check hardware specification, available adapters and their cost.\nConfiguration as a code After some time of using Linux, I discovered that I can keep my personal configuration as a code. My config is open-source and you can see it in my dotfiles repo. This is very useful when you want to restore your configuration if you\u0026rsquo;re installing a system from the scratch or you accidentally lost your data and want to have a backup. Moreover, when you are using two Unix machines like me right now, you can share your configuration between them. On macOS I can use the same stuff like on Linux. E.g. Zsh, Tmux, Vim, etc. Nevertheless, there are differences between Linux and macOS. That\u0026rsquo;s why in my .zshrc file, I have a separate section for Linux and the separate section for macOS. Moreover, sometimes scripts also need to be customized separately for different systems. Using macOS helped me to make my config more robust and now I can use it easily both on macOS and Linux without huge problems. \nApps Of course, I needed to find apps, which will be useful for me during daily work and usage of the system. Below you can see what I find useful. Basics\n Homebrew - Missing package manager for macOS; it\u0026rsquo;s obvious thing for Linux systems, but on macOS you need additional software for that. iTerm2 - Terminal emulator with possibility of searching, creating tabs, creating panes horizontally and vertically. It\u0026rsquo;s better than default Terminal app. Spectacle - An app for resizing and moving windows. On macOS for me it\u0026rsquo;s very annoying that when you resize the window to the full-screen, it hides top menu (HUD) and dock and jumps into separate workspace. We can solve that problem by installing spectacle and with appropriate shortcuts you can resize window without hiding anything. It has also a few additional features regarding windows resizing. Moreover, it\u0026rsquo;s good to remember to disable shortcuts, which conflicts with iTerm2 shortcuts for splitting the panes if you are using them like me.  Development Tools Here are my basics apps I use for development. I also use terminal tools, but I mentioned them earlier in this article. All of them works pretty the same as on other platforms. Docker for Mac was improved so we can use Docker as easy as on Linux right now.\n IntelliJ IDEA Atom Docker for Mac  Messengers We also have basic messengers. It\u0026rsquo;s no difference comparing the to other systems. Maybe Skype is simpler than Windows version. Linux version of Skype is also quite simple because they probably stopped developing it. It\u0026rsquo;s strange because it\u0026rsquo;s good and bad at the same time.\n Skype Slack Hipchat Mattermost - Interesting tool I use at daily work. It\u0026rsquo;s an open-source alternative for Slack.  Menu indicators I like the concept of menu indicators in HUD. It\u0026rsquo;s similar to Gnome Classic and Gnome 3 desktop environment for Linux.\n Caffeine. It\u0026rsquo;s the same as on Linux. It\u0026rsquo;s an indicator, which prevents screen lock. Menu meters. It\u0026rsquo;s similar to Linux indicator. You can measure CPU, Memory and network usage. Degrees. It\u0026rsquo;s an indicator for checking weather and temperature in your city.  Additional apps There are also a few additional apps I use\u0026hellip;\n Commander One - \u0026ldquo;Total Commander\u0026rdquo;-like app for macOS. Total Commander is one of the apps I really miss on non-MS systems, because its replacements are never as good as the original app. Default Mail and Calendar app MS Outlook - the newest version looks much better after update, nevertheless notifications are still not consistent with macOS UI (at least they look a bit better) and closing app means killing it like on Windows, but it\u0026rsquo;s uncommon behavior for macOS. MS Office apps Evernote Simplenote Wunderlist Spotify  \nWhat\u0026rsquo;s different? There are things, which are slightly different on macOS and I needed to get used to them during the time.\n Apps are not closed until you explicitly close them. Apps behaves a bit like on Android. They go to the background and you can wake them up. If you want to kill the app explicitly you have to use Command+Q shortcut or choose \u0026ldquo;Quit\u0026rdquo; option from the context menu. Keyboard and shortcuts. The keyboard is different. We have additional Command key, which replaces Windows Key and a few additional keys. System shortcuts are also different. There\u0026rsquo;s no \u0026ldquo;Print Screen\u0026rdquo; key, but there\u0026rsquo;s a shortcut for that. Moreover, IntelliJ shortcuts are also different than on Windows and Linux, but I learned them during the time without any shortcuts re-mapping like some people do. In my opinion, it\u0026rsquo;s a better approach than re-mapping, because we have different keyboard and opportunity to train our brain a little bit. Workspaces. This functionality became a standard in the latest versions of OS X and Windows. Nevertheless, it was available on Linux Desktop Environments long time ago. Dividing screen. This is similar to Windows and Linux, but with a few differences. When we divide the screen and share it between two windows, this view goes to a separate workspace without HUD and Dock. I don\u0026rsquo;t like it. Additionally, we can grab a dividing line and adjust space of one window or another by dragging like in Tmux. This is really cool feature, which is not available on Windows and Linux DEs as far as I know. Head Up Display and Dock. As I mentioned earlier in this article HUD is a concept similar to the Unity DE from Ubuntu, but I suppose Apple was first with that idea. I\u0026rsquo;m not a fan of Dock. Its functionality is more or less the same as a bottom bar from Windows, but with a bit different UI/UX. It\u0026rsquo;s hard to say, which one is better. Hiding and showing hidden files. I haven\u0026rsquo;t found an option of showing hidden files like I can do on Windows or Linux. I had to do a trick and create an alias in my .zshrc file to show and hide hidden files. Commander One app is able to show and hide hidden files via GUI, but it\u0026rsquo;s third party app. Spotlight. The Spotlight is a useful feature, which you can use for launching apps. You can also use it for other things like searching mail, calendar, places and so on, but I don\u0026rsquo;t really use these additional things. Siri. Siri is an assistant with voice recognition. It was available on iPhone earlier. In macOS they brought it to the desktop. It\u0026rsquo;s cool, you can ask it about weather or launch an app with voice command, but I don\u0026rsquo;t really use it in daily work.  Observations Here are a few of my observations I made while using Mac.\n It doesn\u0026rsquo;t work exactly the same as Linux, but it\u0026rsquo;s in the same Unix family. We can use nice terminal, Zsh, Vim, Tmux and stuff similar to Linux, but sometimes we need to adjust things to Mac and not all commands, which are valid for Linux are also valid for Mac. It\u0026rsquo;s more stable than Linux. I don\u0026rsquo;t remember if I encountered any crashes or problems related to system itself on Mac. Maybe system hanged once or twice in a year. It\u0026rsquo;s less customizable than Linux. On Mac you cannot change the desktop environment and do a lot of customizations like on Linux. Luckily UI of macOS is nice, although Gnome UI is, in my opinion, a bit more minimalistic, what I actually like. It\u0026rsquo;s simpler than MS Windows. From my perspective macOS is simpler than MS Windows. In MS Windows they tend to change everything in the successive releases and UI gets more complicated. In macOS they try to keep everything simple and consistent with their standards. Software vendors care about macOS users. Every popular app has an official macOS version (e.g. Evernote, Wunderlist, Photoshop, etc.). You cannot say that about Linux. Almost every dummy app is not free. I\u0026rsquo;m not against buying software and I use licensed commercial software. Nevertheless, in App Store almost every dummy app for doing one simple thing is paid, what can be annoying especially if you are using Mac at work and don\u0026rsquo;t want to connect it with your personal payment cards.  Design \u0026amp; Hardware We can discuss software issues, but there are things, which Apple makes the best and leaves the competition behind. These things are design \u0026amp; hardware. Macbook\u0026rsquo;s touchpad is the best touchpad I\u0026rsquo;ve ever used. It\u0026rsquo;s smooth easy to use and is integrated with the system in a very convenient way. Page scrolling is really smooth and natural. There are gestures for switching workspaces, scattering windows, zooming, etc. Retina display screen is very clear, has high resolution and it\u0026rsquo;s much better than displays of the other laptops. Speakers are incredibly clear and music sounds better than in regular laptops. A lot of people complain about the necessity of using adapters. I haven\u0026rsquo;t really had such problems. The only adapter I needed was USB to RJ45 adapter for a wired network. I could connect one external screen via mini-display port and another one via HDMI port. I think an issue with adapters can be serious for people who use a lot of specific external devices. The battery in the Macbook works fine, but it\u0026rsquo;s getting worse as long as you\u0026rsquo;re using a laptop. If you start energy consuming services and apps it can be drained in less than 8 hours now. I think it was better in the beginning of the usage (one year ago). The thing, which I really like in Macbook is the design. It\u0026rsquo;s very clean \u0026amp; simple. It\u0026rsquo;s also made from high-quality materials and looks really well. People who care about aesthetics will appreciate that. \nSummary To sum up, I can tell that Macbook is really nice \u0026amp; expensive piece of hardware. I could recommend such device to people, who can afford and want to spend more money than usual on their computer. I would also recommend this device to people who travel a lot and need to work with laptop screen and touchpad because Apple made them better than the competition. I can also recommend this device to people who don\u0026rsquo;t want to spend too much time on configuration \u0026amp; customization of the software. I wouldn\u0026rsquo;t recommend this device to people who want to save money. You can get a laptop with similar specs in about 30% of the Macbook\u0026rsquo;s price. E.g. Thinkpad device. I also wouldn\u0026rsquo;t recommend it to people who use external devices quite often. If you are using the external screen, mouse \u0026amp; keyboard lack of Apple touchpad and retina display shouldn\u0026rsquo;t be a deal-breaker for you. I also wouldn\u0026rsquo;t recommend it to people who use a lot of specific external devices. In the case of choosing Macbook, probably you\u0026rsquo;ll need a lot of adapters and some stuff may not work fine for you. In addition, if you like to customize your system, probably you should get a Thinkpad device \u0026amp; install Linux. Moreover, you need to remember that Macbook Pro is not a gaming laptop. In my opinion, macOS is better than Windows for the type of programming I do (recently Java, Bash \u0026amp; Python). Nevertheless, I don\u0026rsquo;t think it\u0026rsquo;s better for that than Linux. As you see, using a Macbook Pro has pros and cons. You need to remember that choosing of the device should be dictated by logic and pragmatism. Not by marketing and fashion.\n","permalink":"https://wittchen.io/posts/one-year-of-using-macbook-pro-as-a-software-developer/","summary":"Introduction For most of the time, I was MS Windows user. I was using this OS since Windows 95 up to Windows 10 ( the last version really occasionally). About ~3 years ago, I switched to Linux (Ubuntu) on my private computer. I used it before on virtual machine or sometimes in dual boot with Windows. About one year ago, I changed my job and decided to switch to Macbook Pro at work.","title":"One year of using Macbook Pro at work as a software developer"},{"content":"Introduction In my current company all the people who perform creative work (mostly programmers) need to prepare so-called PKUP report. PKUP stands for Podwyższone Koszty Uzyskania Przychodu in the Polish language. It\u0026rsquo;s legal regulation in Poland, which allows paying a lower income tax due to the particular type of work. For the regular employee, it means that he or she will simply get a bit higher salary per month.\nHow the report looks in practice? As a programmer, I simply create software as a source code. Added, removed and modified lines of code in the existing codebase are treated as my creative work. Luckily, we use Git so I can generate *.diff files from the Git repositories I\u0026rsquo;m contributing to. Besides that, I need to prepare document as a *.docx file with a short description of my work. My tasks look different every month, but report actually looks almost the same every month. Preparing this report is boring and repeatable stuff.\nLet\u0026rsquo;s automate it! Generating *.diff files from Git repos I simply created a shell script, which goes through predefined project directories and saves *.diff files with names the same as project directory with changes performed by me from the 20th day of the last month until now.\nGenerating *.docx document Next, I created a python script, which is parametrized and used by shell script. It uses python-docx library for generating *.docx report. I\u0026rsquo;ve chosen such option, because it\u0026rsquo;s one of the simplest solutions I\u0026rsquo;ve found and it\u0026rsquo;s lightweight. Moreover it can be easily used on Unix systems and integrated with shell scripts.\nPersonalization I wanted to make a script available and usable for everyone, so I created .pkup.conf file, which is responsible for personalization and configuration of the script. I think, it looks pretty straightforward.\nyDEV_PROJECTS_DIR=$yHYBRIS_SRC yDEV_PROJECTS_LIST=(backoffice platform-backoffice cockpitng backofficesearch pcm pcmbackoffice cockpit cockpit-core) yDEV_REPORT_DIR=~/Documents/hybris/pkup/raporty/doc/ yDEV_NAME=\u0026#34;Your name\u0026#34; yDEV_SURNAME=\u0026#34;Your surname\u0026#34; yDEV_ROLE=\u0026#34;Software Developer\u0026#34; yDEV_DEPARTMENT=\u0026#34;P\u0026amp;I\u0026#34; yDEV_MANAGER=\u0026#34;Your manager name and surname\u0026#34; Installation and uninstallation I also created installation script, which allows to start using the scripts faster. Installation script install dependencies for python script, copies shell script and python script into /usr/local/bin/ directory and .pkup.conf file into home directory. Configuration file needs to be adjusted by the user manually after installtion. Of course, there\u0026rsquo;s another script, which can be used for uninstallation.\nTests There are python tests for this solution in pkup_doc_test.py file, but they\u0026rsquo;re quite poor right now due to the limited amount of time. They can be a subject of improvements in the future. Note that such scripting solutions rarely have tests because they\u0026rsquo;re small and created ad-hoc. Nevertheless, I wanted to follow the philosophy from my last blog article and create tests for any kind of software I make.\nSummary I\u0026rsquo;ve spent some time for preparing this stuff, but it was fun and I think it should save me and hopefully my co-workers some amount of time during creating reports every month. In the future, it can be improved by automatic generation of report messages and sending data to the server.\nTo sum up, preparing reports manually is boring. Generating reports automatically is exciting!\nComplete solution described in this article with documentation is available on GitHub: https://github.com/pwittchen/pkup.\n","permalink":"https://wittchen.io/posts/automate-boring-stuff/","summary":"Introduction In my current company all the people who perform creative work (mostly programmers) need to prepare so-called PKUP report. PKUP stands for Podwyższone Koszty Uzyskania Przychodu in the Polish language. It\u0026rsquo;s legal regulation in Poland, which allows paying a lower income tax due to the particular type of work. For the regular employee, it means that he or she will simply get a bit higher salary per month.\nHow the report looks in practice?","title":"Automate boring stuff"},{"content":"Introduction In release cycle of our team at work, we need to perform so-called system tests. In order to do that, we need to log into Artifactory, search for the latest release package, check if it\u0026rsquo;s up to date, download it, unzip it, install internal configuration recipe, compile, initialize \u0026amp; run it. Not all of that can be easily automated, but I thought that at least searching \u0026amp; downloading phase can be done from the terminal in a semi-automated way. That\u0026rsquo;s why I created ydownloader shell script.\nWriting a script with unit tests and continuous integration I\u0026rsquo;m not an expert in shell scripting, so I also wanted to learn more about it. In addition, I wanted to apply best software development practices in that script. Someone can say that in the case of a simple shell script proper engineering may be a superfluity, but in my opinion, the simplicity of the project is not an excuse for doing it the right way. Especially, if we want to use it in the future. That\u0026rsquo;s why I divided this script into smaller functions, added command line arguments handling and help for the users. Moreover, I added unit tests with shunit2 (yes, we can write unit tests for the shell scripts) and continuous integration with Travis CI server. In the \u0026ldquo;Clean Code\u0026rdquo; book, we can read that code without unit tests is not clean by definition. After dividing script into smaller functions, it was much easier to test it. My script is accepting command line arguments, so I needed to do the following trick to make it testable and include it in the testing script:\nif [ \u0026#34;$TEST_MODE\u0026#34; == \u0026#34;\u0026#34; ] then TEST_MODE=false fi if [ \u0026#34;$TEST_MODE\u0026#34; = false ] ; then # parse command line arguments here... else echo \u0026#34;TEST_MODE enabled\u0026#34; fi Then, I could write unit tests:\nTEST_MODE=true . ./ydownloader # load script to be tested echo \u0026#34;RUNNING UNIT TESTS...\u0026#34; testCutLastChars() { # given valueToCut=\u0026#39;testString\u0026#39; expectedValue=\u0026#39;testStri\u0026#39; # when actualValue=$(echo $valueToCut | cutLastChars 3) # then assertEquals $expectedValue $actualValue } # more tests goes here... . ./shunit2/shunit2 # load shunit2 There are also other solutions for unit testing like bats, assert.sh and others. We can choose what we like. We can also use additional tools like shunit2-colorize to make our console output of shunit2 tests look like a rainbow if we are not fans of monochromatic terminal. Moreover, we can use static code analysis tools for shell scripts like shellcheck. In addition, I prepared simple install script, which allows to install script locally via curl or wget. Of course, project has sufficient documentation in README.md file.\nShort recap It was really nice coding exercise. Now, I feel much more comfortable with shell scripting, but there\u0026rsquo;s still a lot to learn. I recommend trying applying a similar approach in your scripts if you haven\u0026rsquo;t done it yet. If you want to browse complete project, check it out in my repository: https://github.com/pwittchen/ydownloader.\n","permalink":"https://wittchen.io/posts/lifting-quality-of-a-shell-script/","summary":"Introduction In release cycle of our team at work, we need to perform so-called system tests. In order to do that, we need to log into Artifactory, search for the latest release package, check if it\u0026rsquo;s up to date, download it, unzip it, install internal configuration recipe, compile, initialize \u0026amp; run it. Not all of that can be easily automated, but I thought that at least searching \u0026amp; downloading phase can be done from the terminal in a semi-automated way.","title":"Lifting quality of a shell script"},{"content":"Introduction A few months ago, I started work at Hybris, which was acquired by SAP, so our \u0026ldquo;division\u0026rdquo; is officially called SAP Hybris. I work in a team developing an extension for Hybris platform with assisting extensions and internal framework. There are many teams around the world developing their own extensions, which are finally integrated and packed into Commerce Suite provided to the clients and partners. We have our own development environment, but sometimes there\u0026rsquo;s need to build and run whole Commerce Suite in the case of system tests, bug reproduction, verification, etc. It\u0026rsquo;s not really hard, but you have to know what to do and you have to perform a lot of steps manually. This is kind of old approach in present days. Moreover, it\u0026rsquo;s really big project, so build and initialization process takes time. You have to download huge zipped package, unpack it, run Gradle script with installation recipe, compile project, run initialization and finally start the server.\nAutomating work I wondered if it\u0026rsquo;s possible to automate mentioned process. Moreover, I wanted to learn more about Docker and create more advanced Dockerfile than \u0026ldquo;hello world\u0026rdquo;, which will be real life use case. That\u0026rsquo;s why I decided to dockerize SAP Hybris Commerce Suite. I called this project ydocker and you can find it at https://github.com/pwittchen/ydocker. Before you start doing anything, you need to remember to install Docker on your system. You can check out my notes about installation Docker on Linux in learning-docker repository. Note #1: It\u0026rsquo;s not official company solution yet. Right now it\u0026rsquo;s just my personal proof of concept. Note #2: I had problems with building and running this Docker container on OS X and I haven\u0026rsquo;t tested it on MS Windows. These systems need to use boot2docker, Docker Toolbox or another approach like that. I had no problems with it on Linux (Ubuntu 14.04 LTS), so this system is recommended if you want to build and run this container successfully. Probably other Linux distributions or Ubuntu versions will handle this as well. Note #3 (update from 01.10.2016): Guys working on Docker improved their software for Mac, so it should work without any problems on this system now. It was tested on OS X El Capitan 10.11.6 and works fine. We just need to get Docker for Mac.\nBuilding Docker container Except for Dockerfile, ydocker repository also contains helper script ydocker, which has the following parameters:\n-b building Docker container -r running Hybris Server in Docker container -c running Docker container with CLI -i showing info about Docker container -u showing Commerce Suite Download Url -d deleting Docker container -h showing help This script uses configuration file ydocker.conf, which has the following contents:\nDOCKER_IMAGE_NAME=sap-hybris-commerce-suite COMMERCE_SUITE_VERSION=latest RECIPE=b2c_acc HOST_PORT=9002 CONTAINER_PORT=9002 You can customize this configuration. E.g. choose a different version of the suite, different recipe or change server port. To build container, you can just type:\n./ydocker -b Then, provide your credentials and Docker will:\n create container based on Ubuntu install Java 8 set Java 8 as default Java version install wget download SAP Hybris Commerce Suite via wget unpack downloaded SAP Hybris Commerce Suite remove downloaded zipped package to save some disk space run configured installation recipe compile the project run system initialization  It may take some time. If you have good hardware setup it may take about 30 minutes.\nRunning Docker container When everything is done, you can run docker image, with the command:\n./ydocker -r After that, Docker will start the server at localhost (127.0.0.1) and port 9002, which is exposed. Commerce Suite will be started in a default configuration, which is not production ready, but is good for testing and demonstration purposes. You need to wait for a few minutes to let the server warm up and then you can open administration console from the browser at http://127.0.0.1:9002. In addition, if you want to browse generated configuration or unpacked suite, you can run Docker container with CLI with the following command:\n./ydocker -c It won\u0026rsquo;t start the server, but allow you to take a look around container via terminal.\nSummary That\u0026rsquo;s it! This proof of concept shows that we can get, build and run complicated and a huge project like SAP Hybris Commerce Suite inside Docker container, automate a lot of manual work and transform old school manual deployment and build process into elegant and standardized Docker container.\n","permalink":"https://wittchen.io/posts/dockerizing-hybris/","summary":"Introduction A few months ago, I started work at Hybris, which was acquired by SAP, so our \u0026ldquo;division\u0026rdquo; is officially called SAP Hybris. I work in a team developing an extension for Hybris platform with assisting extensions and internal framework. There are many teams around the world developing their own extensions, which are finally integrated and packed into Commerce Suite provided to the clients and partners. We have our own development environment, but sometimes there\u0026rsquo;s need to build and run whole Commerce Suite in the case of system tests, bug reproduction, verification, etc.","title":"Dockerizing Hybris"},{"content":"I\u0026rsquo;ve recently released new version of ReactiveNetwork library for Android. Here are the fresh release notes for version 0.2.0:\n added possibility to observe WiFi signal level with observeWifiSignalLevel(context, numLevels) and observeWifiSignalLevel(context) method created WifiSignalLevel enum added internet check to parameters of getConnectivityStatus(context, checkInternet) method made getConnectivityStatus(context, checkInternet) method public changed String variable status in ConnectivityStatus enum to description and made it public changed output of the toString() method in ConnectivityStatus to keep consistency with another enum made ReactiveNetwork class non-final bumped Kotlin version in sample app to 1.0.0-rc-1036 increased immutability of code of the library updated sample apps and documentation  Thanks to @llp and his Pull Request, we are able to observe WiFi signal level AKA RSSI now!\nIt\u0026rsquo;s one of the most interesting features in the newest release. We can do it as follows:\nnew ReactiveNetwork().observeWifiSignalLevel(context, numLevels) .subscribeOn(Schedulers.io()) ... // anything else what you can do with RxJava  .observeOn(AndroidSchedulers.mainThread()) .subscribe(new Action1\u0026lt;Integer\u0026gt;() { @Override public void call(Integer level) { // do something with level  } }); or we can observe an enum value instead of integer:\nnew ReactiveNetwork().observeWifiSignalLevel(context) .subscribeOn(Schedulers.io()) ... // anything else what you can do with RxJava  .observeOn(AndroidSchedulers.mainThread()) .subscribe(new Action1\u0026lt;WifiSignalLevel\u0026gt;() { @Override public void call(WifiSignalLevel signalLevel) { // do something with signalLevel  } }); WifiSignalLevel enum can have the following values:\npublic enum WifiSignalLevel { NO_SIGNAL(0, \u0026#34;no signal\u0026#34;), POOR(1, \u0026#34;poor\u0026#34;), FAIR(2, \u0026#34;fair\u0026#34;), GOOD(3, \u0026#34;good\u0026#34;), EXCELLENT(4, \u0026#34;excellent\u0026#34;); ... } Any feedback will be appreciated!\nHappy coding!\n","permalink":"https://wittchen.io/posts/reactive-network-2/","summary":"I\u0026rsquo;ve recently released new version of ReactiveNetwork library for Android. Here are the fresh release notes for version 0.2.0:\n added possibility to observe WiFi signal level with observeWifiSignalLevel(context, numLevels) and observeWifiSignalLevel(context) method created WifiSignalLevel enum added internet check to parameters of getConnectivityStatus(context, checkInternet) method made getConnectivityStatus(context, checkInternet) method public changed String variable status in ConnectivityStatus enum to description and made it public changed output of the toString() method in ConnectivityStatus to keep consistency with another enum made ReactiveNetwork class non-final bumped Kotlin version in sample app to 1.","title":"ReactiveNetwork - release of v. 0.2.0"},{"content":"Not all songs are available on Spotify and sometimes we need to rip music from audio CDs in order to listen it on our computer or mobile device. There are several approaches to do that. Here is mine: Get RipperX:\nsudo apt-get install ripperx\nPut audio CD into your computer. Open RipperX, select All Tracks and check Rip to WAV option. Set quality of output files via \u0026ldquo;Config\u0026rdquo; option and names of the tracks if your want. Press \u0026ldquo;Go!\u0026rdquo;. After conversion, you should have directory with ripped *.wav files in your home directory. Get SoundConverter:\nsudo apt-get install soundconverter Run it and convert *.wav files to *.mp3. You can choose another output format if you want. Get EasyTag:\nsudo add-apt-repository ppa:amigadave/ppa sudo apt-get update sudo apt-get install easytag Open EasyTag and set appropriate tags for your *.mp3 files. You can also set CD cover as image for each file. You are done! Now, you can import files to your favorite music player. I\u0026rsquo;m using Spotify right now, where I can select local files, create a playlist and even sync it with my mobile device if my computer is in the same WiFi network. It\u0026rsquo;s very handy option. I hope, this short tutorial will be helpful for you.\n","permalink":"https://wittchen.io/posts/converting-cd-to-mp3-on-linux/","summary":"Not all songs are available on Spotify and sometimes we need to rip music from audio CDs in order to listen it on our computer or mobile device. There are several approaches to do that. Here is mine: Get RipperX:\nsudo apt-get install ripperx\nPut audio CD into your computer. Open RipperX, select All Tracks and check Rip to WAV option. Set quality of output files via \u0026ldquo;Config\u0026rdquo; option and names of the tracks if your want.","title":"Converting audio CD to mp3 files on Linux"},{"content":"Introduction Can you answer the following questions about your Git repository?\n Does development branch has all changes from master branch? Is your gitlog a crap? How old are your branches?  If not, but you want to know answers, you\u0026rsquo;re lucky, because I prepared 3 simple scripts for you, which can help to find it out.\nDoes development branch has all changes from master branch? git-branch-comparator is a python script, which checks if development branch has all changes from master branch in Git repository. Another, easier way to accomplish the same task suggested in comments by Mike (thanks!) is to call simply:\n$ git pull $ git branch --contains master --no-merged development When we are working in a Git Flow and critical bug occurs on production, sometimes there is a necessity to create so called hot-fix. We can create separate branch from master branch for this hot-fix and then merge it into master branch or we can commit a change on master branch. Second option is not recommended. After that, we have to remember to merge master branch into a development branch to have our hot-fix in a development version as well and avoid merge conflicts in the future. This python script checks, if all changes made on master branch were also merged into development branch to keep those two branches consistent. We can add it as a job into Jenkins CI server and monitor branches consistency. In addition, release jobs can depend on that job and we can avoid merge conflicts or project unstability before release.\nsource code \u0026amp; documentation: https://github.com/pwittchen/git-branch-comparator\nIs your gitlog a crap? craplog is a python script, which checks if git git log of the given project is crappy or not. Right now, script is very simple. It just checks if more than half of the commit messages are good. Commit message is considered as good, when it contains more than two words. Of course, this is not the only condition determining the quality of the commit message, but this is early beta version of the script and can be improved later. I\u0026rsquo;ve read a discussion in one of the pull requests to Linux kernel. It made me think about quality of Git commit messages. Of course, Linux kernel is a specific project and has its own standards. Maybe not all of these standards will be valid for a simpler or less complicated projects. Nevertheless, a lot of people don\u0026rsquo;t pay attention to git commit messages. They put crappy stuff inside them like random letters and numbers or stupid expressions, which has no specific meaning, aren\u0026rsquo;t related to the project or aren\u0026rsquo;t informative enough. In my opinion, good git log is one of the factors determining good quality of the project. Sometimes, we need to browse log to find some changes or analyze project history in order to fix a bug or find important information. It\u0026rsquo;s easier to do it, when git log is good. I\u0026rsquo;ve made some of the mentioned mistakes in the past, but I try to avoid them now.\nsource code \u0026amp; documentation: https://github.com/pwittchen/craplog\nHow old are your branches? git-aged-branches is a shell script showing git branches of defined repository with age of their last commit. It works on Mac OS X, Linux and can be helpful while investigating old Git branches to delete. This script does not delete anything! It\u0026rsquo;s just for informational purposes.\nsource code \u0026amp; documentation: https://github.com/pwittchen/git-aged-branches\nSummary I hope, some of you will find these tools useful and maybe they\u0026rsquo;ll solve your current problems or help to improve quality of your projects. If you would like to know more details about mentioned projects, check instructions how to use them and their source code, visit linked repositories on GitHub.\nNote: Any feedback, new issues or pull requests are appreciated!\n","permalink":"https://wittchen.io/posts/3-questions-about-your-git-repo/","summary":"Introduction Can you answer the following questions about your Git repository?\n Does development branch has all changes from master branch? Is your gitlog a crap? How old are your branches?  If not, but you want to know answers, you\u0026rsquo;re lucky, because I prepared 3 simple scripts for you, which can help to find it out.\nDoes development branch has all changes from master branch? git-branch-comparator is a python script, which checks if development branch has all changes from master branch in Git repository.","title":"3 questions about your Git repository"},{"content":"I was asked to be a speaker during GDG DevFest 2015 conference in Warsaw, Poland. Of course, I accepted this invitation and prepared presentation titled \u0026ldquo;Reactive Live Coding\u0026rdquo;. Presentation covered basics of Reactive Programming, RxJava and RxAndroid. Besides my talk I\u0026rsquo;ve done live coding to show how to use mentioned libraries and basics principles of Reactive Programming in real life. I had only 20 minutes for all of that, so my time-box was very limited. Being a speaker at conference was really interesting and challenging experience, which I haven\u0026rsquo;t had before. Moreover, I could meet a lot of interesting people and hear very inspiring talks covering different topics. You can check activity from conference by browsing #devfest15pl hashtag on Twitter and Facebook event. You can also check official website of the conference at devfest.pl. Slides from my presentation are available below.\n{% raw %}\n{% endraw %}\nView presentation slides\nSource code of the exemplary Android app shown and partially coded during the presentation is available at github.com/pwittchen/guitar-browser. Picture documenting part of my short talk made by @depodefi can be found below.\nGDG DevFest organizers have done really good job and I can definitely recommend this conference to anyone interested in new IT technologies.\n","permalink":"https://wittchen.io/posts/reactive-live-coding-gdg-devfest-pl-2015/","summary":"I was asked to be a speaker during GDG DevFest 2015 conference in Warsaw, Poland. Of course, I accepted this invitation and prepared presentation titled \u0026ldquo;Reactive Live Coding\u0026rdquo;. Presentation covered basics of Reactive Programming, RxJava and RxAndroid. Besides my talk I\u0026rsquo;ve done live coding to show how to use mentioned libraries and basics principles of Reactive Programming in real life. I had only 20 minutes for all of that, so my time-box was very limited.","title":"Reactive Live Coding during GDG DevFest 2015 in Poland"},{"content":"I\u0026rsquo;ve recently released version 1.4.0 of Kirai library. Kirai means phrase in Swahili language. It\u0026rsquo;s string formatting library written in Java. It originally started as an Android library, but it evolved to pure Java library. It\u0026rsquo;s first possibilities were basic string formatting and text formatting for Android TextViews. Now, it allows to format strings for Java, Web, Android and even Unix Terminal! Have you ever wanted to have colorful and styled text in your mobile app, website or terminal app? Now you can with an elegant and fluent API! Moreover, I\u0026rsquo;ve added test coverage supported by codecov.io. It\u0026rsquo;s really nice service, which integrates with Travis CI and is free for open-source projects. It\u0026rsquo;s available for various programming languages and build systems. Check library source code and samples at: https://github.com/pwittchen/kirai.\nYou can add it to your project via Maven:\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.github.pwittchen.kirai\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;library\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.4.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; or through Gradle:\ndependencies { compile \u0026#39;com.github.pwittchen.kirai:library:1.4.0\u0026#39; } ","permalink":"https://wittchen.io/posts/new-release-of-kirai-140/","summary":"I\u0026rsquo;ve recently released version 1.4.0 of Kirai library. Kirai means phrase in Swahili language. It\u0026rsquo;s string formatting library written in Java. It originally started as an Android library, but it evolved to pure Java library. It\u0026rsquo;s first possibilities were basic string formatting and text formatting for Android TextViews. Now, it allows to format strings for Java, Web, Android and even Unix Terminal! Have you ever wanted to have colorful and styled text in your mobile app, website or terminal app?","title":"New release of Kirai - elegant string formatting library for Java"},{"content":"Introduction In the last days I prepared a bunch of updates in my open-source software for Android. Most of them are bug fixes and are related to increasing robustness of the projects as well as their overall quality. I also decided to play a little with Kotlin language from JetBrains, which seems to be reasonable choice for mobile applications running on Android. Nevertheless, writing an app in Kotlin requires some additional configuration and we should remember, it\u0026rsquo;s still in beta version. If you are interested in Kotlin programming for Android, take a look at Getting started with Android and Kotlin guide from official Kotlin website. You can also take a look at one of my sample apps written in Kotlin and its configuration in Gradle.\nSummary of updates ReactiveNetwork v. 0.1.3  fixed bug with incorrect status after going back from background inside the sample app reported in issue #31 fixed RxJava usage in sample app fixed RxJava usage in code snippets in README.md added static code analysis updated code formatting added sample sample app in Kotlin  Unfortunately, in Android we cannot use Java 8 yet and code should be written in Java 7. We can do some hacks like using RetroLambda or libraries implementing part of functionalities available in Java 8 like streams, but these solutions are still hacks - not the right way. In Kotlin we can use lambdas like in Java 8. In addition, we have a lot of other cool features, which allow us to write less lines of code and detect possible mistakes while writing apps. E.g. Kotlin helps us to avoid NPEs with its additional operators like !!, which tells us that NPE can occur, so we can think of eliminating this possibility. If we don\u0026rsquo;t use this operator when we should, IntelliJ IDEA or Android Studio will warn us. Below, we can see exemplary usage of ReactiveNetwork library with Kotlin. In this code snippet, we are using so called synthetic properties from Kotlin Extensions for Android. Value connectivity_status is an id of the view defined in XML layout. We can call it directly in Kotlin code and treat as object. It\u0026rsquo;s really useful and allows us to avoid calling findViewById(...) method for every view in Activity or injecting views with additional libraries like ButterKnife or KotterKnife. It means that we can get rid of a lot of boilerplate code.\nReactiveSensors  fixed RxJava usage in sample app fixed RxJava usage in code snippets in README.md added static code analysis refactored sample app and removed repetitions in code  In this project I made only changes inside the documentation, improved Gradle configuration and added another sample app. There were no changes inside the library code, so there was no need to release new library version to Maven Central Repository. Moreover, I\u0026rsquo;m going to add sample app in Kotlin for this project in the nearest future.\nReactiveBeacons v. 0.3.0  replaced distinct() operator with distinctUntilChanged() operator in Observable observe() method in ReactiveBeacons class added permissions ACCESS_FINE_LOCATION and ACCESS_COARSE_LOCATION to satisfy requirements of Android 6 renamed void requestBluetoothAccessIfDisabled(activity) method to void requestBluetoothAccess(activity) added boolean isBluetoothEnabled() method added boolean isLocationEnabled(context) method added void requestLocationAccess(activity) method modified sample app in order to make it work on Android 6 Marshmallow reduced target API from 23 to 22 in library due to problems with additional permissions and new permission model (it can be subject of improvements in the next releases) added package private AccessRequester class added sample app in Kotlin  WeatherIconView v. 1.1.0  added icons from 2.0 version of the original weather-icons project updated compile sdk version updated Gradle Build Tools version  Prefser v. 2.0.2  fixed bug reported in issue #70: get(...) method now returns a null value instead of \u0026ldquo;null\u0026rdquo; string when setting default value to null of String type fixed RxJava usage in sample app fixed RxJava usage in code snippets in README.md changed code formatting to SquareAndroid added static code analysis improved code according to static code analysis suggestions  Kirai v. 1.1.0  removed formatter(...) method from Kirai class added format(...) method accepting implementation of Formatter interface to Kirai class added Syntax interface and HtmlSyntax class implementing this interface added put(String key, Object value, Syntax syntax) method to Piece class set HtmlSyntax as default Syntax implementation in Piece class removed dependencies to Android SDK updated project dependencies applied Square code style updated tests, sample app and code snippets in README.md added gh-pages with JavaDoc  Any suggestions of further improvements are more than welcome as usual!\n","permalink":"https://wittchen.io/posts/bunch-of-updates-in-my-android-oss/","summary":"Introduction In the last days I prepared a bunch of updates in my open-source software for Android. Most of them are bug fixes and are related to increasing robustness of the projects as well as their overall quality. I also decided to play a little with Kotlin language from JetBrains, which seems to be reasonable choice for mobile applications running on Android. Nevertheless, writing an app in Kotlin requires some additional configuration and we should remember, it\u0026rsquo;s still in beta version.","title":"Bunch of updates in my OSS for Android"},{"content":"Introduction I recently read series of three articles titled An Opinionated Guide to Modern Java by Parallel Universe. It presents really interesting point of view and can be read even by non-Java developers due to its form. Non-Java developers can learn that Java can be fast, elegant and lightweight as much as other hipster technologies like Ruby, Go or Node.js. The main difference is the fact that Java is quite old and widely used technology what means it\u0026rsquo;s well tested, stable, solid, has great development and monitoring tools. Besides widely known projects, author of the articles presents some information about tools built by Parallel Universe, which are not commonly used and are less popular, but are also worth considering for modern development. E.g. he writes about so called Capsule project, which is intended to be a Docker alternative for Java and Quasar, which is interesting high level API for multi-threading with concept of actors, which is also available in Akka and Erlang. I recommend any Java and non-Java developer to read this series to learn new things and consolidate the knowledge.\nSeries of articles  Not Your Father\u0026rsquo;s Java: An Opinionated Guide to Modern Java Development, Part 1 An Opinionated Guide to Modern Java, Part 2: Deployment, Monitoring \u0026amp; Management, Profiling and Benchmarking An Opinionated Guide to Modern Java, Part 3: Web Development  ","permalink":"https://wittchen.io/posts/an-opinionated-guide-to-modern-java-by-parallel-universe/","summary":"Introduction I recently read series of three articles titled An Opinionated Guide to Modern Java by Parallel Universe. It presents really interesting point of view and can be read even by non-Java developers due to its form. Non-Java developers can learn that Java can be fast, elegant and lightweight as much as other hipster technologies like Ruby, Go or Node.js. The main difference is the fact that Java is quite old and widely used technology what means it\u0026rsquo;s well tested, stable, solid, has great development and monitoring tools.","title":"An Opinionated Guide to Modern Java by Parallel Universe"},{"content":"Recently, I\u0026rsquo;ve created yet another reactive library for Android. It\u0026rsquo;s called ReactiveBeacons and it\u0026rsquo;s responsible for observing BLE (Bluetooth Low Energy) beacons. Beacons are small devices, which became quite popular in the last years. They can be utilized in creating Contextual Awareness, Contextual Computing and Internet of Things. Beacons have lithium battery, are constantly turned on and emit signals via Bluetooth all the time. ReactiveBeacons library allows to transform these signals into Observable stream compatible with RxJava. Whenever new beacon is detected or RSSI (Received signal strength indication) changes, new immutable beacon data is emitted.\nUsage of the library inside the Activity is simple:\nprivate Subscription subscription; @Override protected void onResume() { super.onResume(); // optionally, we can request Bluetooth Access  reactiveBeacons.requestBluetoothAccessIfDisabled(this); subscription = reactiveBeacons.observe() .subscribeOn(Schedulers.io()) .observeOn(AndroidSchedulers.mainThread()) .subscribe(new Action1\u0026lt;Beacon\u0026gt;() { @Override public void call(Beacon beacon) { // do something with beacon  } }); } We also have to remember to unregister subscription correctly in order to stop BLE scan, which can drain the battery.\n@Override protected void onPause() { super.onPause(); subscription.unsubscribe(); } If you want to use this library in your project, add the following dependency to your build.gradle file.\ndependencies { compile \u0026#39;com.github.pwittchen:reactivebeacons:0.0.1\u0026#39; } Don\u0026rsquo;t forget to add dependency to RxAndroid if you want to use Android-specific features of RxJava.\nSource code of the library can be found at: https://github.com/pwittchen/ReactiveBeacons.\nAny new issues or pull requests are welcome!\nHappy coding!\n","permalink":"https://wittchen.io/posts/introducing-reactive-beacons/","summary":"Recently, I\u0026rsquo;ve created yet another reactive library for Android. It\u0026rsquo;s called ReactiveBeacons and it\u0026rsquo;s responsible for observing BLE (Bluetooth Low Energy) beacons. Beacons are small devices, which became quite popular in the last years. They can be utilized in creating Contextual Awareness, Contextual Computing and Internet of Things. Beacons have lithium battery, are constantly turned on and emit signals via Bluetooth all the time. ReactiveBeacons library allows to transform these signals into Observable stream compatible with RxJava.","title":"Introducing ReactiveBeacons"},{"content":" What is a terminal multiplexer? It lets you switch easily between several programs in one terminal, detach them (they keep running in the background) and reattach them to a different terminal. And do a lot more.\n - tmux.github.io\nTmux feature, which I find very useful is tiling terminal window. We can have several tiles with different terminals within a single terminal window.\nHow to use tiling? First, we need to install tmux:\n$ sudo apt-get install tmux\nThen, we need to start it:\n$ tmux\nWhen we are inside tmux, we can execute its commands. It\u0026rsquo;s good to check full list of tmux key bindings. Default initial key binding for different commands is Ctrl+B. When we hold Ctrl and then press B, we can press next key for specific command. It\u0026rsquo;s tricky and it isn\u0026rsquo;t intuitive at the first time. For example, if we want to split terminal window vertically, we need to do the following thing: Start tmux, Hold Ctrl, press B (while holding Ctrl), release buttons and press % key (equivalent to Shift+5). If we want to split terminal window horizontally, we need to do the following thing: Start tmux, Hold Ctrl, press B (while holding Ctrl), release buttons and press \u0026quot; key (equivalent to Shift+' - code for ' sign is 47 for xdotool). We can create any tile configuration we want like in i3 windows manager.\nIf we want to switch between tiles, we need to use the following key combination: Hold Ctrl, press B (while holding Ctrl), release buttons and press O key (\u0026ldquo;O\u0026rdquo; letter - not zero).\nCreating 4 tiles automatically Popular terminal windows configuration is 4 tiles (2 columns and 2 rows). We can split windows horizontally or vertically pretty fast with default shortcuts, but creating layout consisting of 4 tiles requires some clicking. I\u0026rsquo;ve written a simple script, which generates such layout for us automatically and saves the time. First, we need to install xdotool:\n$ sudo apt-get install xdotool Next, we can create file named tmux-4tiles, set its chmod to 777 and save it in /usr/local/bin/ directory. File should have the following content:\n#!/bin/bash \\# generates 4 tiles in tmux (requires tmux and xdotool) xdotool key ctrl+b shift+5 \u0026amp;\u0026amp; xdotool key ctrl+b shift+48 \u0026amp;\u0026amp; xdotool key ctrl+b o \u0026amp;\u0026amp; xdotool key ctrl+b shift+48 ctrl+b o ctrl+b o ctrl+b o \u0026amp;\u0026amp; clear When, we are done, we can enter tmux:\n$ tmux and run the script:\n$ tmux-4tiles After that, we\u0026rsquo;ll get the following layout:\nWe can automate generating different layouts for our purposes in the same way.\nRecap In my opinion, tmux is very useful tool for people working with terminal who want to have organized windows in an elegant way.\nReferences  tmux website: https://tmux.github.io/ tmux source code: https://github.com/tmux/tmux xdotool website: http://www.semicomplete.com/projects/xdotool/ xdotool source code: https://github.com/jordansissel/xdotool cliclick: http://www.bluem.net/en/mac/cliclick/ - an alternative for xdotool for Mac OS X users  ","permalink":"https://wittchen.io/posts/using-tmux/","summary":"What is a terminal multiplexer? It lets you switch easily between several programs in one terminal, detach them (they keep running in the background) and reattach them to a different terminal. And do a lot more.\n - tmux.github.io\nTmux feature, which I find very useful is tiling terminal window. We can have several tiles with different terminals within a single terminal window.\nHow to use tiling? First, we need to install tmux:","title":"Using tmux"},{"content":"Another month, another library. Recently, I\u0026rsquo;ve released yet another reactive library called ReactiveSensors. It\u0026rsquo;s an open-source Android library monitoring hardware sensors with RxJava Observables. Library is compatible with RxJava 1.0.+ and RxAndroid 1.0.+ and uses them under the hood.\nLibrary is available at: https://github.com/pwittchen/ReactiveSensors.\nIn my opinion, hardware sensors are perfect case for applying RxJava, because in fact we\u0026rsquo;re constantly receiving a stream of events emitted by many sensors. With Reactive Programming approach we have plenty of possibilities and easy API for manipulating received sensor\u0026rsquo;s data.\nUsage of the library is really simple. You just need to subscribe an Observable with RxJava in the same way like in any other reactive library.\nCode sample below demonstrates how to observe Gyroscope sensor:\nnew ReactiveSensors(context).observeSensor(Sensor.TYPE_GYROSCOPE) .subscribeOn(Schedulers.io()) .filter(ReactiveSensorEvent.filterSensorChanged()) .observeOn(AndroidSchedulers.mainThread()) .subscribe(new Action1\u0026lt;ReactiveSensorEvent\u0026gt;() { @Override public void call(ReactiveSensorEvent reactiveSensorEvent) { SensorEvent event = reactiveSensorEvent.getSensorEvent(); float x = event.values[0]; float y = event.values[1]; float z = event.values[2]; String message = String.format(\u0026#34;x = %f, y = %f, z = %f\u0026#34;, x, y, z); Log.d(\u0026#34;gyroscope readings\u0026#34;, message); } }); } Please note that we are filtering events occuring when sensors reading change with ReactiveSensorEvent.filterSensorChanged() method. There\u0026rsquo;s also event describing change of sensor\u0026rsquo;s accuracy, which can be filtered with ReactiveSensorEvent.filterAccuracyChanged() method. When we don\u0026rsquo;t apply any filter, we will be notified both about sensor readings and accuracy changes.\nWe can observe any hardware sensor in the same way. You can check list of all sensors in official Android documentation.\nI\u0026rsquo;ve created section about Good Practices regarding working with hardware sensors on Android in README.md file in the GitHub repository.You should also read an article about Best Practices for Accessing and Using Sensors in official Android documentation.\nRead more in the README.md file located in the repository of the library at: https://github.com/pwittchen/ReactiveSensors.\nYou can also find JavaDoc at: http://pwittchen.github.io/ReactiveSensors/.\nIf you want to use ReactiveSensors in your project, add the following dependency to your build.gradle file:\ndependencies { compile \u0026#39;com.github.pwittchen:reactivesensors:0.0.1\u0026#39; } Feel free to send me feedback, report an issue or fork the library!\n","permalink":"https://wittchen.io/posts/introducing-reactive-sensors/","summary":"Another month, another library. Recently, I\u0026rsquo;ve released yet another reactive library called ReactiveSensors. It\u0026rsquo;s an open-source Android library monitoring hardware sensors with RxJava Observables. Library is compatible with RxJava 1.0.+ and RxAndroid 1.0.+ and uses them under the hood.\nLibrary is available at: https://github.com/pwittchen/ReactiveSensors.\nIn my opinion, hardware sensors are perfect case for applying RxJava, because in fact we\u0026rsquo;re constantly receiving a stream of events emitted by many sensors. With Reactive Programming approach we have plenty of possibilities and easy API for manipulating received sensor\u0026rsquo;s data.","title":"Introducing ReactiveSensors"},{"content":"Some time ago, I\u0026rsquo;ve decided to learn Python programming language. I thought it may be useful during performing some basic tasks in the system and Linux or Windows scripting. Moreover, it\u0026rsquo;s good language for developing web applications with frameworks like Django, Flask or Bottle. I\u0026rsquo;ve decided to go through all of the tasks in the Learn Python - The Hard Way course. Basic tasks weren\u0026rsquo;t surprising. They were similar to other object oriented languages. In the further tasks we can learn basic features available in Python language, which are not so common for e.g. Java programmers. I\u0026rsquo;ve placed all tasks in learn-python-the-hard-way repository on GitHub. Moreover, in README.md file I\u0026rsquo;ve added information about:\n Installing Python on Windows and Linux Executing Python scripts from terminal Pip package manager and installing it on Windows and Linux Using Pip Unit Testing Virtualenv Scripts on Linux Style Guide for Python Code Development Environments Popular Python web frameworks Useful Python libraries Additional Resources \u0026amp; links  In addition, to learn this language better, I\u0026rsquo;ve decided to create a few simple projects:\n android-resource-converter - scripts converting Android xml resources with translations to csv file and backwards git-branch-comparator - checks if development branch has all changes from master branch in Git repository craplog - verifies whether your git log is a crap or not  What\u0026rsquo;s interesting first two of them were used in production and second project is running regularly on a CI server. Other developers also create similar tools and scripts. For example Pidcat is pretty handy and useful tool for Android developers and it\u0026rsquo;s just a single script written in Python. To sum up, I can tell that Python is great object oriented language with a clean and simple syntax. With this language we can achieve our goals really fast with a few lines of code and readable solution. I recommend to learn this language to broaden our horizon even if we are programming in totally different technologies on daily basis.\n","permalink":"https://wittchen.io/posts/learning-python/","summary":"Some time ago, I\u0026rsquo;ve decided to learn Python programming language. I thought it may be useful during performing some basic tasks in the system and Linux or Windows scripting. Moreover, it\u0026rsquo;s good language for developing web applications with frameworks like Django, Flask or Bottle. I\u0026rsquo;ve decided to go through all of the tasks in the Learn Python - The Hard Way course. Basic tasks weren\u0026rsquo;t surprising. They were similar to other object oriented languages.","title":"Learning python"},{"content":"Introduction I was tired of non-minimal and quite slow Unity desktop environment. Of course, I performed a few tricks to make Unity faster, but still I wasn\u0026rsquo;t satisfied enough. I checked out different desktop environments. I wanted to have clean, minimal and productive environment. I like top panel from Unity as well as HUD and many workspaces. The last thing is quite common among different desktop environments.\nNew desktop environment I decided to choose Gnome classic. It\u0026rsquo;s fast, clean, minimal, works easily with Ubuntu, has top panel and is configurable. My current desktop looks like this:\nUnfortunately, I don\u0026rsquo;t have HUD like in Unity, but after a few days I got used to that. I also turned off all animations and visual effects. Everything works smoothly and looks much better than Unity. In the current configuration I have: Z Shell, Oh-my-zsh, dmenu, Numix Theme and Numix Circle Icons. In addition, I have the same indicators, which I had earlier on Unity and they work fine. I just needed to adjust look of Spotify icon in top panel. Moreover, Gnome Pie was installed later as additional launcher and media controller.\nInstallation of Gnome Classic and Numix Theme I\u0026rsquo;ve installed Gnome Classic as follows:\nsudo apt-get install gnome-session-fallback\nThen, I installed Gnome Tweak Tool and Unity Tweak Tool:\nsudo apt-get install gnome-tweak-tool unity-tweak-tool\nand Compiz Config Manager with plugins:\nsudo apt-get install compizconfig-settings-manager compiz-plugins-extra\nPlease note: to enable alt+tab in gnome classic fallback, open the manager and navigate to window management and check application switcher (previously disabled). After that I could install Numix icons and theme:\nsudo add-apt-repository ppa:numix/ppa sudo apt-get update sudo apt-get install numix-gtk-theme numix-icon-theme numix-icon-theme-circle\nI\u0026rsquo;ve set appropriate theme and icons via Gnome Tweak Tool. After reboot of the computer changes should be successfully applied.\nDetailed information about configuration If you\u0026rsquo;re interested in detailed configuration information, you can check out my dotfiles at: https://github.com/pwittchen/dotfiles and system configuration at: https://github.com/pwittchen/ubuntu-config. To generate system information for the screenshot I used screenfetch script. I didn\u0026rsquo;t worked correctly for gnome-session-fallback, but I\u0026rsquo;ve made small contribution on GitHub and now it\u0026rsquo;s fine.\nWallpaper You can find wallpaper from the screenshot at papers.co website.\nAlternatives \u0026amp; Resources I\u0026rsquo;ve spent some time on analyzing alternative desktop environments and Linux based operating systems, which looks good. Below, you can find my collection of information and resources. Maybe some of them will be better for your specific needs. Interesting Reddit channels:\n https://www.reddit.com/r/unixporn https://www.reddit.com/r/linuxmasterrace https://www.reddit.com/r/linux  Selected Linux based systems with interesting user interface:\n Solus Project (formely Evolve OS) Ozon OS Elementary OS Freya  Selected Linux window managers:\n Unity KDE Gnome Xfce Budgie (from Solus Project) Elementary OS i3  Recap After switching from Unity to Gnome my desktop is much more better, faster and cleaner. After mastering popular shortcuts for managing programs, windows, workspaces, etc. we can work very efficiently. Gnome Classic is fine for me right now, but maybe other WM will be better for you. It depends on your personal preferences. I\u0026rsquo;m gonna use Gnome Classic for some time and maybe I\u0026rsquo;ll try other environments in the future. For sure I won\u0026rsquo;t go back to Unity if it don\u0026rsquo;t evolve.\n","permalink":"https://wittchen.io/posts/gnome-classic-ubuntu/","summary":"Introduction I was tired of non-minimal and quite slow Unity desktop environment. Of course, I performed a few tricks to make Unity faster, but still I wasn\u0026rsquo;t satisfied enough. I checked out different desktop environments. I wanted to have clean, minimal and productive environment. I like top panel from Unity as well as HUD and many workspaces. The last thing is quite common among different desktop environments.\nNew desktop environment I decided to choose Gnome classic.","title":"Gnome Classic desktop environment on Ubuntu"},{"content":"Recently a few people asked me, what are my methods for gathering knowledge and being up to date with all news connected with Android. I didn\u0026rsquo;t really think about that. I just grabbed all knowledge from a various places and then tried to use it in practice. I decided to sum everything up and create a collection of my knowledge resources. Of course, we are not able to use all of that every day, because it\u0026rsquo;s too much, but it\u0026rsquo;s good to know where we can find something interesting. Android is very dynamic mobile platform, which changes really fast. It\u0026rsquo;s hard to be up to date with all of new features and programming techniques. That\u0026rsquo;s why it\u0026rsquo;s worth to find places where we can gather interesting information. Below, I collected some resources, links and information, which I find useful for learning Android \u0026amp; Java and being up to date with Android development.\nPodcasts  Fragmented Podcast - talks about building good software and becoming better Android developer - you can hear interviews with famous developers like Jake Wharton here  Videos  Square Engineering - channel on YouTube  Collections of articles, issues \u0026amp; libraries  Android Weekly - free newsletter that helps us to stay cutting-edge with our Android Development Android Arsenal - huge collection of categorized open-source Android libraries and tools Slicedham.co - collection of engineering stories (not only about Android)  Blogs Not all articles on the blogs below are connected with Android.\n Google Android Developers Facebook Square Airbnb Pinterest Netflix New York Times Spotify Dropbox Allegro Polidea Base Future Processing  StackOverflow We can browse interesting topics tagged with Android tag, read them and even try to solve some problems. It will allow us to learn something new or improve existing knowledge.\nGitHub repositories It\u0026rsquo;s worth to check open-source repositories of great companies and developers to see how smart people solve the problems. Not all repositories of the companies and developers below are connected with Android, but most of them do. Moreover, we can still learn a lot from various kinds of OS projects.\nCompanies  Square Google Facebook Spotify JetBrains Netflix The New York Times Twitter Pinterest Airbnb Dropbox Elastic Yalantis Allegro Polidea Base Estimote  Organizations  ReactiveX  Developers  Jake Wharton Jesse Wilson Chris Banes Daimajia Roman Nurik Pierre-Yves Ricau  We can also check trending Java repositories or trending repositories in general. In addition, we can try to analyze source code of various repositories and try to contribute back to them. I guarantee, we\u0026rsquo;ll learn a lot. We can start with small steps and we don\u0026rsquo;t have to implement the most complicated features in the beginning.\nTwitter We can follow famous developers or companies. We can also check tags like: #AndroidDev, #Android or #Java and so on.\nExperiments \u0026amp; open-source projects We can create our own projects. We can publish our app on Google Play or create an open-source library on GitHub and let other people use it and review it. Then, we\u0026rsquo;ll be able to determine if our libraries are usable, code is clean, API is simple and documentation informative enough. In addition, other developers can report bugs or new issues, which will allow improve our projects and develop our programming and communication skills.\nOther Meetings, conferences, hackathons, etc. Sometimes it\u0026rsquo;s good to go to a conference, meeting, etc. to talk with people and learn from them. We can take a look at the events around us, attend them or maybe present something. If there\u0026rsquo;s no events in our location, we can always organize one and ask others for help!\nBooks It\u0026rsquo;s good to have strong basics. Not every book is universal and valuable over the time, but there\u0026rsquo;re a few fundamental positions for programmers worth reading like Clean Code, Effective Java, Java Concurrency in Practice \u0026amp; Test Driven Development: By Example. It\u0026rsquo;s an open list and we can always extend it with another position on our shelf.\nWhat else? Everyone has his or her own method of learning new things. If you know another interesting resources or methods, share them in comments below this article.\n","permalink":"https://wittchen.io/posts/learning-android/","summary":"Recently a few people asked me, what are my methods for gathering knowledge and being up to date with all news connected with Android. I didn\u0026rsquo;t really think about that. I just grabbed all knowledge from a various places and then tried to use it in practice. I decided to sum everything up and create a collection of my knowledge resources. Of course, we are not able to use all of that every day, because it\u0026rsquo;s too much, but it\u0026rsquo;s good to know where we can find something interesting.","title":"Learning Android and being up to date"},{"content":"I\u0026rsquo;ve recently released ReactiveNetwork. It is an open-source Android library listening network connection state and change of the WiFi signal strength with RxJava Observables. It\u0026rsquo;s a successor of Network Events library rewritten with Reactive Programming approach.\nLibrary is compatible with RxJava 1.0.+ and RxAndroid 1.0.+ and uses them under the hood. Min Android SDK version is 9. JavaDoc can be found at: http://pwittchen.github.io/ReactiveNetwork. Repository is available at: https://github.com/pwittchen/ReactiveNetwork.\nThis library is much simpler and easier to use than NetworkEvents. Even code-base is much smaller, but we have to remember that it utilizes powerful RxJava and RxAndroid. RxJava hase huge API and gives a lot of possibilities. That\u0026rsquo;s why I was able to obtain desired result with fewer lines of code.\nBasic library usage is quite simple. E.g if we want to monitor ConnectivityStatus (WIFI_CONNECTED, MOBILE_CONNECTED or OFFLINE), we can create the following subscription, which is quite familiar for software developers who already know RxJava:\nnew ReactiveNetwork().observeConnectivity(context) .subscribeOn(Schedulers.io()) ... // anything else what you can do with RxJava  .observeOn(AndroidSchedulers.mainThread()) .subscribe(new Action1() { @Override public void call(ConnectivityStatus connectivityStatus) { // do something with connectivityStatus  } }); When we want to monitor available WiFi Access Points and we want to get fresh list of them whenever strength of the WiFi Access Points signal changes (e.g. when we are moving with a mobile device around), we can use the following code snippet:\nnew ReactiveNetwork().observeWifiAccessPoints(context) .subscribeOn(Schedulers.io()) ... // anything else what you can do with RxJava  .observeOn(AndroidSchedulers.mainThread()) .subscribe(new Action1\u0026lt;List\u0026lt;ScanResult\u0026gt;\u0026gt;() { @Override public void call(List\u0026lt;ScanResult\u0026gt; scanResults) { // do something with scanResults  } }); If you want to use ReactiveNetwork in your project, add the following dependency to your build.gradle file:\ndependencies { compile \u0026#39;com.github.pwittchen:reactivenetwork:0.0.2\u0026#39; } Find more in the GitHub repository of the project at: https://github.com/pwittchen/ReactiveNetwork. It\u0026rsquo;s worth mentioning that this library was featured on Android Arsenal, Android Weekly and Android Weekly China websites. I hope you will find it useful and you will make your apps more reactive! Feel free to fork the library. Any feedback is welcome as usual.\n","permalink":"https://wittchen.io/posts/introducing-reactive-network/","summary":"I\u0026rsquo;ve recently released ReactiveNetwork. It is an open-source Android library listening network connection state and change of the WiFi signal strength with RxJava Observables. It\u0026rsquo;s a successor of Network Events library rewritten with Reactive Programming approach.\nLibrary is compatible with RxJava 1.0.+ and RxAndroid 1.0.+ and uses them under the hood. Min Android SDK version is 9. JavaDoc can be found at: http://pwittchen.github.io/ReactiveNetwork. Repository is available at: https://github.com/pwittchen/ReactiveNetwork.\nThis library is much simpler and easier to use than NetworkEvents.","title":"Introducing ReactiveNetwork"},{"content":"I\u0026rsquo;ve recently released Prefser library v. 2.0.0. Prefser is a wrapper for Android SharedPreferences with object serialization and RxJava Observables. This update couldn\u0026rsquo;t be done without help of awesome open-source community and people who reported new issues and created pull requests. Thanks for that! A lot of issues related to RxJava was fixed. Moreover, now we can store and retrieve lists of objects of any type with Prefser. Examples of library usage can be found in README.md file and in unit tests covering 96% of the code. Below, you can find release notes for this version of the library:\n fixed not keeping reference to listener when Observable instance is reused fixed not unregistering listener, which causes onNext() even after unsubscribe() fixed possible missed update with getAndObserve() removed observe(sharedPreferences) method - backward incompatible changed observeDefaultPreferences() method name to observePreferences() - backward incompatible added TypeToken and use of generics for interfaces added possibility to store Lists of different types of data including custom objects added more unit tests updated test dependencies updated JavaDoc available at http://pwittchen.github.io/prefser/  Feel free to fork the project or report new issues! Any kind of feedback is warmly welcome.\n","permalink":"https://wittchen.io/posts/releasing-prefser-2/","summary":"I\u0026rsquo;ve recently released Prefser library v. 2.0.0. Prefser is a wrapper for Android SharedPreferences with object serialization and RxJava Observables. This update couldn\u0026rsquo;t be done without help of awesome open-source community and people who reported new issues and created pull requests. Thanks for that! A lot of issues related to RxJava was fixed. Moreover, now we can store and retrieve lists of objects of any type with Prefser. Examples of library usage can be found in README.","title":"Releasing prefser 2.0.0"},{"content":"Overview I was using web interfaces for e-mail for a long time, but I wanted to give a try a desktop clients for Linux. I was searching for a quite simple solution with almost zero configuration, which I can use for my private and work e-mail accounts. Geary seems to be quite good choice. It is clean, easy to use and pretty neat e-mail client for Linux. It integrates with Unity on Ubuntu and display system notifications informing about new message. Unfortunately, we need it running in order to see notifications, which is small drawback. Nevertheless it works quite good, so I\u0026rsquo;m going to give it a try. Install it with the following command:\nsudo apt-get install geary Pros \u0026amp; cons Here is my list of pros and cons of this software.\nPros  almost zero configuration clean \u0026amp; neat interface multiple e-mail accounts integration with the system and notifications informing about new messages recipient suggestions without importing contacts limiting range of downloaded messages - e.g. we can download everything or just messages from last 2 weeks it\u0026rsquo;s open-source: https://github.com/GNOME/geary - as we can see on GitHub, it\u0026rsquo;s actively developed it\u0026rsquo;s free  Cons  almost zero configuration, which may be drawback for some people ;-) recipient suggestions does not work with all contacts (I suppose it may be connected with range of downloaded messages) notifications works only when application is running no contact list no calendar available  Interesting fact It\u0026rsquo;s written in Vala language.\nRecap Not all mentioned cons are really bad. As it\u0026rsquo;s just an e-mail client, it doesn\u0026rsquo;t need to have contact list or calendar. It\u0026rsquo;s additional functionality, but there may be some problems while working with systems like MS Exchange or something similar where user need to confirm presence on appointment at work or something like that. To sum up, regardless of a few drawbacks, I can tell that Geary is really nice piece of software, which can be used on daily basis by people who like simple solutions.\n","permalink":"https://wittchen.io/posts/geary-email-client-for-linux/","summary":"Overview I was using web interfaces for e-mail for a long time, but I wanted to give a try a desktop clients for Linux. I was searching for a quite simple solution with almost zero configuration, which I can use for my private and work e-mail accounts. Geary seems to be quite good choice. It is clean, easy to use and pretty neat e-mail client for Linux. It integrates with Unity on Ubuntu and display system notifications informing about new message.","title":"Geary - neat e-mail client for Linux"},{"content":"I\u0026rsquo;ve recently released NetworkEvents library v. 2.0.0. It\u0026rsquo;s an Android library listening network connection state and change of the Wifi signal strength. It has a few significant changes in the API and new features, which people were requesting on GitHub. Moreover, codebase was slightly refactored and updated. I\u0026rsquo;m going to keep major.minor.patch convention AKA semantic versioning now:\n major - new feature or update - backward incompatible minor - new feature - backward compatible patch - bug-fix - backward compatible  A few changes are backward incompatible, so I\u0026rsquo;ve increased major number. Below, you can find list of changes. As you can see, there is a lot of stuff. That\u0026rsquo;s why I\u0026rsquo;ve made the most important changes bold.\n removed withPingUrl(url) method removed withPingTimeout() method removed withoutPing() method removed withoutWifiAccessPointsScan() method removed Otto dependency (now, it\u0026rsquo;s available only for unit tests) removed example-disabling-ping-and-wifi-scan app sample removed example-ping-customization app sample removed NetworkHelper class and moved its method to specific classes with changed scope moved permissions to Manifest of library disabled WiFi scan by default disabled Internet connection check by default added BusWrapper, which is abstraction for Event Bus required by NetworkEvents object added example-greenrobot-bus app sample added enableWifiScan() method added enableInternetCheck() method added getWifiScanResults() method in WifiSignalStrengthChanged event added getMobileNetworkType() method in ConnectivityChanged event added JavaDoc at: http://pwittchen.github.io/NetworkEvents/ updated existing sample applications updated documentation in README.md and library code  Feel free to download, use or fork this library!\n","permalink":"https://wittchen.io/posts/releasing-network-events-2/","summary":"I\u0026rsquo;ve recently released NetworkEvents library v. 2.0.0. It\u0026rsquo;s an Android library listening network connection state and change of the Wifi signal strength. It has a few significant changes in the API and new features, which people were requesting on GitHub. Moreover, codebase was slightly refactored and updated. I\u0026rsquo;m going to keep major.minor.patch convention AKA semantic versioning now:\n major - new feature or update - backward incompatible minor - new feature - backward compatible patch - bug-fix - backward compatible  A few changes are backward incompatible, so I\u0026rsquo;ve increased major number.","title":"Releasing NetworkEvents 2.0.0"},{"content":"Problem overview Recently I had the following problem. I wanted to connect to my Raspberry Pi from my laptop. For some reason WiFi dongle on the Raspberry Pi was not working properly. Moreover, I had only one slot available for the LAN connection via cable to the router, so I could connect only one device this way. I wanted to have reliable and fast internet connection on my laptop, but via WiFi it\u0026rsquo;s quite slow. To sum the things up two goals were clear:\n to have fast and reliable internet connection on the laptop to be able to connect to Raspberry Pi via SSH in order to control it from the laptop  Enabling SSH server on Raspberry Pi Before we proceed to the next steps, we need to enable SSH server on Raspberry Pi if we haven\u0026rsquo;t done it in the past. In order to do that, we need to go through the following steps:\n login with the following information when prompted: username: pi password: raspberry type the following command in the terminal: sudo raspi-config then navigate to ssh hit Enter select enable ssh server reboot device we are done!  Sshuttle to the rescue I tried a few different approaches to solve described problem, but up to now the only one solution satisfies me well. I\u0026rsquo;ve found discussion starting with the question How do I route my internet through a SSH tunnel? In this discussion, I\u0026rsquo;ve read about great tool called sshuttle, which works as a poor man\u0026rsquo;s VPN.\n sshuttle is a transparent proxy server that forwards over a SSH connection and sets up a proxy by running Python scripts on the remote server. sshuttle can be run under the following conditions:\n client machine or router is Linux-based, FreeBSD or Mac OS administrative privileges on client access to remote network via SSH no administrator privileges on remote network availability of Python on remote server   sshutle can be installed with the following command:\nsudo apt-get install sshuttle The basic command for running sshuttle with routing all traffic is:\nsshuttle -r username@sshserver:port 0/0  Upon the execution of the command, a sudo password prompt will appear and subsequently the password to SSH account. No other details will appear except for a short message and return to shell upon failure. For more status messages, run sshuttle in verbose mode with the -v flag. In this example all internet traffic except DNS is routed through the VPN. -r flag denotes the remote hostname and optional username and port that follows in the above example. 0/0 is short for 0.0.0.0/0 that represents the subnets to route over the VPN. The usage of 0/0 routes all the traffic except DNS requests to the remote server. DNS tunelling is possible with the usage of -H flag. Please read the man page (man sshuttle) for the details of options and modes under which sshuttle can run. For information about the concept and more examples, refer to the project page.\n - André Paramés on askubuntu.com\nConnecting to Raspberry Pi and tunneling internet connection Luckily, all requirements were satisfied by Raspberry Pi and I could use it with sshuttle, so I\u0026rsquo;ve installed this software on my laptop. I\u0026rsquo;ve connected to my local network through WiFi. Then, I\u0026rsquo;ve scanned network with nmap to find IP of Raspberry Pi.\nnmap -sP 192.168.1.0/24 My local network consists of only few devices and each of them has a description, so I could easily identify IP of the Raspberry Pi. Output looked like this:\nNmap scan report for livebox.home (192.168.1.1) Host is up (0.0070s latency). Nmap scan report for laptop-piotra-\\*samsung-ultrabook\\*.home (192.168.1.14) Host is up (0.00011s latency). Nmap scan report for pc36.home (192.168.1.17) Host is up (0.018s latency). Nmap done: 256 IP addresses (3 hosts up) scanned in 2.64 seconds Right now, active devices in my network are: router, my laptop and Raspberry Pi, with IP: 192.168.1.17. After that, I connected to Raspberry Pi with the following command:\nsshuttle -r pi@192.168.1.17 0/0 It asked me about the local password and then about the password of remote host, which is raspberry by default and I saw the following message:\nConnected. Everything was fine. I was connected to Raspberry Pi and I was able to access internet through it. Next, I opened another terminal window and tried to connect to Raspberry Pi via SSH. Please note, that you have to enable remote access via SSH on Raspberry Pi before you try to establish connection. When SSH is enabled, you can type the following command:\nssh pi@192.168.1.17 Then I typed correct password and I was connected!\nLinux raspberrypi 3.18.7+ #755 PREEMPT Thu Feb 12 17:14:31 GMT 2015 armv6l The programs included with the Debian GNU/Linux system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. Last login: Sat Jul 25 01:49:00 2015 from pc36.home Short summary What is surprising tunneled internet connection was fast and stable when I was accessing it through Raspberry Pi. When I was accessing internet directly through WiFi on the router it was really slow for some unknown reason. Luckily, I\u0026rsquo;ve achieved my goals: I\u0026rsquo;ve fast internet connection on the laptop and I could establish SSH connection with Raspberry Pi over local network.\n","permalink":"https://wittchen.io/posts/routing-internet-via-ssh-tunnel-on-raspberry-pi/","summary":"Problem overview Recently I had the following problem. I wanted to connect to my Raspberry Pi from my laptop. For some reason WiFi dongle on the Raspberry Pi was not working properly. Moreover, I had only one slot available for the LAN connection via cable to the router, so I could connect only one device this way. I wanted to have reliable and fast internet connection on my laptop, but via WiFi it\u0026rsquo;s quite slow.","title":"Routing internet via SSH tunnel on Raspberry Pi"},{"content":"Sometimes it\u0026rsquo;s good to revise some algorithms and try to implement them in order to get to know, how the built-in functions of high level programming languages actually works. One of the popular problems is string searching. We have many approaches to solve this problem. For example:\n Naive string search algorithm Rabin-Karp string search algorithm Finite-state automaton based search Knuth-Morris-Pratt algorithm Boyer-Moore string search algorithm Bitap algorithm  This time, I\u0026rsquo;ve decided to focus on Knuth-Morris-Pratt (KMP) algorithm. It\u0026rsquo;s quite easy to implement, when you understand it. In addition, its time complexity is quite good and can be defined as O(n). In this algorithm, we simply go through all letters in a given string and compare them with searched string. When position of searched string reaches length of searched string, we can assume, that our string was found. If two compared letters are different, we set position of searched string to zero and start new search from the next position after which we started searching process before. It\u0026rsquo;s quite good described on Wikipedia with some pseudo-code. You can also take a look at my code in Java available below, which I\u0026rsquo;ve written just for practice.\npublic class Main { public static void main(String args[]) { String givenString = \u0026#34;ABC ABCDAB ABCDABCDABDE\u0026#34;; String searchedString = \u0026#34;ABCDABD\u0026#34;; int givenStringLetterPosition = 0; int searchedStringLetterPosition = 0; int foundAt = -1; while (givenStringLetterPosition \u0026lt; givenString.length()) { if (givenString.charAt(givenStringLetterPosition) == searchedString.charAt(searchedStringLetterPosition)) { if(searchedStringLetterPosition == 0) { foundAt = givenStringLetterPosition; } searchedStringLetterPosition++; givenStringLetterPosition++; if(searchedStringLetterPosition == searchedString.length()) { System.out.println(\u0026#34;String found at \u0026#34; + foundAt + \u0026#34; position.\u0026#34;); break; } } else { searchedStringLetterPosition = 0; foundAt++; givenStringLetterPosition = foundAt; if(givenString.length() == givenStringLetterPosition) { System.out.println(\u0026#34;String was not found.\u0026#34;); break; } } } } } Result of the execution of this program should be as follows:\nString found at 15 position. Please note, that we count position of the letter from zero like in the most cases in Computer Science.\n","permalink":"https://wittchen.io/posts/searching-word-in-a-string-with-kmp-algorithm/","summary":"Sometimes it\u0026rsquo;s good to revise some algorithms and try to implement them in order to get to know, how the built-in functions of high level programming languages actually works. One of the popular problems is string searching. We have many approaches to solve this problem. For example:\n Naive string search algorithm Rabin-Karp string search algorithm Finite-state automaton based search Knuth-Morris-Pratt algorithm Boyer-Moore string search algorithm Bitap algorithm  This time, I\u0026rsquo;ve decided to focus on Knuth-Morris-Pratt (KMP) algorithm.","title":"Searching word in a string with KMP algorithm"},{"content":"Today I released Weather Icon View library v. 1.0.0 It\u0026rsquo;s very simple and easy to use Android library, which allows you to use Weather Icons created by Erik Flowers in your mobile applications. This library was already available on GitHub as I wrote in one of my previous posts, but today it was released to Maven Central Repository and you can use it as Maven or Gradle dependency. I was encouraged to make this project more available by the open-source community and people who find it useful as I could read in the issue reported on the repository website. Thanks for that. You can find more details, usage examples and sample app in the repository of the project at: https://github.com/pwittchen/WeatherIconView.\n","permalink":"https://wittchen.io/posts/releasing-weather-icon-view-1-for-android/","summary":"Today I released Weather Icon View library v. 1.0.0 It\u0026rsquo;s very simple and easy to use Android library, which allows you to use Weather Icons created by Erik Flowers in your mobile applications. This library was already available on GitHub as I wrote in one of my previous posts, but today it was released to Maven Central Repository and you can use it as Maven or Gradle dependency. I was encouraged to make this project more available by the open-source community and people who find it useful as I could read in the issue reported on the repository website.","title":"Releasing Weather Icon View v. 1.0.0 for Android"},{"content":"Dr. Venkat Subramaniam presented an interesting point of view during his talk at Devoxx conference. Programmers, who start learning a new language, often complain about syntax. They focus on using available keywords and constructions instead of trying to understand their meaning and purpose. Programmers also have their own habits. That’s why Java has similar syntax to C and C++. Creators of Java designed new language with syntax, which was familiar to them, with significant improvements. Perception of the world is based on experience and things we get used to. The same rule applies to programming languages. Most software developers are familiar with imperative programming paradigm. They often focus on describing computation in terms of statements and changing program state. This approach leads us to necessity of creating a lot of temporary variables and boilerplate code. Let’s have a look at the following code snippet:\nint start = 0; int limit = 10; int i = start; int j = 0; int[] evenNumbers = new int[limit]; double sum = 0; while (j \u0026lt; evenNumbers.length) { if (i % 2 == 0) { evenNumbers[j] = i; j++; } i++; } for (int k = 0; k \u0026lt; evenNumbers.length; k++) { sum += Math.sqrt(evenNumbers[k]); } System.out.println(sum); view raw This code prints sum of the square roots of the first ten even numbers starting from zero. It’s not so complicated task, but there is a lot of code, temporary variables, two loops, we have to be careful with operators to avoid ArrayIndexOutOfBoundsException and so on. Moreover, code is quite hard to analyze and we can make a mistake in many places. Let’s see what happens when we use functional programming approach, Java 8 with stream API and lambdas. We can do the same task in the following way:\nint start = 0; int limit = 10; double sum = Stream .iterate(start, e -\u0026gt; e + 1) .filter(e -\u0026gt; e % 2 == 0) .map(Math::sqrt) .limit(limit) .reduce(0.0, Double::sum); System.out.println(sum); As we can see, the code is simpler, cleaner and easier to analyze. The only difference is the fact that we changed approach from imperative to the functional one and applied different semantics. In this case, instead of focusing on how to do the task, we focused on the result we want to obtain. Instead of learning only syntax, we should spend more time on learning semantics to understand its purpose. This will allow us to create better and robust solutions in less time.\nThis article was also published as a part of summary of Devoxx 2015 Conference in Kraków, Poland on technical blog of Future Processing: http://www.future-processing.pl/blog/devoxx-conference-summary/\n","permalink":"https://wittchen.io/posts/get-past-the-syntax/","summary":"Dr. Venkat Subramaniam presented an interesting point of view during his talk at Devoxx conference. Programmers, who start learning a new language, often complain about syntax. They focus on using available keywords and constructions instead of trying to understand their meaning and purpose. Programmers also have their own habits. That’s why Java has similar syntax to C and C++. Creators of Java designed new language with syntax, which was familiar to them, with significant improvements.","title":"Get past the syntax - the real scare is in the semantics"},{"content":"I am happy to announce that I released version 1.0.5 of Prefser Android library. Prefser is a wrapper for Android SharedPreferences with object serialization and RxJava Observables. What has been done in this version:\n Removed final keyword from Prefser class in order to allow class mocking thanks to @plackemacher Removed unused imports from Prefser class Added test coverage report generation Increased test coverage to 100% Added abstraction for JsonConverter and default GsonConverter Added getAndObserve(...) method Emiting current value right on subscription to Observable with getAndObserve(...) method, which is idea provided by @semanticer. Thanks! Added GitHub pages with generated JavaDoc documentation on gh-pages branch available at: http://pwittchen.github.io/prefser  Moreover you can browse auto-generated reports:\n latest test report at: http://pwittchen.github.io/prefser/test-report latest test coverage report at: http://pwittchen.github.io/prefser/test-coverage-report  Some improvements wouldn\u0026rsquo;t be implemented without engagement of the open-source community on GitHub, so thanks for reporting your issues and providing suggestions! I am always open for improvements in my projects. You can get new version of the library, its source code, download instructions and documentation at: https://github.com/pwittchen/prefser\n","permalink":"https://wittchen.io/posts/releasing-prefser-v-105/","summary":"I am happy to announce that I released version 1.0.5 of Prefser Android library. Prefser is a wrapper for Android SharedPreferences with object serialization and RxJava Observables. What has been done in this version:\n Removed final keyword from Prefser class in order to allow class mocking thanks to @plackemacher Removed unused imports from Prefser class Added test coverage report generation Increased test coverage to 100% Added abstraction for JsonConverter and default GsonConverter Added getAndObserve(.","title":"Releasing prefser v. 1.0.5"},{"content":"Update: see newer article about Unit test coverage report with Travis CI for Robolectric on Android. For a long time, I wasn\u0026rsquo;t able to find the right way to generate test coverage reports for Android instrumentation unit tests created with AndroidJUnit4 runner. In the past I\u0026rsquo;ve found many solutions, but none of them was working or they were compatible only with Robolectric, which I currently don\u0026rsquo;t use. Other developers also stopped using it for the new projects. E.g. Sqlbrite from Square is using AndroidJUnit4 runner as my projects do. Recently, I\u0026rsquo;ve found an interesting discussion on Reddit, where we can find information about enabling test coverage very easily without additional plugins, scripts and many lines of configuration. Moreover, Android SDK currently has built-in support for Emma Test Coverage, what we can read in official documentation. Basically, the only thing we need to do, is to apply jacoco-android plugin in build.gradle file:\napply plugin: \u0026#39;jacoco-android\u0026#39; and then set testCoverageEnabled parameter to true as follows:\nandroid { buildTypes { debug { testCoverageEnabled = true } } } In order to create test coverage report, we need Android device or emulator connected to the computer, because connectedCheck task needs to be executed before creating the report. Next, we can execute the following Gradle task from CLI:\n./gradlew createDebugCoverageReport Task will analyze code of our project in /src/main/java/ directory and unit tests placed in /src/androidTest/java/ directory. After executing this task, we can find test coverage report in the following directory of the module:\n/build/outputs/reports/coverage/debug/ When we open index.html file, we can see visual report from test coverage, which can be viewed in a web browser. Moreover, in the same directory, we can find report.xml file, which can used for test coverage analysis on continuous integration server. Besides mentioned files, Gradle will generate coverage.ec file in the following directory:\n/build/outputs/code-coverage/connected/ In some cases, we may need this file. E.g. if chosen Jenkins plugin or another tool will need it in order to generate test coverage report properly. Below, you can see exemplary test coverage report for Prefser, which is an open-source Android library.\nThis report was generated with JaCoCo code coverage library. After analyzing test coverage report, I\u0026rsquo;ve added a few new unit tests, slightly modified the project and managed to obtain 100% test coverage.\nIn order to publish our report on Jenkins CI, we can use test coverage plugins, but I am not sure about their stability. Another solution is HTML Publisher plugin. We can add post-build action and publish our test coverage report generated by default as HTML website inside Jenkins job. In my opinion, it\u0026rsquo;s quite convenient solution, because it is easy to set up and allows us to navigate to the code, browse uncovered lines, methods and branches. Finally, with this clean and fast solution we can easily monitor test coverage of our Android projects, find bottlenecks and increase overall quality of the applications and libraries.\nLink to the old blog post archive with comments of the users: https://web.archive.org/web/20171210224809/http://blog.wittchen.biz.pl/test-coverage-report-for-android-application\n","permalink":"https://wittchen.io/posts/test-coverage-in-android-applications/","summary":"Update: see newer article about Unit test coverage report with Travis CI for Robolectric on Android. For a long time, I wasn\u0026rsquo;t able to find the right way to generate test coverage reports for Android instrumentation unit tests created with AndroidJUnit4 runner. In the past I\u0026rsquo;ve found many solutions, but none of them was working or they were compatible only with Robolectric, which I currently don\u0026rsquo;t use. Other developers also stopped using it for the new projects.","title":"Test coverage report for Android application"},{"content":"Recently I\u0026rsquo;ve created a simple Python script, which checks whether \u0026lsquo;development\u0026rsquo; branch has all changes from \u0026lsquo;master\u0026rsquo; branch in a Git repository. It\u0026rsquo;s important when we work in a Git Flow. Branch inconsistency may occur when change with hot-fix will be committed to \u0026lsquo;master\u0026rsquo; branch and we forget to merge \u0026lsquo;master\u0026rsquo; branch back to \u0026lsquo;development\u0026rsquo; branch to have our hot-fix in a \u0026lsquo;development\u0026rsquo; version of the project as well. We should keep branch consistency to avoid merge conflicts and problems with release of the project in the future. Mentioned script is able to perform necessary validation helping to detect potential problems. Moreover, script can be integrated with the Jenkins CI server and we can execute it from a command line via Jenkins job. When, changes from \u0026lsquo;master\u0026rsquo; won\u0026rsquo;t be merged into \u0026lsquo;development\u0026rsquo;, job will fail. In opposite case, job should finish with a success. In a Jenkins job we need to remember to add the following Additional Behaviours in Source Code Management (Git) section:\n Clean before checkout Wipe out repository and force clone  Usage of this script is quite simple:\n$ python compare-branches.py \u0026lt;path_to_your_git_repository\u0026gt; Script is open-source and can be found at: https://github.com/pwittchen/git-branch-comparator\n","permalink":"https://wittchen.io/posts/checking-consistency-of-git-branches/","summary":"Recently I\u0026rsquo;ve created a simple Python script, which checks whether \u0026lsquo;development\u0026rsquo; branch has all changes from \u0026lsquo;master\u0026rsquo; branch in a Git repository. It\u0026rsquo;s important when we work in a Git Flow. Branch inconsistency may occur when change with hot-fix will be committed to \u0026lsquo;master\u0026rsquo; branch and we forget to merge \u0026lsquo;master\u0026rsquo; branch back to \u0026lsquo;development\u0026rsquo; branch to have our hot-fix in a \u0026lsquo;development\u0026rsquo; version of the project as well. We should keep branch consistency to avoid merge conflicts and problems with release of the project in the future.","title":"Checking consistency of git branches"},{"content":"Overview Some time ago, I published post about Synapse indicator, which is an alternative to MAC\u0026rsquo;s Spotlight for Ubuntu. Recently, I\u0026rsquo;ve found another software, which is in my opinion even better than Synapse. It\u0026rsquo;s called Mutate. I like it, because it works quite smooth, looks simple and clean. In addition, it\u0026rsquo;s open-source.\nInstallation We can install it with the following commands:\nsudo add-apt-repository ppa:mutate/ppa sudo apt-get update sudo apt-get install mutate Configuration After installation, we can run Mutate from Ubuntu dashboard or via default hot-key CTRL+D and type preference.\nAfter that, we can configure default hot-key for muate. E.g. CTRL+Space as on the screen below or another hot-key, which we prefer.\nThis configuration is saved in ~/.config/Mutate/config.ini file and we can edit it manually. Manual editing is, in my opinion, more convenient, because GUI of Mutate preferences seems to be buggy and config.ini file is quite readable. After editing of the file, changes are available in Mutate immediately without any reboot. We can also add more shortcuts and create our own python or shell scripts in ~/.config/Mutate/scripts/ directory or create references to scripts in other places.\nReferences  Article about Mutate at noobslab.com Source code of Mutate  ","permalink":"https://wittchen.io/posts/mutate-yet-another-spotlight-for-ubuntu/","summary":"Overview Some time ago, I published post about Synapse indicator, which is an alternative to MAC\u0026rsquo;s Spotlight for Ubuntu. Recently, I\u0026rsquo;ve found another software, which is in my opinion even better than Synapse. It\u0026rsquo;s called Mutate. I like it, because it works quite smooth, looks simple and clean. In addition, it\u0026rsquo;s open-source.\nInstallation We can install it with the following commands:\nsudo add-apt-repository ppa:mutate/ppa sudo apt-get update sudo apt-get install mutate Configuration After installation, we can run Mutate from Ubuntu dashboard or via default hot-key CTRL+D and type preference.","title":"Mutate - yet another Spotlight for Ubuntu"},{"content":"Unity desktop environment consumes lot of computer\u0026rsquo;s memory. I\u0026rsquo;ve recently found good article about 4 simple tweaks to improve Unity performance on Ubuntu. Here is the short summary of that tweaks:\nRemove Unwanted Lenses It will speed up loading data under \u0026ldquo;Super\u0026rdquo; button.\nsudo apt-get autoremove unity-lens-music unity-lens-photos unity-lens-gwibber unity-lens-shopping unity-lens-video Install Compiz Config Settings Manager sudo apt-get install compizconfig-settings-manager In Compiz Config Settings Manager perform the following operations:\n Disable Animations and Fading windows Set the Texture Filter to \u0026ldquo;Fast\u0026rdquo;  After that OS won\u0026rsquo;t use additional resources for performing animations.\nInstall Preload sudo apt-get install preload Preload analyzes applications, which are currently used and predicts, which applications might be used. After proper analysis, it loads to memory commonly used software. That process can drastically boost speed of loading programs and overall Ubuntu performance.\n","permalink":"https://wittchen.io/posts/making-ubuntu-faster/","summary":"Unity desktop environment consumes lot of computer\u0026rsquo;s memory. I\u0026rsquo;ve recently found good article about 4 simple tweaks to improve Unity performance on Ubuntu. Here is the short summary of that tweaks:\nRemove Unwanted Lenses It will speed up loading data under \u0026ldquo;Super\u0026rdquo; button.\nsudo apt-get autoremove unity-lens-music unity-lens-photos unity-lens-gwibber unity-lens-shopping unity-lens-video Install Compiz Config Settings Manager sudo apt-get install compizconfig-settings-manager In Compiz Config Settings Manager perform the following operations:\n Disable Animations and Fading windows Set the Texture Filter to \u0026ldquo;Fast\u0026rdquo;  After that OS won\u0026rsquo;t use additional resources for performing animations.","title":"Making Ubuntu faster"},{"content":"Overview I\u0026rsquo;ve recently read great article telling how to improve quality and syntax of your Android code by Vincent Brison. It presents how to use tools like Checkstyle, Findbugs, PMD, and Android Lint for Static Code Analysis in Android project. Static Code Analysis allows us to keep consistency of the source code style and helps us to find errors, warnings, possible bugs, bottlenecks and ways to improve the projects. I highly recommend to use tools like those mentioned.\nExample Visit repository at: https://github.com/vincentbrison/vb-android-app-quality. The most important files are:\n app/build.gradle config/quality.gradle  We can run analysis by executing the following command: ./gradlew check Besides that, we can run each command like checkstyle, findbugs, pmd or lint separately if we want to. In addition, when we build the project with command:\n./gradlew build\ncheck command will be executed as well, because of the following line in quality.gradle file: check.dependsOn 'checkstyle', 'findbugs', 'pmd', 'lint' After that, we can find output with our reports in directory: app/build/reports/. Of course, we can customize output directory and names of the report files. In default configuration, check command with generate reports in HTML format. Only output from the checkstyle operation will be generated in XML format. We can customize findbugs, pmd and lint, to generate XML reports instead of HTML reports in quality.gradle file.\nSensitivity of the build We can customize rules of the Static Code Analysis tools in restrictive and non-restrictive way. In findbugs and pmd task, we can set ignoreFailures attribute as follows: ignoreFailures = false When it\u0026rsquo;s set to false, tasks will only generate reports, but when we set it to true, build will fail, when at least one error will be found. In lint task, we can customize attribute abortOnError as follows: abortOnError true It will literally abort the build, when any lint error occur. Warnings will be ignored. When we want to ignore errors, we can set this attribute to false.\nStatic Code Analysis on CI server When we want to perform Static Code Analysis on CI server, we can do it easily from the command line interface. If we want to automatically collect and analyze reports generated by mentioned tools, we should generate them in XML format instead of HTML, so they can be parsed by appropriate plugins. Mentioned tools can be easily integrated with Jenkins CI server. We need the following plugins:\n Checkstyle FindBugs PMD Android Lint  After installing those plugins, we can define post-build actions in our Jenkins Job, provide paths to the appropriate XML reports and then we can view results of the reports and trend graphs directly from web panel of our Jenkins server. Exemplary trend graphs looks as follows:\nIf we have unit tests in our project, we can also generate test reports and monitor test trend. In the chart below, failed build don\u0026rsquo;t have generated test reports that\u0026rsquo;s why chart may look strange. In addition, number of tests was decreased, because they were migrated from JUnit3 to JUnit4. In JUnit3 for some reason each test case is treated as an additional unit test. JUnit4 report shows real number of tests.\nIn every build, we can browse generated reports and their details.\nI really recommend to use Static Code Analysis tools and reporting plugins on CI in the projects, because they will increase quality of the code really fast and will allow to eliminate many errors before shipping the application.\n","permalink":"https://wittchen.io/posts/static-code-analysis-in-android-project/","summary":"Overview I\u0026rsquo;ve recently read great article telling how to improve quality and syntax of your Android code by Vincent Brison. It presents how to use tools like Checkstyle, Findbugs, PMD, and Android Lint for Static Code Analysis in Android project. Static Code Analysis allows us to keep consistency of the source code style and helps us to find errors, warnings, possible bugs, bottlenecks and ways to improve the projects. I highly recommend to use tools like those mentioned.","title":"Static code analysis in Android project"},{"content":"Recently, I\u0026rsquo;ve seen an unusual talk about The One Hacker Way - a rational alternative to Agile by Erik Meijer. It\u0026rsquo;s really interesting point of view. I recommend to see it.\n One Hacker Way - Erik Meijer from Reaktor on Vimeo. ","permalink":"https://wittchen.io/posts/the-one-hacker-way/","summary":"Recently, I\u0026rsquo;ve seen an unusual talk about The One Hacker Way - a rational alternative to Agile by Erik Meijer. It\u0026rsquo;s really interesting point of view. I recommend to see it.\n One Hacker Way - Erik Meijer from Reaktor on Vimeo. ","title":"The One Hacker Way"},{"content":"Overview When we write unit tests for an Android application, sometimes there\u0026rsquo;s a necessity to mock some classes or interfaces. Instead of writing implementations dedicated for unit tests by hand, we can use Mockito library. We can read article about Mockito on Android on Square\u0026rsquo;s blog. Mockito can make our tests cleaner and better. It can be used both in classic Java projects and Android projects. It\u0026rsquo;s one of the most popular mocking framework in Java and if you\u0026rsquo;re a Java developer who writes unit tests and tries to apply TDD approach, you should be familiar with it.\nSample configuration When we want to use Mockito on Android, we have to remember to add dependency to dexmaker 1.0 and dexmaker-mockito 1.0. Sample test configuration in build.gradle file can look as follows (I\u0026rsquo;ve added more comments to clarify optional doubts):\ndependencies { // our project dependencies go here...  androidTestCompile \u0026#39;com.android.support.test:testing-support-lib:0.1\u0026#39; // Android testing support library  androidTestCompile(\u0026#39;com.google.truth:truth:0.25\u0026#39;) { // Google\u0026#39;s library for assertions (not required by Mockito)  exclude group: \u0026#39;junit\u0026#39; // Android has JUnit built in  } androidTestCompile \u0026#39;com.google.dexmaker:dexmaker:1.0\u0026#39; // required by Mockito  androidTestCompile \u0026#39;com.google.dexmaker:dexmaker-mockito:1.0\u0026#39; // required by Mockito  androidTestCompile \u0026#39;org.mockito:mockito-core:1.9.5\u0026#39; } We should also add information about tesInstrumentationRunner to build.gradle file when we are using it. When we have problems with running our tests, we should configure packagingOptions properly.\nandroid { defaultConfig { ... testInstrumentationRunner \u0026#34;android.support.test.runner.AndroidJUnitRunner\u0026#34; } packagingOptions { exclude \u0026#39;LICENSE.txt\u0026#39; exclude \u0026#39;META-INF/LICENSE.txt\u0026#39; } } Remember Quotation from Mockito website:\n Do not mock types you don’t own Don’t mock value objects Don’t mock everything Show love with your tests!  References  Mockito website (includes instructions, examples and documentation) Main reference documentation (with more examples) Mockito on GitHub Mockito on Google Code (please note: Google Code is closing soon!) Mockito on Android (Square\u0026rsquo;s blog)  ","permalink":"https://wittchen.io/posts/mockito-on-android/","summary":"Overview When we write unit tests for an Android application, sometimes there\u0026rsquo;s a necessity to mock some classes or interfaces. Instead of writing implementations dedicated for unit tests by hand, we can use Mockito library. We can read article about Mockito on Android on Square\u0026rsquo;s blog. Mockito can make our tests cleaner and better. It can be used both in classic Java projects and Android projects. It\u0026rsquo;s one of the most popular mocking framework in Java and if you\u0026rsquo;re a Java developer who writes unit tests and tries to apply TDD approach, you should be familiar with it.","title":"Mockito on Android"},{"content":"I\u0026rsquo;ve recently released Prefser, which is a wrapper for Android SharedPreferences with object serialization and RxJava Observables. Prefser wraps SharedPreferences and thanks to Java Generics provides you simpler API than classic SharedPreferences with only two methods:\nvoid put(String key, Object value); \u0026lt;T\u0026gt; T get(String key, Class classOfT, T defaultValue); Classic SharedPreferences allows you to store only primitive data types and set of strings. Thanks to Gson serialization, Prefser allows you to store:\n Primitive data types (boolean, float, int, long, double) Strings Custom Objects Lists Arrays Sets  In addition, Prefser transforms OnSharedPreferenceChangeListener into Observables from RxJava:\nObservableobserve(final SharedPreferences sharedPreferences); ObservableobserveDefaultPreferences();\nYou can subscribe one of these Observables and monitor updates of SharedPreferences with powerful RxJava. Moreover, you can observe single preference under a specified key with the following method:\nObservableobserve(final String key, final Class classOfT, final T defaultValue)\nFor more details, examples and download instructions visit GitHub webiste of the project at:\nhttps://github.com/pwittchen/prefser\nI\u0026rsquo;ve provided sample app using Prefeser in this repository, which you can check to get familiar with the project. Library is open source, has Unit Tests, Travis CI job and is available on Maven Central Repository. You can depend on it through Maven or Gradle.\n","permalink":"https://wittchen.io/posts/introducing-prefser/","summary":"I\u0026rsquo;ve recently released Prefser, which is a wrapper for Android SharedPreferences with object serialization and RxJava Observables. Prefser wraps SharedPreferences and thanks to Java Generics provides you simpler API than classic SharedPreferences with only two methods:\nvoid put(String key, Object value); \u0026lt;T\u0026gt; T get(String key, Class classOfT, T defaultValue); Classic SharedPreferences allows you to store only primitive data types and set of strings. Thanks to Gson serialization, Prefser allows you to store:","title":"Introducing prefser"},{"content":"As official Android website says:\n Version 1.1 of Android Studio and the Android gradle plugin brings support for unit testing your code. This feature is still considered experimental, we encourage you to try it and file any bugs you find in our bug tracker.\n It\u0026rsquo;s great news, because now we can write Unit Tests with JUnit 4.12 without any \u0026ldquo;hacks\u0026rdquo; or tricky configuration, which had to be done earlier. We can execute two kinds of tests:\n Unit Tests - pure Java tests without Android dependencies written in JUnit, which can be run in Android Studio or CLI via Gradle without emulator or attached device. These tests have to be located in: /src/test/java/ directory. Android Instrumentation Tests - tests for code, which have dependencies to Android Context or Android API and have to be executed on Android emulator or physical device like phone or tablet. These tests have to be located in: /src/androidTest/java/ directory.  Read more at: http://tools.android.com/tech-docs/unit-testing-support and check Gradle Plugin User Guide: http://tools.android.com/tech-docs/new-build-system/user-guide\n","permalink":"https://wittchen.io/posts/unit-testing-support-for-android-studio-11/","summary":"As official Android website says:\n Version 1.1 of Android Studio and the Android gradle plugin brings support for unit testing your code. This feature is still considered experimental, we encourage you to try it and file any bugs you find in our bug tracker.\n It\u0026rsquo;s great news, because now we can write Unit Tests with JUnit 4.12 without any \u0026ldquo;hacks\u0026rdquo; or tricky configuration, which had to be done earlier.","title":"Unit Testing Support for Android Studio 1.1"},{"content":"I\u0026rsquo;ve recently released NetworkEvents v. 1.0.2. In case, you don\u0026rsquo;t know it, it\u0026rsquo;s an Android library listening network connection state and change of the Wifi signal strength. This version has small improvements:\n Updated ping method in NetworkHelper class. Detection of Internet access in WiFi network works faster and is more reliable. Added example of usage of NetworkEvents with Dagger in example-dagger directory in the repository of the project.  Right now, we check Internet connection in a different way. Instead of sending HEAD or GET request to a specific website like www.google.com, we just ping 4.2.2.2 IP address. If you want to know why, read an article about 4.2.2.2: The Story Behind a DNS Legend.\nCheck new version of the project on GitHub: https://github.com/pwittchen/NetworkEvents\n","permalink":"https://wittchen.io/posts/network-events-v102/","summary":"I\u0026rsquo;ve recently released NetworkEvents v. 1.0.2. In case, you don\u0026rsquo;t know it, it\u0026rsquo;s an Android library listening network connection state and change of the Wifi signal strength. This version has small improvements:\n Updated ping method in NetworkHelper class. Detection of Internet access in WiFi network works faster and is more reliable. Added example of usage of NetworkEvents with Dagger in example-dagger directory in the repository of the project.  Right now, we check Internet connection in a different way.","title":"NetworkEvents v. 1.0.2"},{"content":"I\u0026rsquo;ve recently played with Kotlin in order to create simple \u0026ldquo;Hello World\u0026rdquo; Android app using this new, fancy language from JetBrains. Kotlin is another programming language based on JVM, which can work with Java. It\u0026rsquo;s aim is to reduce code boilerplate and create projects faster. In my simple Android project, I\u0026rsquo;ve also used KotterKnife for injecting views. I\u0026rsquo;ve also added one simple ActivityUnitTestCase. Unfortunately, I couldn\u0026rsquo;t convert it into Kotlin, because I wasn\u0026rsquo;t allowed to call constructor of inherited class using super() method. You can read related StackOverflow thread in order to view more details. In order to use Kotlin, I followed instructions from article on JetBrains blog. I\u0026rsquo;ve also needed Kotlin plugin for Android Studio.\nCheck out my GitHub repository: https://github.com/pwittchen/HelloAndroidKotlin View more samples in JetBrains repository: https://github.com/JetBrains/kotlin-examples\nIt\u0026rsquo;s also worth mentioning that there is a project created in Kotlin by JetBrains called Spek which is a specification framework for the JVM and you can use it for writing unit tests in the JVM projects in order to get human readable output.\nFurthermore, you can read document about Using Project Kotlin for Android by Jake Wharton: https://docs.google.com/document/d/1ReS3ep-hjxWA8kZi0YqDbEhCqTt29hG8P44aA9W0DM8/.\nIn order to view basic code constructions in Kotlin, you can browse the following repository: https://github.com/FutureProcessing/kotlin_showandtell.\nKotlin is quite interesting language, which may be some kind of Swift for Android. Basic setup of Android project in Kotlin is definitely easier than project setup in Groovy. It looks promising and I\u0026rsquo;m looking forward to hearing about new updates concerning this language.\n","permalink":"https://wittchen.io/posts/hello-kotlin/","summary":"I\u0026rsquo;ve recently played with Kotlin in order to create simple \u0026ldquo;Hello World\u0026rdquo; Android app using this new, fancy language from JetBrains. Kotlin is another programming language based on JVM, which can work with Java. It\u0026rsquo;s aim is to reduce code boilerplate and create projects faster. In my simple Android project, I\u0026rsquo;ve also used KotterKnife for injecting views. I\u0026rsquo;ve also added one simple ActivityUnitTestCase. Unfortunately, I couldn\u0026rsquo;t convert it into Kotlin, because I wasn\u0026rsquo;t allowed to call constructor of inherited class using super() method.","title":"Hello Kotlin!"},{"content":"I have released NetworkEvents library for Android. It\u0026rsquo;s a wrapper for system Broadcast Receivers built with Otto library. It allows you to listen change of connectivity status (connected to WiFi network with or without Internet access, mobile network, off-line) and change of the WiFi signal strength very easily with @Subscribe annotation. The only thing you need to do, is to create Bus and NetworkEvents objects, register them in onResume() method and unregister them in onPause() method in your activity. After that, you can subscribe for the events you want to listen. Of course, remember to give your app appropriate permissions in AndroidManifest.xml file. In contrast to Broadcast Receivers available in Android SDK, NetworkEvents sends only one event per one occurrence of this event. Android Broadcast Receivers have a bug, which causes sending multiple Intents even if only one event occurred. This behavior may vary on different devices. Regardless of this fact, this bug was handled by NetworkEvents and you shouldn\u0026rsquo;t encounter that problem while using this library. Important facts:\n Minimum Android SDK version required by the library is API 9 (Android 2.3 - GINGERBREAD) or above. Latest version of the library is 1.0.1. Library is available in Maven Central Repository and you can depend on it in your project via Maven or Gradle. Project is open source and available on GitHub. Library has Apache 2.0 License.  For more details, usage and download instructions, visit website of the project at https://github.com/pwittchen/NetworkEvents. Feel free to fork it! If you found any bug or have an idea for improvements, don\u0026rsquo;t hesitate and create an issue or pull request.\n","permalink":"https://wittchen.io/posts/introducing-network-events/","summary":"I have released NetworkEvents library for Android. It\u0026rsquo;s a wrapper for system Broadcast Receivers built with Otto library. It allows you to listen change of connectivity status (connected to WiFi network with or without Internet access, mobile network, off-line) and change of the WiFi signal strength very easily with @Subscribe annotation. The only thing you need to do, is to create Bus and NetworkEvents objects, register them in onResume() method and unregister them in onPause() method in your activity.","title":"Introducing NetworkEvents"},{"content":"In international projects sometimes there\u0026rsquo;s a need to send resource files to the client in order to have translated strings. Client doesn\u0026rsquo;t have to understand XML notation and editing two or more files at the same time is inconvenient. It\u0026rsquo;s easier to send file which can be edited in MS Excel or Libre Office Calc. I\u0026rsquo;ve created Python scripts, which are able to convert Android xml resources with translations to a single *.csv file ready to open in software for common users. In addition, there\u0026rsquo;s another script, which can generate xml resource files with translations from *.csv file. Generating *.csv file from resources is easy:\n$ python xml2csv.py directory_with_resources Exemplary output looks as follows:\nkey;strings_english.xml;strings_polish.xml hello_world;Hello World!;Witaj Świecie! app_name;My application;Moja aplikacja Generating resources from file with translations is easy as well:\n$ python csv2xml.py translations.csv As an output we will get *.xml files containing resources for translations in Android application.\nCheck out repository here: https://github.com/pwittchen/android-resource-converter\n","permalink":"https://wittchen.io/posts/android-resource-converter/","summary":"In international projects sometimes there\u0026rsquo;s a need to send resource files to the client in order to have translated strings. Client doesn\u0026rsquo;t have to understand XML notation and editing two or more files at the same time is inconvenient. It\u0026rsquo;s easier to send file which can be edited in MS Excel or Libre Office Calc. I\u0026rsquo;ve created Python scripts, which are able to convert Android xml resources with translations to a single *.","title":"Android resource converter"},{"content":"Overview Recently I\u0026rsquo;ve developed and realased to Maven Central Repository Kirai, which is flavored Android string formatting library. Kirai means phrase in Swahili language. Project is inspired by phrase, TaggerString and BabushkaText. Kirai has fluent API similar to phrase with additional formatting similar to TaggerString and allows to add formatted pieces of text like BabushkaText. Development including writing Unit Tests took me about 2 days. Deployment and release to Maven Central Repository took me about 2 days as well. It was my first deployment, so it wasn\u0026rsquo;t so easy, but people from Sonatype are helpful, problems were solved very quickly and release went quite smooth.\nUsage Usage of the library is quite simple:\n// Basic Usage  CharSequence formatted = Kirai .from(\u0026#34;Hi {first_name}, your are {age} years old.\u0026#34;) .put(\u0026#34;first_name\u0026#34;, firstName) .put(\u0026#34;age\u0026#34;, age) .format(); // Flavored Usage  CharSequence formatted = Kirai .from(\u0026#34;Hi {first_name}, your are {age} years old.\u0026#34;) .put(Piece.put(\u0026#34;first_name\u0026#34;, firstName).bold().italic().big()) .put(Piece.put(\u0026#34;age\u0026#34;, age).underline().color(\u0026#34;#FF0000\u0026#34;)) .format(); textView.setText(formatted); Download You can depend on this library through Maven:\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.github.pwittchen.kirai\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;library\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; or through Gradle:\ndependencies { compile \u0026#39;com.github.pwittchen.kirai:library:1.0.0\u0026#39; } Open-source Library is open-source and available on GitHub at: https://github.com/pwittchen/kirai/ If you want to know more about library, check GitHub website of the project. Feel free to use it or fork it!\n","permalink":"https://wittchen.io/posts/kirai-flavored-android-string-formatting-library/","summary":"Overview Recently I\u0026rsquo;ve developed and realased to Maven Central Repository Kirai, which is flavored Android string formatting library. Kirai means phrase in Swahili language. Project is inspired by phrase, TaggerString and BabushkaText. Kirai has fluent API similar to phrase with additional formatting similar to TaggerString and allows to add formatted pieces of text like BabushkaText. Development including writing Unit Tests took me about 2 days. Deployment and release to Maven Central Repository took me about 2 days as well.","title":"Kirai - flavored Android string formatting library"},{"content":"Introduction Sometimes people send me e-mails concerning EEG Analyzer app. Usually they are not sure how to interpret or analyze results generated by the app and uploaded to Dropbox server. My app is quite \u0026ldquo;raw\u0026rdquo; and simple, because it is additional project created during writing my Master Thesis, which helped me to perform some experiments and analysis of EEG data. That\u0026rsquo;s why I didn\u0026rsquo;t focused on generating reports from gathered data. I focused only on reading and gathering data from MindWave Mobile device. In this article I\u0026rsquo;ll show you how to interpret data generated by EEG Analyzer and draw simple plots showing change of attention level, meditation level and blink strength.\nStep #1 - download and install LibreOffice Calc LibreOffice Calc is free software similar to MS Office. Currently, I\u0026rsquo;m using Linux, so I\u0026rsquo;ve chosen this tool, but if you are using MS Windows, you can perform similar operations in MS Office and MS Excel.\nStep #2 - gather EEG and eye blinking data Download EEG Analyzer app to your mobile device, connect it with MindWave, go to the settings and enable \u0026ldquo;Save EEG and eye blinking data\u0026rdquo; option. After that, go back to the main screen. Wait for some time and let the app record your EEG data. Next, go to the Settings screen again. You should see that \u0026ldquo;Number of the signals saved on the device\u0026rdquo; is greater than zero, so your data was recorded. Click button \u0026ldquo;Export data to Dropbox\u0026rdquo;. After that, you should see a message informing you that data was exported successfully.\nStep #3 - access gathered and uploaded data Go to your Dropbox directory on your disk or Dropbox website. Next, go to the \u0026ldquo;EEG_Analyzer\u0026rdquo; directory. You should see files containing your exported signals in that directory. Names of the files should look like that: egg_analyzer_data_20140830_183410.csv. First section with the numbers represents date. 20140830 means 30th of August 2014. Second section represents time. 183410 means 18:34, 10 sec. (6:34 PM, 10 sec.) When you open this file in a text editor, you should see something like in table below.\nSee raw *.csv file here.\n\u0026#34;_id\u0026#34;,\u0026#34;type\u0026#34;,\u0026#34;level\u0026#34;,\u0026#34;miliseconds\u0026#34; \u0026#34;234\u0026#34;,\u0026#34;4\u0026#34;,\u0026#34;47\u0026#34;,\u0026#34;1409416429587\u0026#34; \u0026#34;235\u0026#34;,\u0026#34;5\u0026#34;,\u0026#34;60\u0026#34;,\u0026#34;1409416429606\u0026#34; \u0026#34;236\u0026#34;,\u0026#34;4\u0026#34;,\u0026#34;27\u0026#34;,\u0026#34;1409416430585\u0026#34; \u0026#34;237\u0026#34;,\u0026#34;5\u0026#34;,\u0026#34;51\u0026#34;,\u0026#34;1409416430600\u0026#34; \u0026#34;238\u0026#34;,\u0026#34;4\u0026#34;,\u0026#34;14\u0026#34;,\u0026#34;1409416431569\u0026#34; \u0026#34;239\u0026#34;,\u0026#34;5\u0026#34;,\u0026#34;50\u0026#34;,\u0026#34;1409416431589\u0026#34; \u0026#34;240\u0026#34;,\u0026#34;4\u0026#34;,\u0026#34;14\u0026#34;,\u0026#34;1409416432574\u0026#34; \u0026#34;241\u0026#34;,\u0026#34;5\u0026#34;,\u0026#34;35\u0026#34;,\u0026#34;1409416432592\u0026#34; \u0026#34;242\u0026#34;,\u0026#34;4\u0026#34;,\u0026#34;37\u0026#34;,\u0026#34;1409416435558\u0026#34; \u0026#34;243\u0026#34;,\u0026#34;5\u0026#34;,\u0026#34;70\u0026#34;,\u0026#34;1409416435578\u0026#34; \u0026#34;244\u0026#34;,\u0026#34;22\u0026#34;,\u0026#34;63\u0026#34;,\u0026#34;1409416436143\u0026#34; \u0026#34;245\u0026#34;,\u0026#34;22\u0026#34;,\u0026#34;34\u0026#34;,\u0026#34;1409416436339\u0026#34; \u0026#34;246\u0026#34;,\u0026#34;4\u0026#34;,\u0026#34;21\u0026#34;,\u0026#34;1409416436539\u0026#34; \u0026#34;247\u0026#34;,\u0026#34;5\u0026#34;,\u0026#34;69\u0026#34;,\u0026#34;1409416436553\u0026#34; \u0026#34;248\u0026#34;,\u0026#34;22\u0026#34;,\u0026#34;39\u0026#34;,\u0026#34;1409416436610\u0026#34; \u0026#34;249\u0026#34;,\u0026#34;4\u0026#34;,\u0026#34;17\u0026#34;,\u0026#34;1409416437538\u0026#34; \u0026#34;250\u0026#34;,\u0026#34;5\u0026#34;,\u0026#34;69\u0026#34;,\u0026#34;1409416437558\u0026#34; \u0026#34;251\u0026#34;,\u0026#34;4\u0026#34;,\u0026#34;23\u0026#34;,\u0026#34;1409416438529\u0026#34; \u0026#34;252\u0026#34;,\u0026#34;5\u0026#34;,\u0026#34;69\u0026#34;,\u0026#34;1409416438543\u0026#34; \u0026#34;253\u0026#34;,\u0026#34;4\u0026#34;,\u0026#34;21\u0026#34;,\u0026#34;1409416439552\u0026#34; \u0026#34;254\u0026#34;,\u0026#34;5\u0026#34;,\u0026#34;53\u0026#34;,\u0026#34;1409416439581\u0026#34; \u0026#34;255\u0026#34;,\u0026#34;4\u0026#34;,\u0026#34;30\u0026#34;,\u0026#34;1409416440539\u0026#34; \u0026#34;256\u0026#34;,\u0026#34;5\u0026#34;,\u0026#34;41\u0026#34;,\u0026#34;1409416440553\u0026#34; \u0026#34;257\u0026#34;,\u0026#34;4\u0026#34;,\u0026#34;53\u0026#34;,\u0026#34;1409416441530\u0026#34; \u0026#34;258\u0026#34;,\u0026#34;5\u0026#34;,\u0026#34;34\u0026#34;,\u0026#34;1409416441545\u0026#34; \u0026#34;259\u0026#34;,\u0026#34;22\u0026#34;,\u0026#34;41\u0026#34;,\u0026#34;1409416441633\u0026#34; \u0026#34;260\u0026#34;,\u0026#34;4\u0026#34;,\u0026#34;43\u0026#34;,\u0026#34;1409416442561\u0026#34; \u0026#34;261\u0026#34;,\u0026#34;5\u0026#34;,\u0026#34;8\u0026#34;,\u0026#34;1409416442581\u0026#34; Values on the top describes contents of the columns. _id is id of the record in SQLite database table on the device, type represents type of the signal (4 - attention, 5 - meditation, 22 - blink strength), level represents attention level (from 0 to 100), meditation level (from 0 to 100) or blink strength (I don\u0026rsquo;t know maximum value, but it\u0026rsquo;s always positive integer value), milliseconds represents Unix Timestamp in milliseconds. We can extract date and time in many ways. E.g. using website currentmillis.com or by writing our own script, software or formula in spreadsheet software like LibreOffice or MS Excel.\nStep #4 - open exported file in LibreOffice Calc and draw plots Below, you can follow the steps, which allow you to analyze EEG data and generate plots presenting change of attention level, meditation level and blink strength in time. I am using Polish version of the Ubuntu and LibreOffice, but you can find the same options in your language in the same places.\nStep #4.1 - open *.csv file with LibreOffice Calc Step #4.2 - import data Step #4.3 - display data When you confirm importing of the data, you should see data in LibreOffice Calc.\nStep #4.4 - add data auto-filter Mark \u0026ldquo;type\u0026rdquo; column and from menu choose \u0026ldquo;Data\u0026rdquo; » \u0026ldquo;Filter\u0026rdquo; » \u0026ldquo;Auto\u0026rdquo;.\nStep #4.5 - apply filter After adding filter, you should see little arrow in the \u0026ldquo;type\u0026rdquo; column. When you click on the arrow you can filter all signals representing attention by choosing type = 4 and \u0026ldquo;unchecking\u0026rdquo; other types.\nWhen you click \u0026ldquo;OK\u0026rdquo;, you should see only \u0026ldquo;attention\u0026rdquo; signals.\nStep #4.6 - draw the chart Choose option \u0026ldquo;Insert\u0026rdquo; » \u0026ldquo;Object\u0026rdquo; » \u0026ldquo;Chart (Plot)\u0026rdquo;\nOr click on the icon:\nDefine initial plot parameters:\nClick \u0026ldquo;Next\u0026rdquo; to see \u0026ldquo;Range of data\u0026rdquo;. Don\u0026rsquo;t do anything and click \u0026ldquo;Next\u0026rdquo; again. Click \u0026ldquo;Add\u0026rdquo; below \u0026ldquo;Data series\u0026rdquo; field.\nClick \u0026ldquo;choose data range for Y values\u0026rdquo; and mark values in the \u0026ldquo;level\u0026rdquo; column.\nAfterwards, you can click \u0026ldquo;Next\u0026rdquo; and adjust Chart parameters.\nClick \u0026ldquo;Finish\u0026rdquo; and your chart is ready.\nYou can draw plots of change of meditation level and eye blink strength in time in the same way by filtering other signals. I hope this tutorial is useful for you and clears up doubts connected with data generated by EEG Analyzer. In addition it shows simple way of generating plot of the attention level change in time what can be useful for displaying EEG data in a graphical way.\n","permalink":"https://wittchen.io/posts/interpreting-data-in-csv-files-generated-by-eeg-analyzer/","summary":"Introduction Sometimes people send me e-mails concerning EEG Analyzer app. Usually they are not sure how to interpret or analyze results generated by the app and uploaded to Dropbox server. My app is quite \u0026ldquo;raw\u0026rdquo; and simple, because it is additional project created during writing my Master Thesis, which helped me to perform some experiments and analysis of EEG data. That\u0026rsquo;s why I didn\u0026rsquo;t focused on generating reports from gathered data.","title":"Interpreting data in csv files generated by EEG Analyzer"},{"content":"Introduction If you were using Ubuntu for some time, you might have noticed that Ubuntu Dash from Unity is working quite slow. We can disable on-line search or a few other elements, but it\u0026rsquo;s still very slow. If we want to have fast search, we can use external software like synapse.\nSynapse Synapse is searching really fast and we don\u0026rsquo;t have to wait a few seconds like in Ubuntu Dash or disable some search options. Synapse can be installed with the following commands:\nsudo add-apt-repository ppa:synapse-core/ppa sudo apt-get update sudo apt-get install synapse After installing it, in Synapse Preferences we can set appropriate shortcut for opening Synapse.\nSynapse Indicator If we want to have \u0026ldquo;Mac OS-like\u0026rdquo; experience, we can use Synapse Indicator which is similar to Spotlight from OS provided by Apple. Synapse Indicator (AKA indicator-synapse) can be installed with the following commands:\nsudo add-apt-repository ppa:noobslab/apps sudo apt-get update sudo apt-get install indicator-synapse Drawback of Synapse Indicator is the fact that it does not have shortcut for search. We can set it by doing some \u0026ldquo;hack\u0026rdquo; described at Nerd Answer page.\nAdding keyboard shortcut for Synapse Indicator (hack) Step 1: Install xdtool. sudo apt-get install xdotool\nStep 2: Move your mouse over the synapse icon and get mouse location xdotool getmouselocation\nYou should get output like this:\nx:1568 y:9 screen:0 window:62914568\nStep 3: Add keyboard shortcut for indicator Go to System Settings -\u0026gt; Keyboard -\u0026gt; Shortcuts -\u0026gt; Custom Shortcuts. Click add and for the command type (replace x and y with the ones from the previous command):\nxdotool mousemove \u0026lt;x\u0026gt; \u0026lt;y\u0026gt; click 1 mousemove restore Then add the shortcut you want. It\u0026rsquo;s not pretty and elegant way, but I don\u0026rsquo;t know any other solution. If you know, how to do it better, leave a comment, below this article.\nAdditional note Please remember that if you change your screen resolution or switch between two screens (e.g. laptop screen and external, bigger screen), your mouse click coordinates will have to be updated in the shortcut.\n","permalink":"https://wittchen.io/posts/synapse-indicator-spotlight-for-ubuntu/","summary":"Introduction If you were using Ubuntu for some time, you might have noticed that Ubuntu Dash from Unity is working quite slow. We can disable on-line search or a few other elements, but it\u0026rsquo;s still very slow. If we want to have fast search, we can use external software like synapse.\nSynapse Synapse is searching really fast and we don\u0026rsquo;t have to wait a few seconds like in Ubuntu Dash or disable some search options.","title":"Synapse Indicator - Spotlight for Ubuntu"},{"content":"Introduction Update: Swipe Detector project is now called swipe.\nSome time ago, I needed to detect moment when user is swiping finger on the screen horizontally (from left to right or opposite) or when user swiped horizontally. I\u0026rsquo;ve decided to spend some time for analyzing [onTouch(MotionEvent event)](http://developer.android.com/reference/android/view/View.OnTouchListener.html#onTouch(android.view.View, android.view.MotionEvent)) and dispatchTouchEvent(MotionEvent event) method. We can read more about differences between triggering onTouch eventes on StackOverflow thread. Method like onTouch(MotionEvent event) allows to trigger any touch event, but it doesn\u0026rsquo;t allow to detect type of that event. Android API has GestureDetector class, which allows to detect long press and double tap events. There is also GestureDetector.OnGestureListener interface, which has the following methods:\n onDown(MotionEvent e) onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) onLongPress(MotionEvent e) onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) onShowPress(MotionEvent e) onSingleTapUp(MotionEvent e)  There is also GestureDetector.SimpleOnGestureListener class implementing GestureDetector.OnGestureListener and GestureDetector.OnDoubleTapListener interface. I also found an interesting project extending Android API called better-gesture-detector.\nDetecting swipe gesture Unfortunately, all of these solutions doesn\u0026rsquo;t allow to detect swipe gestures (swipe left, right, up and down). That\u0026rsquo;s why I\u0026rsquo;ve decided to create my own project, which allows to detect, whether user is currently swiping in a specific direction or if user already swiped. We can implement SwipeListener interface and do whatever we want, when desired event occurs. Check out SwipeDetector project on GitHub. If you want to see how swipe events are detected, browse source of SwipeDetector class. If you want to see exemplary usage of this class, check out SwipeDetectorActivity. SwipeDetector.SwipeListener interface allows to implement the following methods:\n onSwipingLeft(MotionEvent e) onSwipedLeft(MotionEvent e) onSwipingRight(MotionEvent e) onSwipedRight(MotionEvent e) onSwipingUp(MotionEvent e) onSwipedUp(MotionEvent e) onSwipingDown(MotionEvent e) onSwipedDown(MotionEvent e)  Moreover, we can take a look on a similar project called better-gesture-detector, which recognizes more types of gestures and also can be useful. That\u0026rsquo;s it. I hope, it will be useful in your projects as well.\n","permalink":"https://wittchen.io/posts/detecting-swipe-gesture-in-mobile-application/","summary":"Introduction Update: Swipe Detector project is now called swipe.\nSome time ago, I needed to detect moment when user is swiping finger on the screen horizontally (from left to right or opposite) or when user swiped horizontally. I\u0026rsquo;ve decided to spend some time for analyzing [onTouch(MotionEvent event)](http://developer.android.com/reference/android/view/View.OnTouchListener.html#onTouch(android.view.View, android.view.MotionEvent)) and dispatchTouchEvent(MotionEvent event) method. We can read more about differences between triggering onTouch eventes on StackOverflow thread. Method like onTouch(MotionEvent event) allows to trigger any touch event, but it doesn\u0026rsquo;t allow to detect type of that event.","title":"Detecting swipe gesture in mobile application"},{"content":"Introduction During software development process developers and QAs may want to have installed release and debug version of the app on a single device, what can be very helpful when they want to develop and use application at the same time. Another advantage is the fact that debug and release version of the app may need different configuration. It this post I will show you an example in which we are changing application name and launcher icon, but we can also change different values during compilation in the same way (e.g. address of the webservice). Some time ago, I\u0026rsquo;ve created similar template, but it was using older version of Build Tools, Android SDK and Android Studio. I\u0026rsquo;ve created new template, with the newest version of Android Studio (1.0.2) and newest version of Build Tools (1.0.0), so in that case, build.gradle file is smaller and simpler, but does its work correctly.\nExemplary repository You can find exemplary project template at: https://github.com/FutureProcessing/android-debug-release-template. All important information are included in README.md file and build.gradle file with project configuration. Important files:\n README.md build.gradle app/build.gradle  Source of essential build.gradle file presenting main idea is as follows:\nimport java.text.SimpleDateFormat apply plugin: \u0026#39;com.android.application\u0026#39; android { compileSdkVersion 21 buildToolsVersion \u0026#34;21.1.1\u0026#34; def appNameRelease = \u0026#34;My app\u0026#34; def appNameDebug = \u0026#34;My app debug\u0026#34; def launcherIconRelease = \u0026#34;@drawable/ic_launcher\u0026#34; def launcherIconDebug = \u0026#34;@drawable/ic_launcher_debug\u0026#34; signingConfigs { releaseConfig { storeFile file(\u0026#34;../key/android-debug-release-template.jks\u0026#34;) storePassword \u0026#34;SamplePassword1234\u0026#34; keyAlias \u0026#34;android-debug-release-template\u0026#34; keyPassword \u0026#34;SamplePassword1234\u0026#34; } } defaultConfig { applicationId \u0026#34;fp.com.debugreleasetemplate\u0026#34; minSdkVersion 14 targetSdkVersion 21 versionCode 1 versionName gitSha() + \u0026#39;-\u0026#39; + buildTime() } compileOptions { sourceCompatibility JavaVersion.VERSION_1_7 targetCompatibility JavaVersion.VERSION_1_7 } buildTypes { debug { applicationIdSuffix \u0026#39;.debug\u0026#39; versionNameSuffix \u0026#39;-DEBUG\u0026#39; resValue \u0026#34;string\u0026#34;, \u0026#34;app_name\u0026#34;, appNameDebug } release { resValue \u0026#34;string\u0026#34;, \u0026#34;app_name\u0026#34;, appNameRelease minifyEnabled false proguardFiles getDefaultProguardFile(\u0026#39;proguard-android.txt\u0026#39;), \u0026#39;proguard-rules.pro\u0026#39; signingConfig signingConfigs.releaseConfig } } android.applicationVariants.all { variant -\u0026gt; variant.outputs.each { output -\u0026gt; output.processManifest.doLast { if (variant.buildType.isDebuggable()) { def manifestOutFile = output.processManifest.manifestOutputFile def newFileContents = manifestOutFile.getText(\u0026#39;UTF-8\u0026#39;).replace(launcherIconRelease, launcherIconDebug) manifestOutFile.write(newFileContents, \u0026#39;UTF-8\u0026#39;) } } } } } dependencies { compile fileTree(dir: \u0026#39;libs\u0026#39;, include: [\u0026#39;*.jar\u0026#39;]) compile \u0026#39;com.android.support:appcompat-v7:21.0.2\u0026#39; } def buildTime() { def df = new SimpleDateFormat(\u0026#34;yyyyMMddHHmmss\u0026#34;) df.setTimeZone(TimeZone.getTimeZone(\u0026#34;Europe/Warsaw\u0026#34;)) return df.format(new Date()) } def gitSha() { return \u0026#39;git rev-parse --short HEAD\u0026#39;.execute().text.trim() } task wrapper(type: Wrapper) { gradleVersion = \u0026#39;2.2.1\u0026#39; } ","permalink":"https://wittchen.io/posts/installing-release-and-debug-version-of-app-on-a-single-device/","summary":"Introduction During software development process developers and QAs may want to have installed release and debug version of the app on a single device, what can be very helpful when they want to develop and use application at the same time. Another advantage is the fact that debug and release version of the app may need different configuration. It this post I will show you an example in which we are changing application name and launcher icon, but we can also change different values during compilation in the same way (e.","title":"Installing release and debug version of app on a single device"},{"content":"Introduction Git is very popular Version Control System used in many software projects today. In my opinion, it\u0026rsquo;s the best VCS available today. In order to start your adventure with this tool, you should know its basic commands and features. There are graphical tools, which allows to use Git without terminal, but I recommend you to use terminal. With CLI you can work faster, you can understand Git better and you have more control over your repository.\nBasic commands In my opinion, list presented below contains commands, which are used on daily basis and you should start journey with them.\ngit help # shows git commands git init # creates git repository in current directory git add -A # adds all files in current directory to repository git commit -m \u0026#34;message\u0026#34; # commits changes with specific message git push # pushes committed changes to remote repository on server git status # checks current status of the local repository git pull # pulls updates from remote repository git fetch # fetches changes from remote repository git fetch -p # fetches changes with \u0026#34;prune\u0026#34; option removes local copies of deleted \u0026#34;remote\u0026#34; branches git checkout my_branch # switches to branch named \u0026#34;my_branch\u0026#34; git checkout -b my_branch # creates local branch named \u0026#34;my_branch\u0026#34; git branch --delete my_branch # removes local branch named \u0026#34;my_branch\u0026#34; git push origin --delete # removes remote branch named \u0026#34;my_branch\u0026#34; git branch # displays local branches git branch -a # displays all branches (local and remote) git merge my_branch # merges branch named \u0026#34;my_branch\u0026#34; into branch on which we are checked out git stash # creates stash with currently saved changes on current branch git stash list # displays list of stashes git stash apply # applies stash with previously saved changes git reset --hard # discards all uncommitted local changes git reset \u0026lt;file\u0026gt; # removes \u0026lt;file\u0026gt; added to repository from current index (\u0026#34;about to be committed\u0026#34; area) git revert commit_name # creates new commit, which undoes all changes introduced in commit named commit_name git revert HEAD # reverts commit we just created with additional \u0026#34;revert commit\u0026#34; git reset --hard HEAD^ # reverts last commit without additional \u0026#34;revert commit\u0026#34; git rebase my_branch # pulls changes from \u0026#34;my_branch\u0026#34; to branch on which we are checked out without making commit git log # displays log of the commits in repository git remote -v # gets address of the remote repository Git hist There is one more fancy feature, which allows you to display colorful and graphical representation of branches and commits.\nlog --graph --abbrev-commit --decorate --date=relative --format=format:\u0026#39;%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)\u0026#39; --all You can assign this command to hist alias in your .gitconfig file. After that, you can type: git hist and this command will be executed. More advanced commands and features can be mastered after some work with basic Git stuff.\nResolving conflicts It may happen that someone modified file and pushed changes into repository and after that we modified the same file in the same place and want to push our changes. In such case, we have to resolve conflicts and merge changes. Sometimes, its more convenient to resolve conflicts with graphical tools than editing raw files modified by Git. If you are using IDE provided by JetBrains (e.g. IntelliJ IDEA or Android Studio) you can use VCS tools built-in IDE. Just choose option VCS -\u0026gt; Git -\u0026gt; Merge changes... for program menu and you can merges via graphical interface. There are also other tools like Kdiff3 or Meld, but I personally prefer JetBrains tools.\nGit flow Last, but not least, remember to read about Git workflow and familiarize yourself with that concept:\n A successful Git branching model Understanding GitHub flow  Further learning There are many Git tutorials and materials worth reading, which can help with extending knowledge about this VCS:\n Git documentation Pro Git book Git Immersion Git tutorial by Atlassian  ","permalink":"https://wittchen.io/posts/basics-of-git/","summary":"Introduction Git is very popular Version Control System used in many software projects today. In my opinion, it\u0026rsquo;s the best VCS available today. In order to start your adventure with this tool, you should know its basic commands and features. There are graphical tools, which allows to use Git without terminal, but I recommend you to use terminal. With CLI you can work faster, you can understand Git better and you have more control over your repository.","title":"Basics of Git"},{"content":"When you fork GitHub repository, you usually want to have your fork up to date with the original repository. You can update your fork in a few easy steps. Just look at the following example of the Git commands:\nAdd the remote, call it upstream:\ngit remote add upstream https://github.com/whoever/whatever.git Fetch all the branches of that remote into remote-tracking branches, such as upstream/master:\ngit fetch upstream Make sure that you\u0026rsquo;re on your master branch:\ngit checkout master Rewrite your master branch so that any commits of yours that aren\u0026rsquo;t already in upstream/master are replayed on top of that other branch:\ngit rebase upstream/master Original post with solution: http://stackoverflow.com/a/7244456\n","permalink":"https://wittchen.io/posts/how-to-update-forked-github-repository/","summary":"When you fork GitHub repository, you usually want to have your fork up to date with the original repository. You can update your fork in a few easy steps. Just look at the following example of the Git commands:\nAdd the remote, call it upstream:\ngit remote add upstream https://github.com/whoever/whatever.git Fetch all the branches of that remote into remote-tracking branches, such as upstream/master:\ngit fetch upstream Make sure that you\u0026rsquo;re on your master branch:","title":"How to update forked GitHub repository?"},{"content":"Sometimes we need to run specific program with a concrete version of JVM. We can also work with Java 7, but we want to try Java 8. In such cases, we can have installed both Java 7 and 8 on our system and easily switch between them. In order to show current java version, we can simply type: java -version in terminal. On my computer I received the following response:\nPicked up JAVA_TOOL_OPTIONS: -javaagent:/usr/share/java/jayatanaag.jar java version \u0026#34;1.8.0_25\u0026#34; Java(TM) SE Runtime Environment (build 1.8.0_25-b17) Java HotSpot(TM) 64-Bit Server VM (build 25.25-b02, mixed mode) We can see that I am using Java 8. If we want to switch to Java 7, we can use the following command:\nsudo update-alternatives --config java I am using Polish lanugage version of Ubuntu, so I received response, which you can see below. If you are using another language version, you will see messages in your language.\nSą 3 dostępne alternatywy dla java (dostarczające /usr/bin/java). Wybór Ścieżka Priorytet Status ------------------------------------------------------------ 0 /usr/lib/jvm/java-8-oracle/jre/bin/java 1075 tryb auto 1 /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java 1071 tryb ręczny 2 /usr/lib/jvm/java-7-oracle/jre/bin/java 1074 tryb ręczny * 3 /usr/lib/jvm/java-8-oracle/jre/bin/java 1075 tryb ręczny Proszę wcisnąć Enter, aby pozostawić bieżący wybór[*]; albo wpisać wybrany numer: Basically, we can just type number of a concrete version of JVM and press Enter. Currently, I have Oracle Java 7, Oracle Java 8 and Open JDK 7 installed in the system. When we type 2, we will switch to Java 7. After that, when we type: java -version, we will see the following message:\nPicked up JAVA_TOOL_OPTIONS: -javaagent:/usr/share/java/jayatanaag.jar java version \u0026#34;1.7.0_72\u0026#34; Java(TM) SE Runtime Environment (build 1.7.0_72-b14) Java HotSpot(TM) 64-Bit Server VM (build 24.72-b04, mixed mode) If we want to switch back to Java 8, we can do it in the same way.\n","permalink":"https://wittchen.io/posts/how-to-switch-java-version-on-linux/","summary":"Sometimes we need to run specific program with a concrete version of JVM. We can also work with Java 7, but we want to try Java 8. In such cases, we can have installed both Java 7 and 8 on our system and easily switch between them. In order to show current java version, we can simply type: java -version in terminal. On my computer I received the following response:","title":"How to switch java version on Linux"},{"content":"Some time ago, I had some troubles with configuring Java project with Gradle in IntelliJ IDEA CE. There is possibility to create new Gradle project in mentioned IDE, but for some reason it didn\u0026rsquo;t worked out-of-the box in my case on Ubuntu. I wanted to have pure, clean Java project with Gradle build system ready to open in IntelliJ IDEA. I found well configured simple project at: https://github.com/quinnliu/SampleGradleProject. Basing on that project, I created my simple template. I modified this project a little bit, added FEST assertions and wrote a few Unit Tests. In addition, I configured main class in build.gradle file in order to execute it via ./gradlew run command. My project template also has gradle wrapper, which is very convenient practice.\nYou can find my project template at: https://github.com/pwittchen/java-gradle-template If you want to compile project, run the following command: ./gradlew clean build If you want to start tests, run the following command: ./gradlew test Actually build command will run tests as well. If you want to run application, use the following command: ./gradlew run. You can also run application, tests or start compilation from the IntelliJ IDEA IDE.\nI hope, you will find that template useful and handy.\n","permalink":"https://wittchen.io/posts/java-gradle-template/","summary":"Some time ago, I had some troubles with configuring Java project with Gradle in IntelliJ IDEA CE. There is possibility to create new Gradle project in mentioned IDE, but for some reason it didn\u0026rsquo;t worked out-of-the box in my case on Ubuntu. I wanted to have pure, clean Java project with Gradle build system ready to open in IntelliJ IDEA. I found well configured simple project at: https://github.com/quinnliu/SampleGradleProject. Basing on that project, I created my simple template.","title":"Java Gradle Template"},{"content":"Recently, Square engineers confirmed my doubts I always had about fragments. I definitely knew that something was wrong with them, but Google introduced fragments into Android API, so I thought it must be okay for some reason and I tried to live with them feeling pain. Finally, concrete company have written an article criticizing Android Fragments and I totally agree with them. Read the article at: http://corner.squareup.com/2014/10/advocating-against-android-fragments.html.\n","permalink":"https://wittchen.io/posts/square-is-advocating-against-fragments/","summary":"Recently, Square engineers confirmed my doubts I always had about fragments. I definitely knew that something was wrong with them, but Google introduced fragments into Android API, so I thought it must be okay for some reason and I tried to live with them feeling pain. Finally, concrete company have written an article criticizing Android Fragments and I totally agree with them. Read the article at: http://corner.squareup.com/2014/10/advocating-against-android-fragments.html.","title":"Square is advocating against fragments"},{"content":"I highly recommend you to watch a short lecture presented by Bret Victor at Dropbox\u0026rsquo;s DBX conference on July 9, 2013. It really broadens the mind.\n Bret Victor - The Future of Programming from Bret Victor on Vimeo. References: http://worrydream.com/dbx/\n","permalink":"https://wittchen.io/posts/the-future-of-programming/","summary":"I highly recommend you to watch a short lecture presented by Bret Victor at Dropbox\u0026rsquo;s DBX conference on July 9, 2013. It really broadens the mind.\n Bret Victor - The Future of Programming from Bret Victor on Vimeo. References: http://worrydream.com/dbx/","title":"The future of programming"},{"content":"Sometimes we may want to set different address of the back-end web service for debuggable and release version of our Android app. E.g. predefined static host and port for release version of the application and our local IP address and predefined port for debuggable version of the application. In second case, we can deploy back-end webservice on our local machine for testing purposes. We can customize all of that in build.gradle file. We can use variant.buildType.isDebuggable() instruction to check build type of the app. I described way of Updating Android XML resources before compilation via Gradle in one of my previous posts, so you can check it if you don\u0026rsquo;t understand replaceBackendAddressInResources(variant, host, port) method. After proper configuration, setting of the back-end url is straightforward. Please check the code between // configuration of the back-end address - begin and // configuration of the back-end address - end comments.\nimport java.text.SimpleDateFormat apply plugin: \u0026#39;com.android.application\u0026#39; android { compileSdkVersion 20 buildToolsVersion \u0026#39;20.0.0\u0026#39; compileOptions { sourceCompatibility JavaVersion.VERSION_1_7 targetCompatibility JavaVersion.VERSION_1_7 } lintOptions { abortOnError false disable \u0026#39;MissingTranslation\u0026#39; } defaultConfig { applicationId \u0026#34;com.android.app\u0026#34; minSdkVersion 15 targetSdkVersion 19 versionCode 1 versionName gitSha() + \u0026#39;-\u0026#39; + buildTime() testInstrumentationRunner \u0026#34;com.google.android.apps.common.testing.testrunner.GoogleInstrumentationTestRunner\u0026#34; } buildTypes { release { runProguard false proguardFiles getDefaultProguardFile(\u0026#39;proguard-android.txt\u0026#39;), \u0026#39;proguard-rules.pro\u0026#39; signingConfig signingConfigs.releaseConfig } } // configuration of the back-end address - begin  applicationVariants.all { variant -\u0026gt; variant.mergeResources.doLast { if(variant.buildType.isDebuggable()) { replaceBackendAddressInResources(variant, obtainLocalIpAddress(), \u0026#34;8443\u0026#34;) } else { replaceBackendAddressInResources(variant, \u0026#34;PUT YOUR PRODUCTION SERVER ADRESS HERE\u0026#34;, \u0026#34;PRODUCTION PORT\u0026#34;) } } } // configuration of the back-end address - end  packagingOptions { exclude \u0026#39;META-INF/DEPENDENCIES.txt\u0026#39; exclude \u0026#39;META-INF/LICENSE.txt\u0026#39; exclude \u0026#39;LICENSE.txt\u0026#39; exclude \u0026#39;META-INF/NOTICE.txt\u0026#39; exclude \u0026#39;META-INF/NOTICE\u0026#39; exclude \u0026#39;META-INF/LICENSE\u0026#39; exclude \u0026#39;META-INF/DEPENDENCIES\u0026#39; exclude \u0026#39;META-INF/notice.txt\u0026#39; exclude \u0026#39;META-INF/license.txt\u0026#39; exclude \u0026#39;META-INF/dependencies.txt\u0026#39; exclude \u0026#39;META-INF/LGPL2.1\u0026#39; exclude \u0026#39;ASL-2.0.txt\u0026#39; exclude \u0026#39;LGPL-3.0.txt\u0026#39; exclude \u0026#39;META-INF/ASL-2.0.txt\u0026#39; exclude \u0026#39;META-INF/LGPL-3.0.txt\u0026#39; exclude \u0026#39;META-INF/services/javax.annotation.processing.Processor\u0026#39; } } dependencies { compile fileTree(dir: \u0026#39;libs\u0026#39;, include: [\u0026#39;*.jar\u0026#39;]) } def replaceBackendAddressInResources(variant, host, port) { // replace the #const_backend_url# with your specific ip address  def protocol = \u0026#34;https://\u0026#34; def backendAddress = protocol + host + \u0026#34;:\u0026#34; + port + \u0026#34;/\u0026#34; File valuesFile = file(\u0026#34;${buildDir}/intermediates/res/${variant.dirName}/values/values.xml\u0026#34;) if (valuesFile.exists()) { String content = valuesFile.getText(\u0026#39;UTF-8\u0026#39;) content = content.replaceAll(\u0026#34;#const_backend_url#\u0026#34;, backendAddress) valuesFile.write(content, \u0026#39;UTF-8\u0026#39;) println(\u0026#34;Replacing #const_backend_url# with \u0026#34; + backendAddress + \u0026#34; in file: \u0026#34; + valuesFile.name) } else { println(\u0026#34;File: \u0026#34; + valuesFile.path + \u0026#34; does not exist\u0026#34;) } } def obtainLocalIpAddress() { InetAddress inetAddress = InetAddress.getLocalHost(); byte[] address = inetAddress.getAddress(); String ipAddress = \u0026#34;\u0026#34;; for (int i = 0; i \u0026lt; address.length; i++) { if (i \u0026gt; 0) { ipAddress += \u0026#34;.\u0026#34;; } ipAddress += address[i] \u0026amp; 0xFF; } ipAddress } def buildTime() { def df = new SimpleDateFormat(\u0026#34;yyyyMMddHHmmss\u0026#34;) df.setTimeZone(TimeZone.getTimeZone(\u0026#34;Europe/Warsaw\u0026#34;)) return df.format(new Date()) } def gitSha() { return \u0026#39;git rev-parse --short HEAD\u0026#39;.execute().text.trim() } Now, you can create release and debug version of the app with different addresses of the web service what is very useful during the process of development and deployment of the project. We can use this trick also for setting different parameters depending on our needs.\n","permalink":"https://wittchen.io/posts/different-build-config-for-debug-and-release-version-of-the-android-app/","summary":"Sometimes we may want to set different address of the back-end web service for debuggable and release version of our Android app. E.g. predefined static host and port for release version of the application and our local IP address and predefined port for debuggable version of the application. In second case, we can deploy back-end webservice on our local machine for testing purposes. We can customize all of that in build.","title":"Different build config for debug and release version of the Android app"},{"content":"Some time ago I found Weather Icons project by Erik Flowers. It\u0026rsquo;s customized font with appropriate CSS, which allows you to use weather icons on the website. In addition, those icons can be customized. They can have different size or color. Moreover, they are compatible with the Bootstrap. I thought, that it would be nice, if I had something like that for Android applications. That\u0026rsquo;s why I created simple open-source project called Weather Icon View. It\u0026rsquo;s customized view for Android, which allows you to use weather icons in mobile apps in similar way as in web apps. When you add mentioned library to your project, you can use it in XML layout in the following way:\n\u0026lt;com.github.pwittchen.weathericonview.WeatherIconView android:id=\u0026#34;@+id/my_weather_icon\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; custom:weatherIconResource=\u0026#34;@string/wi_day_sunny\u0026#34; custom:weatherIconColor=\u0026#34;@android:color/black\u0026#34; custom:weatherIconSize=\u0026#34;200\u0026#34; /\u0026gt; You can also use it programmatically as it\u0026rsquo;s presented below.\nWeatherIconView weatherIconView; weatherIconView = (WeatherIconView) findViewById(R.id.my_weather_icon); weatherIconView.setIconResource(getString(R.string.wi_day_sunny)); weatherIconView.setIconSize(200); weatherIconView.setIconColor(Color.BLACK); Icons reference can be found at: http://erikflowers.github.io/weather-icons/ For more details visit: https://github.com/pwittchen/WeatherIconView.\n","permalink":"https://wittchen.io/posts/weather-icons-for-android-applications/","summary":"Some time ago I found Weather Icons project by Erik Flowers. It\u0026rsquo;s customized font with appropriate CSS, which allows you to use weather icons on the website. In addition, those icons can be customized. They can have different size or color. Moreover, they are compatible with the Bootstrap. I thought, that it would be nice, if I had something like that for Android applications. That\u0026rsquo;s why I created simple open-source project called Weather Icon View.","title":"Weather Icons for Android applications"},{"content":"Introduction Recently, I started working on quite interesting project. One of its elements is micro-location inside the building based on WiFi Access Points. Company\u0026rsquo;s buildings have a lot of Access Points in different locations like regular rooms, conference rooms, corridors, sports building and restaurant. Having pool of Access Points with their names, locations and MAC addresses (or more precisely: BSSID) it\u0026rsquo;s possible to create micro-location for Android mobile devices.\nOverview On the image below, you can see approximate location of WiFi Access Points in the F3 building of Future Processing company. Other buildings also have their own Access Points, but they weren\u0026rsquo;t taken into consideration during the initial experiment. Android gives us possibility to scan available WiFi Access Points and measure their signal strength. Appropriate BroadcastReceiver allows us to react on event of changing WiFi Access Points signal strength, what can be interpreted as movement of person having mobile device. When such event occurs, we can read list of available Access Points, measure their signal strength, detect Access Point with the strongest signal, map it to specific room location and start WiFi scan again in order to retrieve fresh list of the Access Points as soon as possible. We have to remember that WiFi scanning is an asynchronous operation, so we don\u0026rsquo;t know, when we receive the results. That\u0026rsquo;s why event-driven development is good approach in such case. We can use pure Android BroadcastReceiver or use Otto Event Bus to make our code annotation-based, fine-grained and clear.\nOriginal image comes from www.future-processing.com website.\nImplementation To implement micro-location I used open-source NetworkEvents Android library, which I have written earlier and described in one of my previous blog posts. First, we should create AccessPoint model.\npublic class AccessPoint { private String mac; private String keyName; private String fineName; public AccessPoint() { } public AccessPoint(String mac, String keyName, String fineName) { this.mac = mac; this.keyName = keyName; this.fineName = fineName; } public String getMac() { return mac; } public String getKeyName() { return keyName; } public String getFineName() { return fineName; } } AccessPoint class can cotain mac address of the particular Access Point, keyName as additional identifier of the Access Point location and fineName containing readable name of the Access Point location, which can be displayed for the user. After that, we have to create RoomLocator class. This class contains getNearestAccessPoint() method, which reads list of the available Access Points and returns one with the strongest signal. We have to remember, that we have to fill accessPointsRoomList HashMap with our map of the Access Points. In this case, MAC address of the Access Point, which is String value, should be treated as a key in the HashMap.\npublic class RoomLocator { private static Map\u0026lt;String, AccessPoint\u0026gt; accessPointsRoomList = new HashMap\u0026lt;\u0026gt;(); public AccessPoint getNearestAccessPoint() { WifiManager wifiManager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE); List\u0026lt;ScanResult\u0026gt; accessPointsScanResult = wifiManager.getScanResults(); AccessPoint nearestAccessPoint = null; ScanResult bestSignal = null; String currentNearestBSSID; for (ScanResult scanResult : accessPointsScanResult) { currentNearestBSSID = scanResult.BSSID.toUpperCase(); if (!accessPointsRoomList.containsKey(currentNearestBSSID)) { continue; } if (bestSignal == null || WifiManager.compareSignalLevel(bestSignal.level, scanResult.level) \u0026lt; 0) { nearestAccessPoint = accessPointsRoomList.get(currentNearestBSSID); bestSignal = scanResult; } } return nearestAccessPoint; } } After that, we can use NetworkEvents to listen, when signal strength of the Access Points is being changed. This usually happens, when user is moving with the smartphone. We can do that very easily with @Subscribe annotation. When mentioned event occurs, we can call getNearestAccessPoint() method from RoomLocator class. Of course, we can create provider for this class and access it in static way. In addition, please read my previous post about Network Events library if you want to know, how to use it properly.\n@Subscribe public void wifiAccessPointsRefreshed(WifiAccessPointsSignalStrengthChangedEvent event) { AccessPoint accessPoint = new RoomLocator().getNearestAccessPoint(); Toast.makeText(this, accessPoint.getFineName(), Toast.LENGTH_SHORT).show(); } That\u0026rsquo;s it. Every time, when WifiAccessPointsSignalStrengthChangedEvent will occur, you will get fresh information about Access Point with the strongest signal, which can be treated as your location. I\u0026rsquo;ve tested this solution and it actually works. Please remember that such application can work only in buildings with many different Access Points in different rooms on different floors (usually in IT companies).\n","permalink":"https://wittchen.io/posts/micro-location-based-on-wifi-access-points/","summary":"Introduction Recently, I started working on quite interesting project. One of its elements is micro-location inside the building based on WiFi Access Points. Company\u0026rsquo;s buildings have a lot of Access Points in different locations like regular rooms, conference rooms, corridors, sports building and restaurant. Having pool of Access Points with their names, locations and MAC addresses (or more precisely: BSSID) it\u0026rsquo;s possible to create micro-location for Android mobile devices.\nOverview On the image below, you can see approximate location of WiFi Access Points in the F3 building of Future Processing company.","title":"Micro-location based on WiFi Access Points"},{"content":"When we work in a team projects, our code constantly changes and being tested. Often some bugs occur in a specific version of application and no longer exists in next version of the project, because one programmer might fixed the bug according to the Boy Scout Rule and this is good. Nevertheless, sometimes we need to write documentation and check in which version bug occurred to be sure, that it was really fixed. In addition, QA Engineer needs to know, which version of the project he or she should check. That\u0026rsquo;s why we should introduce versioning system to our project. In Android Manifest we have versionCode and versionName. The versionCode is used for updates on Google Play Store and it has to be integer value. We should increment versionCode before releasing new version of the application for the users. The versionName available in Android Manifest is a string value and we can use it to store information, which we need in a current project. When we use Git as a Version Control System, we can put SHA value of a specific commit into our version name. In addition, we can add date and time of compilation to this variable. After that, our versionName contains very detailed information about current version of our application. Exemplary versionName will look in as follows: f935ea7-20140913144001. We can obtain that with proper configuration of build.gradle file containing buildTime() method and gitSha() method. Please, take a look at creation of versionName in 35th line of the build.gradle file presented below.\nimport java.text.SimpleDateFormat def buildTime() { def df = new SimpleDateFormat(\u0026#34;yyyyMMddHHmmss\u0026#34;) df.setTimeZone(TimeZone.getTimeZone(\u0026#34;Europe/Warsaw\u0026#34;)) return df.format(new Date()) } def gitSha() { return \u0026#39;git rev-parse --short HEAD\u0026#39;.execute().text.trim() } apply plugin: \u0026#39;android\u0026#39; apply plugin: \u0026#39;android-test\u0026#39; android { packagingOptions { exclude \u0026#39;LICENSE.txt\u0026#39; exclude \u0026#39;META-INF/LICENSE\u0026#39; exclude \u0026#39;META-INF/LICENSE.txt\u0026#39; exclude \u0026#39;META-INF/NOTICE\u0026#39; exclude \u0026#39;META-INF/NOTICE.txt\u0026#39; exclude \u0026#39;values/attrs.xml\u0026#39; exclude \u0026#39;values/dimens.xml\u0026#39; exclude \u0026#39;values/colors.xml\u0026#39; } compileSdkVersion 19 buildToolsVersion \u0026#34;19.0.3\u0026#34; defaultConfig { minSdkVersion 14 targetSdkVersion 19 versionCode 1 versionName gitSha() + \u0026#39;-\u0026#39; + buildTime() } compileOptions { sourceCompatibility JavaVersion.VERSION_1_7 targetCompatibility JavaVersion.VERSION_1_7 } } ","permalink":"https://wittchen.io/posts/versioning-android-applications/","summary":"When we work in a team projects, our code constantly changes and being tested. Often some bugs occur in a specific version of application and no longer exists in next version of the project, because one programmer might fixed the bug according to the Boy Scout Rule and this is good. Nevertheless, sometimes we need to write documentation and check in which version bug occurred to be sure, that it was really fixed.","title":"Versioning Android applications"},{"content":"Problem In a team project, we encountered one of the common problems connected with mobile applications. Android application sends requests to backend web service and we don\u0026rsquo;t have backend web service deployed right now on a separate server, so every mobile developer is compiling and running backend web service on the local machine for testing purposes. In the beginning, url of backend url looked as follows:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;resources\u0026gt; \u0026lt;string name=\u0026#34;backend_url\u0026#34;\u0026gt;192.168.1.1\u0026lt;/string\u0026gt; \u0026lt;/resources\u0026gt; Of course address varies on different machines.\nWhen every developer was pushing changes, configuration of the backed url changed as well. It became annoying, so we decided to do something about that.\nSolution 1 Attempt #1 First, we came with an idea of ignoring local changes of the XML file, which contains backend url address. It can be done via Git in the following way:\ngit update-index --assume-unchanged [\u0026lt;file\u0026gt;...] We can undo this operation with such command:\ngit update-index --assume-unchanged [\u0026lt;file\u0026gt;...] We can also add ignored alias to our .gitconfig file:\n[alias] ignored = !git ls-files -v | grep \u0026#34;^[[:lower:]]\u0026#34; Then we can type: git ignored to display ignored files.\nFor more information check StackOverflow discussion.\nThis solution is kind of work-around, so we decided to do it better.\nAttempt #2 We could create alias for backend url and replace it before compilation dynamically via Gradle.\nOur new configuration file res/values/configuration.xml looks like that:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;resources\u0026gt; \u0026lt;string name=\u0026#34;backend_url\u0026#34;\u0026gt;#const_backend_url#\u0026lt;/string\u0026gt; \u0026lt;/resources\u0026gt; Then, our build.gradle file needed to be updated. The most important part starts in 29th line, where #const_backend_url# value is replaced with an IP address of the local machine, where mobile application is compiled. As I mentioned before, backend web service application is compiled on the same machine, so backend web service address will be proper in that case for testing purposes.\napply plugin: \u0026#39;com.android.application\u0026#39; android { compileSdkVersion 20 buildToolsVersion \u0026#39;20.0.0\u0026#39; compileOptions { sourceCompatibility JavaVersion.VERSION_1_7 targetCompatibility JavaVersion.VERSION_1_7 } defaultConfig { applicationId \u0026#34;com.my.app\u0026#34; minSdkVersion 15 targetSdkVersion 19 versionCode 1 versionName \u0026#34;1.0\u0026#34; testInstrumentationRunner \u0026#34;com.google.android.apps.common.testing.testrunner.GoogleInstrumentationTestRunner\u0026#34; } buildTypes { release { runProguard false proguardFiles getDefaultProguardFile(\u0026#39;proguard-android.txt\u0026#39;), \u0026#39;proguard-rules.pro\u0026#39; } } // replace the #const_backend_url# with your current ip address to use your local backend web service  applicationVariants.all { variant -\u0026gt; variant.mergeResources.doLast { def protocol = \u0026#34;https://\u0026#34; def localIp = obtainCurrentIpAddress() def port = \u0026#34;8443\u0026#34; def backendAddress = protocol + localIp + \u0026#34;:\u0026#34; + port + \u0026#34;/\u0026#34; File valuesFile = file(\u0026#34;${buildDir}/intermediates/res/${variant.dirName}/values/values.xml\u0026#34;) if(valuesFile.exists()) { String content = valuesFile.getText(\u0026#39;UTF-8\u0026#39;) content = content.replaceAll(\u0026#34;#const_backend_url#\u0026#34;, backendAddress) valuesFile.write(content, \u0026#39;UTF-8\u0026#39;) println(\u0026#34;Replacing #const_backend_url# with \u0026#34; + backendAddress + \u0026#34; in file: \u0026#34; + valuesFile.name) } else { println(\u0026#34;File: \u0026#34; + valuesFile.path + \u0026#34; does not exist\u0026#34;) } } } packagingOptions { exclude \u0026#39;META-INF/DEPENDENCIES.txt\u0026#39; exclude \u0026#39;META-INF/LICENSE.txt\u0026#39; exclude \u0026#39;LICENSE.txt\u0026#39; exclude \u0026#39;META-INF/NOTICE.txt\u0026#39; exclude \u0026#39;META-INF/NOTICE\u0026#39; exclude \u0026#39;META-INF/LICENSE\u0026#39; exclude \u0026#39;META-INF/DEPENDENCIES\u0026#39; exclude \u0026#39;META-INF/notice.txt\u0026#39; exclude \u0026#39;META-INF/license.txt\u0026#39; exclude \u0026#39;META-INF/dependencies.txt\u0026#39; exclude \u0026#39;META-INF/LGPL2.1\u0026#39; exclude \u0026#39;ASL-2.0.txt\u0026#39; exclude \u0026#39;LGPL-3.0.txt\u0026#39; exclude \u0026#39;META-INF/ASL-2.0.txt\u0026#39; exclude \u0026#39;META-INF/LGPL-3.0.txt\u0026#39; exclude \u0026#39;META-INF/services/javax.annotation.processing.Processor\u0026#39; } } dependencies { compile fileTree(dir: \u0026#39;libs\u0026#39;, include: [\u0026#39;*.jar\u0026#39;]) compile \u0026#39;com.jakewharton:butterknife:5.1.2\u0026#39; // put your another dependencies here  androidTestCompile \u0026#39;com.jakewharton.espresso:espresso:1.1-r3\u0026#39; androidTestCompile \u0026#39;com.squareup:fest-android:1.0.8\u0026#39; } def obtainCurrentIpAddress() { InetAddress inetAddress = InetAddress.getLocalHost(); byte[] address = inetAddress.getAddress(); String ipAddress = \u0026#34;\u0026#34;; for (int i = 0; i \u0026lt; address.length; i++) { if (i \u0026gt; 0) { ipAddress += \u0026#34;.\u0026#34;; } ipAddress += address[i] \u0026amp; 0xFF; } ipAddress } Similar trick was applied in project: https://github.com/nenick/android-gradle-template in file https://github.com/nenick/android-gradle-template/blob/master/App/build.gradle, so you can check it out.\n","permalink":"https://wittchen.io/posts/updating-android-xml-resources-before-compilation-via-gradle/","summary":"Problem In a team project, we encountered one of the common problems connected with mobile applications. Android application sends requests to backend web service and we don\u0026rsquo;t have backend web service deployed right now on a separate server, so every mobile developer is compiling and running backend web service on the local machine for testing purposes. In the beginning, url of backend url looked as follows:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;resources\u0026gt; \u0026lt;string name=\u0026#34;backend_url\u0026#34;\u0026gt;192.","title":"Updating Android XML resources before compilation via Gradle"},{"content":"I recently found an article about Best Useful Indicators Collection for Ubuntu. Indicators are very useful feature of the Ubuntu and Unity. Ubuntu has some default indicators, but we can add new indicators if we want to. Mentioned article contains list of many indicators, but personally I prefer and use only a few of them. Here are my favorites:\nMulti Load indicator Nice thing. This indicator monitors system resources. E.g. usage of the processor, RAM, disk and network. We can customize it and set refresh interval. I found default low interval like 500 ms very disturbing, so I changed it to 5000 ms and it\u0026rsquo;s ok for me. In the screenshot above, you can see blue chart for CPU usage, green chart for RAM usage and yellow chart for network usage. You can change, configure and customize it as you want.\nIndicator can be installed by the following terminal commands:\nsudo add-apt-repository ppa:indicator-multiload/stable-daily sudo apt-get update sudo apt-get install indicator-multiload System Monitor indicator Useful indicator, which allows you to monitor temperature of your hardware components. It can monitor only those components, which have appropriate sensors. In my case I can monitor only CPU, but it is possible to monitor temperature of some GPUs and disks. If you don\u0026rsquo;t want to overheat your processor, you should use such indicator. Of course, check specifications of your processor, its maximum and common temperature. Sometimes, it\u0026rsquo;s necessary to clean computer inside or buy cooling stand in order to decrease CPU temperature.\nIndicator can be installed by the following terminal commands:\nsudo add-apt-repository ppa:noobslab/indicators sudo apt-get update sudo apt-get install indicator-sysmonitor Indicator Sensors Indicator Sensors allows you to display temperature of your hardware sensors like CPU. In addition, you can set an alarm for situation where temperature of your hardware will exceed given value.\nIndicator can be installed by the following terminal commands:\nsudo add-apt-repository ppa:alexmurray/indicator-sensors sudo apt-get update sudo apt-get install indicator-sensors My Weather indicator Indicator, which allows you to monitor current state of the weather. It can also display weather forecast for your city and display very detailed information about weather conditions.\nIndicator can be installed by the following terminal commands:\nsudo add-apt-repository ppa:atareao/atareao sudo apt-get update sudo apt-get install my-weather-indicator ","permalink":"https://wittchen.io/posts/indicators-for-ubuntu/","summary":"I recently found an article about Best Useful Indicators Collection for Ubuntu. Indicators are very useful feature of the Ubuntu and Unity. Ubuntu has some default indicators, but we can add new indicators if we want to. Mentioned article contains list of many indicators, but personally I prefer and use only a few of them. Here are my favorites:\nMulti Load indicator Nice thing. This indicator monitors system resources. E.g. usage of the processor, RAM, disk and network.","title":"Indicators for Ubuntu"},{"content":"I recently published my side project connected with BCI and EEG technology in Google Play Store.  EEG Analyzer reads electrical activity of the brain with EEG technology and blink strength with EMG sensor from NeuroSky MindWave Mobile device connected via Bluetooth to Android device. In order to use this application, you need to have NeuroSky MindWave Mobile device, which can be ordered from http://neurosky.com/ website. Direct link to the mentioned product: http://store.neurosky.com/products/brainwave-starter-kit Application has the following features:\n Reading attention level Reading meditation level Reading blink strength Reading brain waves Reading raw signal Drawing plots of attention level change in time Drawing plots of meditation level change in time Saving attention level, meditation level and blink strength change history Exporting saved signal to Dropbox servers in *.csv format Possibility to turn on voice feedback informing about high attention or meditation level  Application is available in English and Polish language version.\nGet it on Google Play!\nUpdate EEG Analyzer was featured on official NeuroSky Store at: http://store.neurosky.com/products/eeg-analyzer.\n","permalink":"https://wittchen.io/posts/eeg-analyzer-android-app/","summary":"I recently published my side project connected with BCI and EEG technology in Google Play Store.  EEG Analyzer reads electrical activity of the brain with EEG technology and blink strength with EMG sensor from NeuroSky MindWave Mobile device connected via Bluetooth to Android device. In order to use this application, you need to have NeuroSky MindWave Mobile device, which can be ordered from http://neurosky.com/ website. Direct link to the mentioned product: http://store.","title":"EEG Analyzer - Android app"},{"content":"Introduction When you want to publish your Android application in Google Play Store, first you need to go to https://play.google.com/apps/publish/ website and create a Developer account. Its cost is $25. You can read more about that at: https://support.google.com/googleplay/android-developer/answer/113468?hl=en.\nProblems with payments during registration Remember that you need to have appropriate debit card in order to proceed with payments. E.g. I have debit card in PKO BP (Polish bank), which has two-stage authorization. Most of debit cards has two-stage authorization for the registration of the card in on-line payment system and next payments are verified only once. In my bank every payment is verified twice. It\u0026rsquo;s more secure, but due to this security policy I was not able to pay for my developer account at all! I decided to create another bank account for on-line payments in bank, which has one-stage authorization for regular payments. I\u0026rsquo;ve chosen mBank (another Polish bank). Finally, I was able to proceed with payments and create my developer account.\nDeveloper Console When you have your developer account created, you can access Developer Console with your Google credentials.  When you create your application, you can choose it from the list of available applications and you can manage several sections.  You don\u0026rsquo;t have to to everything in one session, you can save a \u0026ldquo;draft\u0026rdquo; of your application and fill rest of the elements e.g. next day.\nAPK Preparing APK file to upload Before we publish our app in Google Play Store, we need to generate signed *.apk file. In Android Studio, we can choose Generate Signed APK... option from Build menu.  If we don\u0026rsquo;t have our key store, we need to create one.  Very important: We need to remember or save somewhere our key store password and alias password (they can be the same). We also need to save somewhere (in a few different places) our key store file. Key store file, key store password and alias password are necessary for signing app. If we want to update uploaded app in the future, we need to sign it with exactly the same key store file and we need to know mentioned passwords to perform sign operation. Passwords can be changed, but we need to know old passwords to do it. When we will sign our app with a different key store file, we won\u0026rsquo;t be able to update our app after uploading. Next, we need to set master password.  After that, we can click Next and finalize generating *.apk file. In this step, we can optionally run ProGuard.  If everything went ok, we should see the following window.  Now, we are ready to upload our *.apk file to Google Play Store.\nUploading APK file In APK section you can upload your application compiled into *.apk file to Google Play Store.  You can also set up Beta testing or Alpha testing and distribute your app to selected group of testers. When, we uploaded our *.apk file, application is marked as \u0026ldquo;Draft\u0026rdquo;.  We need to provide all mandatory information in several sections. When, I filled everything, my application was still a \u0026ldquo;Draft\u0026rdquo;. I could display message \u0026ldquo;Why can\u0026rsquo;t I publish?\u0026rdquo; and see details.  I needed to go to \u0026ldquo;Pricing and Distribution\u0026rdquo; section and check mandatory fields.  I also needed to mark checkbox Not submitting a privacy policy URL at this time. in \u0026ldquo;Store Listing\u0026rdquo; section (\u0026ldquo;Privacy Policy\u0026rdquo; subsection).\nStore listing Basic information In store listing, you need to provide basic information about your app. \nGraphic assets - screenshots Next, you need to provide screenshots of your app. Screenshots for the phone are necessary, but screenshots for the tablets are optional. \nGraphic assets - Hi-res icon, promo images \u0026amp; video Then, you need to provide promo images \u0026amp; video. Two options are mandatory. \nCategorization, Contact Details \u0026amp; Privacy Policy Next, we can categorize our app, set up Contact Details and Privacy Policy if it\u0026rsquo;s necessary. If we don\u0026rsquo;t have Privacy Policy, we need to check the field Not submitting a Privacy Policy URL at this time. \nTranslations We can manage translations and prepare different description, application name, screenshot and other details for different languages. In my case, I prepared description and screenshots in Polish and English language versions. \nPricing \u0026amp; Distribution In this section you can provide information about distribution. You can determine whether your app will be available all-around the world or only in selected countries. You can also determine if it will be free or paid. \nIn-app Products We are able to create in-app products. Application, which I was publishing does not have such feature. You can read more about that at: http://developer.android.com/google/play/billing/api.html\nServices and APIs In this section, you can set up Google Cloud Messaging (GCM), Licensing \u0026amp; In-app billing and Google Play Game Services. Here you can get license keys and link your mobile app with server application if it\u0026rsquo;s neccessary. There is also feature called App Indexing from Google Search, where you can deep link into your app from Google search.\nOptimization tips Here you can see some optimization tips from Google, which you can apply for your app, to make it better.\nLaunch checklist Don\u0026rsquo;t forget to browse Google\u0026rsquo;s Lauch Checklist.\nReady to publish After proving all the information, my application was finally ready to publish!  I could click Publish this app button and deploy my application to Google Play Store. After that, my application was marked as Published on the list of the applications. It\u0026rsquo;s worth mentioning that applications are not available on Google Play Store immediately after publishing, but within a few hours. I was informed about that after clicking the Publish this app button.  You can see that my app was successfully published. You can download it at: https://play.google.com/store/apps/details?id=com.pwittchen.eeganalyzer. It\u0026rsquo;s specific application reading brain waves from NeuroSky MindWave Mobile device, so you need to have such device in order to use this app. It can be connected via Bluetooth to the Android smartphone or tablet.\nLast words Information provided in this article does not cover all functionalities and possibilities of Google Play Store. If you want to learn more, please read official Google\u0026rsquo;s websites.\n","permalink":"https://wittchen.io/posts/publishing-android-application-in-google-play-store/","summary":"Introduction When you want to publish your Android application in Google Play Store, first you need to go to https://play.google.com/apps/publish/ website and create a Developer account. Its cost is $25. You can read more about that at: https://support.google.com/googleplay/android-developer/answer/113468?hl=en.\nProblems with payments during registration Remember that you need to have appropriate debit card in order to proceed with payments. E.g. I have debit card in PKO BP (Polish bank), which has two-stage authorization.","title":"Publishing Android application in Google Play store"},{"content":"Today I had talk at Future Processing about Android. It was part of company\u0026rsquo;s Java show \u0026amp; tell series. I wanted to make it interesting both for people without any experience with Android development and for people who already know something about this platform. Presentation was divided into three main parts:\n Basics Challenges Techniques  Below, you can browse slides from the presentation.\nView the presentation\nOf course, slides does not show everything I prepared, but they are good summary of the talk. I hope you find it interesting and useful. Feel free to give me any feedback about the presentation (especially if you attended it in person. ;-)) !\n","permalink":"https://wittchen.io/posts/stuff-you-should-know-about-android/","summary":"Today I had talk at Future Processing about Android. It was part of company\u0026rsquo;s Java show \u0026amp; tell series. I wanted to make it interesting both for people without any experience with Android development and for people who already know something about this platform. Presentation was divided into three main parts:\n Basics Challenges Techniques  Below, you can browse slides from the presentation.\nView the presentation\nOf course, slides does not show everything I prepared, but they are good summary of the talk.","title":"Stuff you should know about Android"},{"content":"Overview Recently, I have written small set of methods for a FileHelper using Jackson library in Android application, which allows to save generic Java objects and list of generic objects in JSON format to a file and read them back in the original form. In the beginning I had some problems with saving and reading data properly. I could save and read data (e.g. list of the objects), but their type was LinkedHashMap, which wasn\u0026rsquo;t the list of desired generic objects. After adjusting Jackson library, I finally achieved my goal. You can see helper class below.\nHelper class /** * Helper is using Jackson library and Google Guava */ public class FileHelper { public static \u0026lt;Type\u0026gt; void saveObjectToFile(Object object, TypeReference\u0026lt;Type\u0026gt; type, String fileName) { ObjectMapper mapper = new ObjectMapper(); try { FileOutputStream fileOutputStream = new FileOutputStream(fileName); OutputStreamWriter outputStreamWriter = new OutputStreamWriter(fileOutputStream, Charsets.UTF_8.name()); Writer writer = new BufferedWriter(outputStreamWriter); mapper.writerWithType(type).writeValue(writer, object); fileOutputStream.close(); outputStreamWriter.close(); writer.close(); } catch (FileNotFoundException exception) { exception.printStackTrace(); } catch (IOException exception) { exception.printStackTrace(); } } public static \u0026lt;ReturnedObject\u0026gt; ReturnedObject readObjectFromFile(String fileName, Class\u0026lt;ReturnedObject\u0026gt; returnedObjectClass) { ReturnedObject object = null; ObjectMapper mapper = new ObjectMapper(); final JavaType type = mapper.getTypeFactory().constructType(returnedObjectClass); try { object = mapper.readValue(Files.toString(new File(fileName), Charsets.UTF_8), type); } catch (FileNotFoundException exception) { exception.printStackTrace(); } catch (IOException exception) { exception.printStackTrace(); } return object; } public static \u0026lt;ReturnedObject\u0026gt; List\u0026lt;ReturnedObject\u0026gt; readObjectListFromFile(String fileName, Class\u0026lt;ReturnedObject\u0026gt; returnedObjectClass) { List\u0026lt;ReturnedObject\u0026gt; objectList = new ArrayList\u0026lt;\u0026gt;(); ObjectMapper mapper = new ObjectMapper(); final CollectionType collectionType = mapper.getTypeFactory().constructCollectionType(List.class, returnedObjectClass); try { objectList = mapper.readValue(Files.toString(new File(fileName), Charsets.UTF_8), collectionType); } catch (FileNotFoundException exception) { exception.printStackTrace(); } catch (IOException exception) { exception.printStackTrace(); } return objectList; } public static boolean fileExists(String fileName) { File file = new File(fileName); return file.exists(); } } Usage You can use this helper in the following way:\n// initializing object and list of the objects MyObject myObject = new MyObject(); List\u0026lt;MyObject\u0026gt; myObjectList = new ArrayList\u0026lt;\u0026gt;(); // saving object to file FileHelper.saveObjectToFile(myObject, new TypeReference\u0026lt;MyObject\u0026gt;() {}, \u0026#34;my_object.json\u0026#34;); // reading object from file MyObject myObjectRead = FileHelper.readObjectFromFile(\u0026#34;my_object.json\u0026#34;, MyObject.class); // saving list of the objects to file FileHelper.saveObjectToFile(myObjectList, new TypeReference\u0026lt;List\u0026lt;MyObject\u0026gt;\u0026gt;() {}, \u0026#34;list_of_my_objects.json\u0026#34;); // reading list of the objects from a file List\u0026lt;MyObject\u0026gt; myObjectListRead = FileHelper.readObjectListFromFile(\u0026#34;list_of_my_objects.json\u0026#34;, MyObject.class); ","permalink":"https://wittchen.io/posts/reading-writing-generic-java-objects-to-json-files-and-vice-versa/","summary":"Overview Recently, I have written small set of methods for a FileHelper using Jackson library in Android application, which allows to save generic Java objects and list of generic objects in JSON format to a file and read them back in the original form. In the beginning I had some problems with saving and reading data properly. I could save and read data (e.g. list of the objects), but their type was LinkedHashMap, which wasn\u0026rsquo;t the list of desired generic objects.","title":"Reading/writing generic Java objects to JSON files and vice versa"},{"content":"Please note: This post is outdated. Check newest API on the GitHub.\nIntroduction NetworkEvents is an Android library, which I\u0026rsquo;ve created recently for one of the projects. It uses Otto Event Bus to support event driven programming. We can use appropriate annotations and perform any action, when connectivity status changes. E.g. when device will go offline, connects to the mobile network, connects to the WiFi network, connects to the WiFi network with Internet access or connects to WiFi network without Internet access. Android API does not allow to determine whether specific WiFi Access Point is connected to the Internet, but this library does. In addition, we can monitor change of the signal strength of available WiFi Access Points in the same manner as connectivity status.\nWhere can I get it? NetworkEvents library is open-source and available on GitHub at: https://github.com/pwittchen/NetworkEvents. You can clone this repository and see how it works. It contains sample project using library module dependency. Network Events library is placed in separate module. Android Studio is recommended IDE.\nHow to use it? 1. Initialize EventBus and NetworkEvents You can do it in onCreate() method of the activity in case of using library in activity.\nBus bus = new Bus(); NetworkEvents networkEvents = new NetworkEvents(this, bus); 2. Register/Unregister EventBus and NetworkEvents @Override protected void onResume() { super.onResume(); bus.register(this); networkEvents.register(); } @Override protected void onPause() { super.onPause(); bus.unregister(this); networkEvents.unregister(); } 3. Subscribe events We can subscribe two or just one event. It depends on our needs. The following events are available:\n ConnectivityStatusChangedEvent WifiAccessPointsSignalStrengthChangedEvent  Subscribing events is simple. Look at the code below.\n@Subscribe public void connectivityStatusChanged(ConnectivityStatusChangedEvent event) { // you can perform here any action you want to  // in this example we are displaying toast with Connectivity Status  // and another toast with WiFi info  Toast.makeText(this, event.getConnectivityStatus().toString(), Toast.LENGTH_SHORT).show(); Toast.makeText(this, event.getWifiInfo().toString(), Toast.LENGTH_SHORT).show(); } @Subscribe public void wifiAccessPointsRefreshed(WifiAccessPointsSignalStrengthChangedEvent event) { // you can perform here any action you want to  // in this example we are retrieving list of available access points  // and storing it on the List  WifiManager wifiManager = (WifiManager) getSystemService(Context.WIFI_SERVICE); List\u0026lt;ScanResult\u0026gt; accessPoints = wifiManager.getScanResults(); } That’s it! For more details, check NetworkEvents project on GitHub at: https://github.com/pwittchen/NetworkEvents README.md file also contains some details.\nRemarks EventBus and NetworkEvents can be accessed via Singletons to avoid multiple instances of these classes.\n","permalink":"https://wittchen.io/posts/network-events-android-library/","summary":"Please note: This post is outdated. Check newest API on the GitHub.\nIntroduction NetworkEvents is an Android library, which I\u0026rsquo;ve created recently for one of the projects. It uses Otto Event Bus to support event driven programming. We can use appropriate annotations and perform any action, when connectivity status changes. E.g. when device will go offline, connects to the mobile network, connects to the WiFi network, connects to the WiFi network with Internet access or connects to WiFi network without Internet access.","title":"NetworkEvents - Android library"},{"content":"In this article, I\u0026rsquo;ll describe Ubuntu software for common users, which I personally use and which could be helpful on daily basis. Ubuntu software dedicated to programmers AKA developers will be described in separate article.\nChrome In my opinion, it\u0026rsquo;s currently the best web browser. We can download, unpack and install it, with the following commands:\nsudo apt-get install libxss1 libappindicator1 libindicator7 wget https://dl.google.com/linux/direct/google-chrome-stable\\_current\\_amd64.deb sudo dpkg -i google-chrome*.deb Skype Maybe it\u0026rsquo;s not the best, but one of the most known messengers and lot of people use it. In addition, at my work people currently use it as a common messenger. We can download and install it with the following commands (first command adds new software repository, from which Skype can be downloaded):\nsudo add-apt-repository \u0026#34;deb http://archive.canonical.com/ $(lsb_release -sc) partner\u0026#34; sudo apt-get update sudo apt-get install skype Spotify After I started using Spotify, I stopped keeping all my mp3s on the hard drive. Of course, it has pros and cons, but for now I think that Spotify is good choice for people who like to listen to the music quite often. In addition, premium version is quite cheap. We can download and install Linux version of the Spotify with the following commands:\nsudo sh -c \u0026#39;echo \u0026#34;deb http://repository.spotify.com/ stable non-free\u0026#34; \u0026gt; /etc/apt/sources.list.d/spotify.list\u0026#39; sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 94558F59 sudo apt-get update sudo apt-get install spotify-client Disabling notifications after starting new song Notifications, which appears after starting new song are enabled by default. They are annoying for me, so I decided to turn them off. I\u0026rsquo;ve edited file: ~/.config/spotify/Users/[Spotify user name]/prefs and set ui.track_notifications_enabled=false. After that, I restarted Spotify and notifications disappeared.\nDropbox Dropbox is great software. I often use it to backup my files and when I want to access specific files on different devices. We can install it with the following command: cd ~ \u0026amp;\u0026amp; wget -O - \u0026quot;https://www.dropbox.com/download?plat=lnx.x86_64\u0026quot; | tar xzf - After installing, we can launch Dropbox with the following command: ~/.dropbox-dist/dropboxd We can execute the following command to run Dropbox in the background even if we close terminal: nohup ~/.dropbox-dist/dropboxd Unfortunately, Dropbox is not launched on autostart after rebooting computer, so I installed additional software, which runs Dropbox in the background on startup and displays indicator icon. I just typed the following commands:\nsudo apt-get install libappindicator1 sudo apt-get install nautilus-dropbox Deluge Deluge is lightweight torrent client similar to uTorrent and BitTorrent. We can install it by typing the following command:\nsudo apt-get install deluge Transmission Yet another light torrent client. Install it with:\nsudo apt-get install transmission Java Many programs are written in Java, so if we want to use them, we have to have Java Virtual Machine installed on the system. Using Oracle Java 7 is not formally supported by Ubuntu. There\u0026rsquo;s plenty solutions for installing it, listed on https://help.ubuntu.com/community/Java. The simplest one listed is this one:\nsudo add-apt-repository ppa:webupd8team/java sudo apt-get update sudo apt-get install oracle-java7-installer\nIt\u0026rsquo;ll keep your java 7 installation up to date. To automatically set up the Java 7 environment variables JAVA_HOME and PATH: sudo apt-get install oracle-java7-set-default Enabling global menu (HUD) support in Swing applications Some Java Swing applications do not support global menu (HUD) available in Unity environment enabled by default in Ubuntu. This problem occurs often in applications for software developers like IntelliJ IDEA, Android Studio, PyCharm, Netbeans, etc. but it may also occur in any Swing application. We can enable this menu by installing jayatana in the following way:\nsudo add-apt-repository ppa:danjaredg/jayatana sudo apt-get update sudo apt-get install jayatana Source of this solution: http://www.webupd8.org/2014/02/get-unity-global-menu-hud-support-for.html\nWine Wine is a software, which allows to run some MS Windows applications on Linux. For sure it works with Adobe Photoshop CS2. We can install it with the following command:\nsudo apt-get install wine Gthumb Small and useful image browser and editor. Use the command below to install it.\nsudo apt-get install gthumb Pinta Pinta is simple, lightweight image editor. We can install it with the following command:\nsudo apt-get install pinta Furious ISO Mount Furious ISO Mount is application similar to Virtual Clone Drive or Daemon Tools available on Windows, which allows us to mount images of the CD into virtual drive. We can install it in the following way:\nsudo apt-get install furiusisomount Virtual Box Virtual Box allows us to use virtual machines and install on them e.g. MS Windows 7, 8, different Linux distributions or any other operating system and use it in dedicated sandbox. We can install it with the following command:\nsudo apt-get install virtualbox Gedit Gedit is simple, but very good text editor and a little bit enhanced notepad. It\u0026rsquo;s available on Ubuntu by default, but in case you don\u0026rsquo;t have it, use the following command to get it:\nsudo apt-get install gedit Clementine Ubuntu has one music player installed by default. It\u0026rsquo;s called Rhythmbox. It looks ok, but it had problems with playing my mp3 files. Problem could be connected both with the drivers and this software. I decided to try another lightweight music player called Clementine. It\u0026rsquo;s small, configurable and works fine with my mp3s right after installing. Use the following command to download and install it:\nsudo apt-get install clementine VLC VLC is one of the best video players for MS Windows and Linux. You should have it if you want to play your videos without problems. Use the following command to install VLC:\nsudo apt-get install vlc browser-plugin-vlc Drivers for Logitech H760 Wireless Headset I am using Logitech H760 Wireless Headset and it does not work on Ubuntu by default. In order to bring it to work we have to install additional software in the following way:\nsudo add-apt-repository ppa:ubuntu-audio-dev/ppa sudo apt-get update sudo apt-get dist-upgrade -y After connecting headset receiver, I had to change output of the sound and input of the microphone to my headset in system settings. Previously it was set to loud speakers. After switching back to loud speakers, I have to change output of the sound to speakers to hear sound in the speakers. It\u0026rsquo;s quite inconvenient, but I don\u0026rsquo;t know, how to automate it. In MS Windows it switches automatically without additional drivers or additional operations, so probably manufacturer should take care of this in case of Linux OS.\nSomething else? I guess I listed most of the common Ubuntu software I use (besides of course Terminal, System Monitor and programming tools ;-). If you know any useful software, which wasn\u0026rsquo;t listed here, write about it in comments below this article. I would be happy to update this post.\n","permalink":"https://wittchen.io/posts/software-for-common-users-on-ubuntu/","summary":"In this article, I\u0026rsquo;ll describe Ubuntu software for common users, which I personally use and which could be helpful on daily basis. Ubuntu software dedicated to programmers AKA developers will be described in separate article.\nChrome In my opinion, it\u0026rsquo;s currently the best web browser. We can download, unpack and install it, with the following commands:\nsudo apt-get install libxss1 libappindicator1 libindicator7 wget https://dl.google.com/linux/direct/google-chrome-stable\\_current\\_amd64.deb sudo dpkg -i google-chrome*.deb Skype Maybe it\u0026rsquo;s not the best, but one of the most known messengers and lot of people use it.","title":"Software for common users on Ubuntu"},{"content":"Description of the problem Recently, after installing Linux Ubuntu 14.04 LTS on my computer, I encountered strange problem during the system boot. Before system launched, I received the following message: After that, I typed: exit and system started normally, but this error occurred every time after reboot, so I decided to fix it.\nFixing the problem Attempt #1 First, I tried to change rootdelay as error message said. I opened file /etc/default/grub I found there the following line:\nGRUB_CMDLINE_LINUX_DEFAULT=\u0026#34;quiet splash\u0026#34; and changed it to:\nGRUB_CMDLINE_LINUX_DEFAULT=\u0026#34;rootdelay=90 quiet splash\u0026#34; rootdelay became longer, but unfortunately it didn\u0026rsquo;t fix the problem in my case.\nAttempt #2 I edited /etc/fstab file. I executed the following command in terminal: sudo gedit /etc/fstab and edited fstab file in gedit. In the beginning my file looked like that:\n# /etc/fstab: static file system information. # # Use \u0026#39;blkid\u0026#39; to print the universally unique identifier for a # device; this may be used with UUID= as a more robust way to name devices # that works even if disks are added and removed. See fstab(5). # # \u0026lt;file system\u0026gt; \u0026lt;mount point\u0026gt; \u0026lt;type\u0026gt; \u0026lt;options\u0026gt; \u0026lt;dump\u0026gt; \u0026lt;pass\u0026gt; # / was on /dev/sda1 during installation UUID=96889309-5f73-4688-8354-e64cd1bb158f / ext4 errors=remount-ro 0 1 # swap was on /dev/sda5 during installation UUID=480cc3f7-a39d-4d0f-93d5-49fc8df1a392 none swap sw 0 0 Then, I commented one line and added another one describing /dev/sda1 disk device. Now, my file looks as follows:\n# /etc/fstab: static file system information. # # Use \u0026#39;blkid\u0026#39; to print the universally unique identifier for a # device; this may be used with UUID= as a more robust way to name devices # that works even if disks are added and removed. See fstab(5). # # \u0026lt;file system\u0026gt; \u0026lt;mount point\u0026gt; \u0026lt;type\u0026gt; \u0026lt;options\u0026gt; \u0026lt;dump\u0026gt; \u0026lt;pass\u0026gt; # / was on /dev/sda1 during installation UUID=/dev/sda1/ ext4 errors=remount-ro 0 1 # UUID=96889309-5f73-4688-8354-e64cd1bb158f / ext4 errors=remount-ro 0 1 # swap was on /dev/sda5 during installation UUID=480cc3f7-a39d-4d0f-93d5-49fc8df1a392 none swap sw 0 0 Problem still existed, so I tried another attempt to solve it.\nAttempt #3 I opened terminal and typed the following command:\nsudo grub-install /dev/sda and then I typed another command to update grub:\nsudo update-grub After all of this, I rebooted computer and finally, error disappeared and problem was fixed!\nNote #1\nAfter removing rootdelay from the /etc/default/grub file, everything still works fine.\nI was struggling with this error for some time, so I am very happy that I managed to fix it. I am a Linux n00b, so If you know any better or more efficient solutions to fix it, I will appreciate all of these.\nNote #2\nI\u0026rsquo;ve found another attempt (work-around) for this problem. You can get rid of the described problem with the following commands.\nsudo sed -i \u0026#39;s/maybe_break mount/sleep 5\\nmaybe_break mount/g\u0026#39; /usr/share/initramfs-tools/init sudo update-initramfs -u For more details check this thread.\n","permalink":"https://wittchen.io/posts/ubuntu-system-boot-problem/","summary":"Description of the problem Recently, after installing Linux Ubuntu 14.04 LTS on my computer, I encountered strange problem during the system boot. Before system launched, I received the following message: After that, I typed: exit and system started normally, but this error occurred every time after reboot, so I decided to fix it.\nFixing the problem Attempt #1 First, I tried to change rootdelay as error message said. I opened file /etc/default/grub I found there the following line:","title":"Ubuntu system boot problem"},{"content":"Recently, I graduated from my university. Below, you can browse my Master Thesis presentation about Brain-Computer Interface for mobile devices. If you are interested in writing mobile Android applications communicating with NeuroSky MindWave Mobile device, you can check my EEG Reader project on GitHub, which can be treated as a basis for more advanced projects. During writing my Master Thesis, I created two another projects using similar concepts. Mentioned code may be a little bit outdated comparing to the newest Android trends, but feel free to fork and upgrade it.\nUpdate: You can read a publication based on my Master Thesis in the Journal Of Medical Informatics \u0026amp; Technologies Vol. 24/2015, ISSN 1642-6037 : Brain-Computer Interface for Mobile Devices\nView presentation\n","permalink":"https://wittchen.io/posts/bci-for-mobile-devices-master-thesis-presentation/","summary":"Recently, I graduated from my university. Below, you can browse my Master Thesis presentation about Brain-Computer Interface for mobile devices. If you are interested in writing mobile Android applications communicating with NeuroSky MindWave Mobile device, you can check my EEG Reader project on GitHub, which can be treated as a basis for more advanced projects. During writing my Master Thesis, I created two another projects using similar concepts. Mentioned code may be a little bit outdated comparing to the newest Android trends, but feel free to fork and upgrade it.","title":"Brain-Computer Interface for mobile devices - Master Thesis presentation"},{"content":"During the development of mobile applications, we should adjust our point of view to the specific projects we are working with. Applications for mobile devices are different than desktop or web applications. They have their own lifecycle, work on various devices with different screen resolutions. They have to work on devices with limited memory, clock rate of the CPU and battery life. In addition, these applications often have to be able to work without an Internet connection and their user interface has to be simple and well-designed due to smaller screen of a typical smartphone.\nAs we can see, there is a lot of limitations, but there are also plenty of new possibilities. We can use GPS and create location-aware applications. We can access Bluetooth and establish a connection with external devices. The interaction between the user and our application can be performed with a touch screen. We can even use accelerometer, built-in most of devices, as an alternative UI controller or we can use it for monitoring the activity of the user. New Android API have a feature called Activity Recognition, which allows to detect whether the user is walking, cycling, driving a car, etc. This function uses both GPS and accelerometer. As we can see, the development of mobile applications has a lot of limitations, but it also brings a lot of new possibilities and uncovered areas, which have not been accessible before through traditional applications. Creating such projects can be a great challenge for every software developer. This article describes a few aspects of creating mobile applications, which can help to develop better projects and extend knowledge. Of course, it does not cover all the topics, but it is a good starting point for further research and development.\nDealing with activity lifecycle Before we start developing applications for Android platform, it is important to familiarise with Activity Lifecycle. As the documentation says an activity is a single, focused thing that the user can do and has its own screen and layout associated with it. We have to remember that while the user is using our application, he or she can receive phone call, SMS, push notification from another application, Internet connection can be lost, battery can be low, the phone will start turning off, etc. In addition, the user can rotate the screen of the device, what will cause recreation of the activity. Good practice is to create all important objects in onCreate(Bundle savedInstanceState) method. We have to remember that this method will not be called again, when running activity goes to the background and we call it for the second time. In such case, it will be moved to the top of the activity stack. If we want to execute specific methods every time when we call the activity (no matter, whether it is the first time or not), then we should execute them in onResume() method. Sometimes, the user provides some data into our application and we do not want to lose this data, when an unexpected event will occur. In such case, we can call methods responsible for saving the data and information about the application state in onPause() method. After that, we will be able to retrieve saved information in onResume() method in the future. In specific cases, we can handle configuration changes ourselves, if we want to prevent the recreation of the activity on screen rotation. It can be easily done by manipulating android:configChanges parameter of the activity in AndroidManifest.xml file. Value “orientation|keyboardHidden” will prevent the recreation of the activity. In newer versions of the API, we have to set this parameter to “orientation|keyboardHidden|screenSize”. It is not always necessary, but it is good to know that.\nContext of the activity and application Some methods of Android API, which are responsible for interaction with user interface or accessing resources of the application, requires Context type value as a parameter. Actually, we have two main types of the Context:\n Context of the specific Activity Context of the Application  The problem occurs, when we do not know, when to use which and why. In general, when we call the methods, which are responsible for interaction with the UI, we should use Context of the Activity. In addition, when we create custom views, we should also pass Context of the Activity into them. We should do it, because we may lose styles of our application and custom views will be rendered with default Android styles. We also should use this Context, when we perform actions strictly connected with the Activity. When we want to pass Context of the Activity inside Activity, we can simply use this keyword, which contains instance of the Activity, which also represents its Context. There are situations, in which, we can use Context of the Application. It can be done when we access the resources of the application, file paths, strings, data defined in *.xml files and so on. Actually, we should use this context in each case, which is not explicitly related to Activity. In such situations, it is a good practice to create Generic Application and static context in order to standardise the way of accessing it and to be sure that we always access the same object. We can do it in the following way:\npublic class GenericApplication extends Application { private static Application instance; @Override public void onCreate() { super.onCreate(); instance = this; } public static Context getContext() { return instance.getApplicationContext(); } } After that, we have to define GenericApplication in application tag in the android:name attribute.\n\u0026lt;application android:name=\u0026#34;com.futureprocessing.example.generics.GenericApplication\u0026#34;\u0026gt; Now, we will be able to access static Context of the application by calling GenericApplication.getContext() method from any place of our application.\nDependency Injection Dependency Injection as an implementation of Inversion of Control technique allows creating an abstract code with different implementations and follows the Dependency Inversion Principle. In this software design pattern dependent object have injected services. Dependency Injection separates the creation of objects from their behavior. The advantage of this solution is the fact that injected services can be loosely coupled. In addition, there is less lines of code and source of the project becomes clear. There are libraries for Android platform, which have functionality similar to popular Java frameworks dedicated to web applications. One of these solutions is RoboGuice. This is an annotation-based framework, which allows injecting views, resources, system services and POJOs. We do not have to create objects and cast views every time, because the framework will do it for us. Moreover, we can create custom bindings. This can be helpful in many situations. E.g. when one team is working on back-end application, providing web service with data and another team is working on mobile application, which should access this web service. In distributed teams, it may happen that the back-end team is a part of another company or work in a different country than mobile application team. Additionally, web service can be unfinished, but mobile team want to continue the work. In such case, we can create an interface with e.g. getData() method and mock web service implementing this interface. After that, we can bind our interface to mock web service and then inject the interface anywhere in the application. In such situation, application will be using mock data. When proper method responsible for retrieving the data from web service will be created, we can simply change the binding to real web service implementing aforementioned interface. This approach utilises Service Stub pattern, recommended by Martin Fowler. RoboGuice is a very comfortable and elegant solution, but its main drawback is the fact that it uses reflection and dependencies are created in runtime. When we have a lot of dependencies, it can slow down our application. When we face such problem, we can consider using Dagger, which does not use reflection, but generates java files containing dependencies. Those generated files can be compiled, so the application is not responsible for creating dependencies in runtime anymore. Dagger does not support injection of the views. If we want to inject them, we can use Butter Knife library, which is based on concept similar to Dagger.\nSingle Responsibility Principle Many tutorials and code samples of Android applications are not properly designed. There often is a lot of functionality contained inside single class extending Activity class. It is not a good practice, but in some cases it shows how specific functionality actually works and can be more understandable. Nevertheless, in real life, we should divide our code into smaller pieces, responsible for their own tasks to fulfill Single Responsibility Principle from SOLID concept, which will increase the quality of our code. It is better to understand this idea by looking at an example. Let’s implement a simple MVC pattern, delegate some functionality to the controller and display the result in activity. We can make an assumption that classes extending Activity will be responsible only for displaying the data and UI. Other methods will be accessed from other classes. First of all, we need to create an interface for our activity.\npublic interface SampleView { void displayData(String data); } Next, we have to create a controller, which will call the method from the class implementing previously created interface.\npublic class SampleController { private SampleView view; public SampleController(SampleView view) { this.view = view; } public void generateData() { String generatedData = \u0026#34;Exemplary data generated by controller.\u0026#34;; view.displayData(generatedData); } } Now, we are ready to create a class extending Activity class and implementing our interface. In this example, we are injecting view with RoboGuice, but we can use findViewById(int) method as well. We can create an object of the controller, assign to its constructor instance of current activity and execute the proper method. Then, the method inside the controller can access the activity through the interface, in order to display the results. Of course, we can call generateData() method anywhere (e.g. after clicking the button).\npublic class SampleActivity extends Activity implements SampleView { @InjectView(R.id.sample_textview) private sampleTextView; private SampleController controller; @Override public displayData(String data) { sampleTextView.setText(data); } @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); this.controller = new SampleController(this); } @Override protected void onResume() { super.onResume(); controller.generateData(); } } After these operations, in this short example we have separated an application logic and specific functions from the methods which operate on user interface. This is just a brief example of using MVC pattern. In bigger projects, we need to implement more complicated structures as well as create additional classes depending on specific cases and requirements.\nMultithreading Android API allows creating multithreaded applications. It is very useful, when we want our applications to do many things at the same time, when we want to create lazy loading solutions or run some tasks periodically in the background.\nWe can distinguish two main classes, which can be used for creating threads:\n Thread AsyncTask  These solutions can be used for different purposes.\nA Thread is actually a concurrent unit of execution and it is built-in Java class. That is why, it is not Android-specific. In Android applications, we should use dedicated classes, but we can use Thread class, when we want to write concurrent application with lower level of abstraction. Thread object can be called from any thread with start() method. It runs on its own thread. Its drawback is manual thread management and not so good code readability.\nAsyncTask is one of the most popular classes used for writing concurrent Android applications. It is usually used for long lasting tasks, which have to communicate with main thread or display the results in UI thread. This class should be used for task, which will be started, executed and finished while the user is accessing a single activity. AsyncTask can be called by execute() method from the main thread. It runs on a worker thread, but may be invoked by the main thread in order to publish the results or progress in the UI. One instance of this class can be executed only once. AsyncTask must be created and executed by the main thread. When activity creating AsyncTask will be destroyed, the thread also will be destroyed and the application will have to create and run it once again in the future.\nLong running operations Classes responsible for long running operations are confusing. They are sometimes classified as classes responsible for creating threads or processes, which is common mistake.\nWe can distinguish two main classes, which can be used for performing long running operations:\n Service IntentService extending Service  Service is application component used for running long-lasting tasks. It is neither thread nor process. It is also not connected with UI and should not last too long. We can execute threads (e.g. AsyncTask) within service for long task. In addition, Service can be run periodically. E.g. every 10 seconds, from the time it was started. It will be running even if our application will be send to the background until we decide to stop this thread. Service can be started by onStartService() method and can be executed from any thread. It also runs on the main thread, so a drawback of this class is the fact that it can block the main thread.\nIntentService is a class extending Service class. It handles asynchronous requests on demand. It can be started by main thread and runs on separate worker thread. It cannot run tasks in parallel. As Android documentation says:\n This “work queue processor” pattern is commonly used to offload tasks from an application’s main thread. The IntentService class exists to simplify this pattern and take care of the mechanics. To use it, extend IntentService and implement onHandleIntent(Intent). IntentService will receive the Intents, launch a worker thread, and stop the service as appropriate.\n Summary Mobile Android applications are very specific projects, which are different than regular desktop or web applications. They have different lifecycle and different UI, but still some approaches are similar to traditional software solutions. Mobile applications and mobile devices have a lot of limitations. On the other hand, they have a lot of new features, functions and user interaction methods, which have not been available before, what brings new possibilities and fresh ideas. Regardless of the fact that they run on small devices, they are a great challenge for software developers and the future of today’s technology.\nNote: This article was also published on the Technical Blog of Future Processing company at: https://www.future-processing.pl/blog/selected-aspects-of-creating-mobile-android-applications/\n","permalink":"https://wittchen.io/posts/selected-aspects-of-creating-mobile-android-applications/","summary":"During the development of mobile applications, we should adjust our point of view to the specific projects we are working with. Applications for mobile devices are different than desktop or web applications. They have their own lifecycle, work on various devices with different screen resolutions. They have to work on devices with limited memory, clock rate of the CPU and battery life. In addition, these applications often have to be able to work without an Internet connection and their user interface has to be simple and well-designed due to smaller screen of a typical smartphone.","title":"Selected aspects of creating mobile Android applications"},{"content":"There are many approaches concerning selecting items on Android\u0026rsquo;s ListView. Unfortunately most of them don\u0026rsquo;t work. I was struggling with this problem for some time and decided to publish my solution, which is actually quite easy.\nThe problem I want to highlight item on a ListView programmatically (in a source code - without touching item on the screen). I also want to click on item of the ListView programmatically.\nSolution We have to create our own adapter. Let\u0026rsquo;s call it ContactsAdapter.\npublic class ContactsAdapter extends BaseAdapter { private final ArrayList list; private int selectedItem = -1; // no item selected by default  // put neccessary code here - it\u0026#39;s not important in this description  public ContactsAdapter(List\u0026lt;Contact\u0026gt; contacts) { list = new ArrayList(); list.addAll(contacts); } @Override public View getView(int position, View convertView, ViewGroup parent) { final View result; if (convertView == null) { result = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_contact, parent, false); } else { result = convertView; } highlightItem(position, result); Contact contact = getItem(position); ((TextView) result.findViewById(android.R.id.text1)).setText(contact.name); return result; } /** * methods from StringUtils calls: * getContext().getResources().getColor(int resourceId) * getContext().getResources().getDrawable(int resourceId) * You can use them in your own context * (e.g. generic application context or you can pass activity context) */ @TargetApi(Build.VERSION_CODES.JELLY_BEAN) private void highlightItem(int position, View result) { if(position == selectedItem) { // you can define your own color of selected item here  result.setBackgroundColor(StringUtils.getColorFromResources(R.color.light_blue)); } else { // you can define your own default selector here  result.setBackground(StringUtils.getDrawableFromResources(R.drawable.abs__list_selector_holo_light)); } } public void setSelectedItem(int selectedItem) { this.selectedItem = selectedItem; } // put rest of your necessary code here...  } Important methods are:\n View getView(int position, View convertView, ViewGroup parent) - returns View of the single list item on the given position void highlightItem(int position, View result) - highlights item on a given position (sets proper background) public void setSelectedItem(int selectedItem) - sets item to highlight  Now, we have to set our adapter in a ListView in activity.\n@Override protected void onResume() { List\u0026lt;Contact\u0026gt; contacts = getContactsFromYourSource(); ContactsAdapter contactsAdapter = new ContactsAdapter(contacts); contactListView.setAdapter(contactsAdapter); highlightListItem(2); // this simple function call does the trick } private void highlightListItem(int position) { ContactsAdapter contactsAdapter = (ContactsAdapter) contactListView.getAdapter(); contactsAdapter.setSelectedItem(position); // in some cases, it may be necessary to re-set adapter (as in the line below)  contactListView.setAdapter(contactsAdapter); } In this example, highlightListItem(int) method will highlight chosen item on a ListView available in a variable contactListView.\nClicking programmatically is much more easier, than highlighting item. We can simply use the method below assuming, that we properly created contactListView attribute and assigned it to appropriate view.\nprivate void clickOnListItem(int position) { contactList.performItemClick(contactListView, position, contactListView.getItemIdAtPosition(position)); } ","permalink":"https://wittchen.io/posts/how-to-highlight-and-click-on-listview-item-in-android-programmatically/","summary":"There are many approaches concerning selecting items on Android\u0026rsquo;s ListView. Unfortunately most of them don\u0026rsquo;t work. I was struggling with this problem for some time and decided to publish my solution, which is actually quite easy.\nThe problem I want to highlight item on a ListView programmatically (in a source code - without touching item on the screen). I also want to click on item of the ListView programmatically.\nSolution We have to create our own adapter.","title":"How to highlight and click on ListView item in Android programmatically?"},{"content":"With Content Providers we can access data stored by Android system applications. Popular example of using Content Provider is retrieving contact list from the smartphone. We can also access Calendar or create our own Content Provider. More information about that can be found in documentation of Android. If we want to access Content Provider, we can use Content Resolver in our application\u0026rsquo;s context.\nIn this example, we will access contact list. First of all, it’s good to create Contact entity class, which will be model of our data.\npublic class Contact { public int id; public String name; public String phone; public String email; public String uriString; } We can access application’s context through GenericApplication class extending Application class.\npublic class GenericApplication extends Application { private static Application instance; @Override public void onCreate() { super.onCreate(); instance = this; } public static Context getContext() { return instance.getApplicationContext(); } } We can use static application’s context in many situations. Nevertheless, we should avoid this practice when we work with UI and Views, because we may have problems with styles, look \u0026amp; feel of the application and other issues.\nNow, we can create ContactsProvider class (we can call it as we want).\npublic class ContactsProvider { private Uri QUERY_URI = ContactsContract.Contacts.CONTENT_URI; private String CONTACT_ID = ContactsContract.Contacts._ID; private String DISPLAY_NAME = ContactsContract.Contacts.DISPLAY_NAME; private Uri EMAIL_CONTENT_URI = ContactsContract.CommonDataKinds.Email.CONTENT_URI; private String EMAIL_CONTACT_ID = ContactsContract.CommonDataKinds.Email.CONTACT_ID; private String EMAIL_DATA = ContactsContract.CommonDataKinds.Email.DATA; private String HAS_PHONE_NUMBER = ContactsContract.Contacts.HAS_PHONE_NUMBER; private String PHONE_NUMBER = ContactsContract.CommonDataKinds.Phone.NUMBER; private Uri PHONE_CONTENT_URI = ContactsContract.CommonDataKinds.Phone.CONTENT_URI; private String PHONE_CONTACT_ID = ContactsContract.CommonDataKinds.Phone.CONTACT_ID; private String STARRED_CONTACT = ContactsContract.Contacts.STARRED; private ContentResolver contentResolver; public ContactsProvider() { contentResolver = GenericApplication.getContext().getContentResolver(); } public List\u0026lt;Contact\u0026gt; getContacts() { List\u0026lt;Contact\u0026gt; contactList = new ArrayList\u0026lt;Contact\u0026gt;(); String[] projection = new String[]{CONTACT_ID, DISPLAY_NAME, HAS_PHONE_NUMBER, STARRED_CONTACT}; String selection = null; Cursor cursor = contentResolver.query(QUERY_URI, projection, selection, null, null); while (cursor.moveToNext()) { Contact contact = getContact(cursor); contactList.add(contact); } cursor.close(); return contactList; } private Contact getContact(Cursor cursor) { String contactId = cursor.getString(cursor.getColumnIndex(CONTACT_ID)); String name = (cursor.getString(cursor.getColumnIndex(DISPLAY_NAME))); Uri uri = Uri.withAppendedPath(QUERY_URI, String.valueOf(contactId)); Intent intent = new Intent(Intent.ACTION_VIEW); intent.setData(uri); String intentUriString = intent.toUri(0); Contact contact = new Contact(); contact.id = Integer.valueOf(contactId); contact.name = name; contact.uriString = intentUriString; getPhone(cursor, contactId, contact); getEmail(contactId, contact); return contact; } private void getEmail(String contactId, Contact contact) { Cursor emailCursor = contentResolver.query(EMAIL_CONTENT_URI, null, EMAIL_CONTACT_ID + \u0026#34; = ?\u0026#34;, new String[]{contactId}, null); while (emailCursor.moveToNext()) { String email = emailCursor.getString(emailCursor.getColumnIndex(EMAIL_DATA)); if (!TextUtils.isEmpty(email)) { contact.email = email; } } emailCursor.close(); } private void getPhone(Cursor cursor, String contactId, Contact contact) { int hasPhoneNumber = Integer.parseInt(cursor.getString(cursor.getColumnIndex(HAS_PHONE_NUMBER))); if (hasPhoneNumber \u0026gt; 0) { Cursor phoneCursor = contentResolver.query(PHONE_CONTENT_URI, null, PHONE_CONTACT_ID + \u0026#34; = ?\u0026#34;, new String[]{contactId}, null); while (phoneCursor.moveToNext()) { String phoneNumber = phoneCursor.getString(phoneCursor.getColumnIndex(PHONE_NUMBER)); contact.phone = phoneNumber; } phoneCursor.close(); } } } We can filter our data, by manipulating selection parameter. E.g. if we want to retrieve only starred contacts, we can change “selection” parameter in the following way:\nString selection = STARRED_CONTACT + \u0026#34;=\u0026#39;1\u0026#39;\u0026#34;; If we want to retrieve more or less data, we can manipulate “projection” parameter. ContentResolver is just kind of proxy for SQLite databases available in Android applications, which allows us to access this data in a safe way. We can use SQL language in order to select proper data. Check Android documentation for more details.\nWe also need to remember to add proper parameter to our AndroidManifest.xml file.\n\u0026lt;uses-permission android:name=\u0026#34;android.permission.READ_CONTACTS\u0026#34; /\u0026gt; If we want to use GenericApplication class, we should also add proper attribute to application tag in AndroidManifest.xml file.\n\u0026lt;application android:name=\u0026#34;com.pwittchen.example.generics.GenericApplication\u0026#34;\u0026gt; That\u0026rsquo;s it!\nNow, we can use our class to read contacts very easily. We can even create an adapter and display contacts on the list or do whatever we want to.\n","permalink":"https://wittchen.io/posts/how-to-read-contacts-in-android-device-using-contentresolver/","summary":"With Content Providers we can access data stored by Android system applications. Popular example of using Content Provider is retrieving contact list from the smartphone. We can also access Calendar or create our own Content Provider. More information about that can be found in documentation of Android. If we want to access Content Provider, we can use Content Resolver in our application\u0026rsquo;s context.\nIn this example, we will access contact list.","title":"How to read contacts in Android device using ContentResolver?"},{"content":"Sometimes we may encounter an error connected with loading too large Bitmaps into Android UI. In such cases, we may receive OutOfMemoryError in stack trace. In Android, we are working with limited memory and we shouldn\u0026rsquo;t load images with full resolution into UI. These images should be scaled down in order to save memory and increase performance of the application. It\u0026rsquo;s very well described in official Android documentation in section Loading Large Bitmaps Efficiently. It\u0026rsquo;s worth reading. We can deal with memory problem in three easy steps:\n Read image dimensions and type Scale down image Load scaled down version of the image to memory  Now, we are ready to display image in the UI. In Android documentation, available from the link placed above, you can find relevant code, which will help you to solve the problem. If you want to load image from file path instead of resources, you can use my code snippet available below.\npublic static Bitmap decodeSampledBitmap(String filePath, int reqWidth, int reqHeight) { final BitmapFactory.Options options = new BitmapFactory.Options(); options.inJustDecodeBounds = true; BitmapFactory.decodeFile(filePath,options); options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight); options.inJustDecodeBounds = false; return BitmapFactory.decodeFile(filePath,options); } Source of the calculateInSampleSize method is available in Android documentation.\nUpdate: There is a library, which solves this problem and provides caching. It\u0026rsquo;s Picasso from Square. I recommend to use this library especially, when you\u0026rsquo;re dealing with a lot of images, ListViews and Adapters.\n","permalink":"https://wittchen.io/posts/avoiding-outofmemory-error-while-loading-large-bitmaps-in-android-ui/","summary":"Sometimes we may encounter an error connected with loading too large Bitmaps into Android UI. In such cases, we may receive OutOfMemoryError in stack trace. In Android, we are working with limited memory and we shouldn\u0026rsquo;t load images with full resolution into UI. These images should be scaled down in order to save memory and increase performance of the application. It\u0026rsquo;s very well described in official Android documentation in section Loading Large Bitmaps Efficiently.","title":"Avoiding OutOfMemory Error while loading large Bitmaps in Android UI"},{"content":"In team projects it\u0026rsquo;s important to prepare issue workflow and, so-called, definition of done in order to be sure, when particular task is actually done. It\u0026rsquo;s often practiced in agile projects and scrum process. When we take into consideration IT projects and version control system like Git, we can create Git branches with concrete purposes:\n master branch - latest stable version of the application - for Product Owner and client development branch - latest development version of the application with passed tests and code reviews, but waiting for approval of the Product Owner - for developers many single branches for each issue (task) in the project (e.g. creating part of the GUI, coding specific functionality or fixing a bug)  Besides the Version Control System, we also need to have other essential tools for software developement like issue tracker, etc. in order to realize work well. The easiest way to present definition of done (issue workflow) is to prepare a diagram. Exemplary diagram of such process introduced in one of the projects I am working in, is presented below.\nIntroducing such process in a project increases quality of the software, makes it more stable and whole work becomes systematic and well ordered.\n","permalink":"https://wittchen.io/posts/issue-workflow-in-agile-projects/","summary":"In team projects it\u0026rsquo;s important to prepare issue workflow and, so-called, definition of done in order to be sure, when particular task is actually done. It\u0026rsquo;s often practiced in agile projects and scrum process. When we take into consideration IT projects and version control system like Git, we can create Git branches with concrete purposes:\n master branch - latest stable version of the application - for Product Owner and client development branch - latest development version of the application with passed tests and code reviews, but waiting for approval of the Product Owner - for developers many single branches for each issue (task) in the project (e.","title":"Issue workflow in agile projects"},{"content":"While developing Android applications, we need to debug them on real devices. We also should be able to access debug output and execute Unix shell commands. In Android device (mobile phone or tablet), we can go to Settings and then to Developer options. Afterwards, we can enable USB Debugging. Now, we can connect our device via USB cable to the computer and we will be able to access it via Android Debug Bridge (ADB). USB connection is standard way of debugging application on real devices. We can also use TCP/IP connection and debug applications wireless. In order to do that, we need to go through the following steps:\n Activate USB debug mode in Android device (it\u0026rsquo;s described above) Connect Android device to computer via USB Open command prompt (With Admin Right) and type: adb tcpip 5555 (note #1: in Windows OS, you need to have platform-tools directory from Android SDK directory assigned to system variable Path; note #2: 5555 is number of port we will be using) Disconnect your tablet or smartphone from computer Open command prompt type: adb connect IPADDRESS (IPADDRESS is the DHCP/IP address of your tablet or smartphone, which you can find by going to: Settings » About device » Status » IP address)  Now, you can use adb commands. E.g. adb shell or adb logcat. If you want to list connected devices or check if any device is connected to your computer, you can use command: adb devices.\nNote #1: You shouldn\u0026rsquo;t use TCP/IP and USB debugging mode at the same time. If you want to return to USB debugging mode, just connect your device to the computer via TCP/IP and then type: adb usb. After that, connect device to the computer via USB cable and you will be able to debug applications via USB connection again.\nNote #2: In Android Studio you can use built-in terminal window instead of standard command prompt.\nNote #3: Alternative way of returning to default debug mode (USB) is resetting the phone. You can simply turn it off and then turn it on and device will be in USB debug mode again.\n","permalink":"https://wittchen.io/posts/how-to-connect-to-android-device-via-tcp-ip/","summary":"While developing Android applications, we need to debug them on real devices. We also should be able to access debug output and execute Unix shell commands. In Android device (mobile phone or tablet), we can go to Settings and then to Developer options. Afterwards, we can enable USB Debugging. Now, we can connect our device via USB cable to the computer and we will be able to access it via Android Debug Bridge (ADB).","title":"How to connect to Android device via TCP/IP?"},{"content":"Justifying text inside TextView in Android is not that simple as we may expect it to be. Unfortunately, Android does not have attribute for TextView, which supports justifying text. We can set alignment to the right or to the left, but we cannot simply justify text with generic attributes. In order to do that, we need to perform a few tricks. First of all, we need to create file named justified_textview.css and we need to put it into the assets/ directory of our project. We will use it later in our custom view. Source code of this CSS stylesheet is presented below:\nbody { font-size: 1.0em; color: rgb(0,0,0); text-align: justify; /* background: rgba(217, 217, 217, 1.0); you can set your background here, it\u0026#39;s kind of fix for older versions of Android OS */ } @media screen and (-webkit-device-pixel-ratio: 1.5) { /* CSS for high-density screens */ body { font-size: 1.05em; } } @media screen and (-webkit-device-pixel-ratio: 2.0) { /* CSS for extra high-density screens */ body { font-size: 1.1em; } } Next, we need to create class for customized view extending WebView. Let\u0026rsquo;s call it JustifiedTextView.\npackage com.github.sample.view; import android.content.Context; import android.content.res.TypedArray; import android.graphics.Color; import android.os.Build; import android.text.TextUtils; import android.util.AttributeSet; import android.util.TypedValue; import android.view.View; import android.webkit.WebView; import com.github.sample.R; public class JustifiedTextView extends WebView { private String text; public JustifiedTextView(final Context context) { this(context, null, 0); } public JustifiedTextView(final Context context, final AttributeSet attrs) { this(context, attrs, 0); } public JustifiedTextView(final Context context, final AttributeSet attrs, final int defStyle) { super(context, attrs, defStyle); if (attrs != null) { final TypedValue typedValue = new TypedValue(); final TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.JustifiedTextView, defStyle, 0); if (typedArray != null) { typedArray.getValue(R.styleable.JustifiedTextView_text, typedValue); if (typedValue.resourceId \u0026gt; 0 \u0026amp;\u0026amp; TextUtils.isEmpty(text)) { text = context.getString(typedValue.resourceId); text.replace(\u0026#34;\\n\u0026#34;, \u0026#34;\u0026lt;br /\u0026gt;\u0026#34;); loadDataWithBaseURL(\u0026#34;file:///android_asset/\u0026#34;, \u0026#34;\u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\u0026#34; + \u0026#34;\u0026lt;link rel=\\\u0026#34;stylesheet\\\u0026#34; type=\\\u0026#34;text/css\\\u0026#34; href=\\\u0026#34;justified_textview.css\\\u0026#34; /\u0026gt;\u0026#34; + \u0026#34;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u0026#34; + text + \u0026#34;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u0026#34;, \u0026#34;text/html\u0026#34;, \u0026#34;UTF8\u0026#34;, null); } setTransparentBackground(); } } } public void setTransparentBackground() { if (Build.VERSION.SDK_INT \u0026gt;= 11) { try { setLayerType(View.LAYER_TYPE_SOFTWARE, null); } catch (final NoSuchMethodError e) { Log.d(\u0026#34;could not set layer\u0026#34;); } setBackgroundColor(Color.TRANSPARENT); setBackgroundDrawable(null); setBackgroundResource(0); } } public String getText() { return text; } public void setText(String currentText) { this.text = currentText; text.replace(\u0026#34;\\n\u0026#34;, \u0026#34;\u0026lt;br /\u0026gt;\u0026#34;); loadDataWithBaseURL(\u0026#34;file:///android_asset/\u0026#34;, \u0026#34;\u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\u0026#34; + \u0026#34;\u0026lt;link rel=\\\u0026#34;stylesheet\\\u0026#34; type=\\\u0026#34;text/css\\\u0026#34; href=\\\u0026#34;justified_textview.css\\\u0026#34; /\u0026gt;\u0026#34; + \u0026#34;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u0026#34; + text + \u0026#34;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u0026#34;, \u0026#34;text/html\u0026#34;, \u0026#34;UTF8\u0026#34;, null); setTransparentBackground(); } } After that, we need to update res/values/attrs.xml file and put inside the following declaration:\n\u0026lt;declare-styleable name=\u0026#34;JustifiedTextView\u0026#34;\u0026gt; \u0026lt;attr name=\u0026#34;text\u0026#34; format=\u0026#34;reference\u0026#34; /\u0026gt; \u0026lt;/declare-styleable\u0026gt; Now, we are ready to use our custom JustifiedTextView. In order to do that, we need to create layout containing JustifiedTextView as follows:\n\u0026lt;com.github.sample.view.JustifiedTextView android:id=\u0026#34;@+id/tv_information\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; /\u0026gt; Next, we can access JustifiedTextView in our activity:\n// ...  private JustifiedTextView tvInformation; public void onCreate() { tvInformation = (JustifiedTextView) findViewById(R.id.tv_information); tVinformation.setText(\u0026#34;sample text\u0026#34;); } // ... We can also set text inside XML layout instead of doing this programmatically. It depends on our project. We also should turn off hardware acceleration for given activity in AndroidManifest.xml file in order to bring this solution to work.\n\u0026lt;activity android:name=\u0026#34;.activity.justifiedTextViewActivity\u0026#34; android:configChanges=\u0026#34;orientation|keyboardHidden\u0026#34; android:hardwareAccelerated=\u0026#34;false\u0026#34;/\u0026gt; That\u0026rsquo;s it. It\u0026rsquo;s not perfect solution and it\u0026rsquo;s kind of workaround, but I haven\u0026rsquo;t found any better idea how to deal with this problem. I tested a few solutions and this one is, in my opinion, the best available and most elegant option for now. Please note: There may be a problem with proper execution of this solution on Android OS version lower than 3.0 (API 11).\n","permalink":"https://wittchen.io/posts/justifying-block-of-text-inside-textview-in-android/","summary":"Justifying text inside TextView in Android is not that simple as we may expect it to be. Unfortunately, Android does not have attribute for TextView, which supports justifying text. We can set alignment to the right or to the left, but we cannot simply justify text with generic attributes. In order to do that, we need to perform a few tricks. First of all, we need to create file named justified_textview.","title":"Justifying block of text inside TextView in Android"},{"content":"We can use Volley library from Google for very clean, simple and easy loading of the images from Internet. Volley uses LRU cache, so first of all, we need to create BitmapLruCache class extending LruCache class.\npackage com.github.volley.example.toolbox; import com.android.volley.toolbox.ImageLoader.ImageCache; import android.graphics.Bitmap; import android.support.v4.util.LruCache; public class BitmapLruCache extends LruCache\u0026lt;String, Bitmap\u0026gt; implements ImageCache { public BitmapLruCache(int maxSize) { super(maxSize); } // Fix thanks to Steven\u0026#39;s comment: sizeOf method should not be overriden, // when we are passing max image cache entries in another place of the code // @Override // protected int sizeOf(String key, Bitmap value) { // return value.getRowBytes() * value.getHeight(); // }  @Override public Bitmap getBitmap(String url) { return get(url); } @Override public void putBitmap(String url, Bitmap bitmap) { put(url, bitmap); } } Next, we need to create VolleyHelper class.\npackage com.github.volley.example.toolbox; import android.content.Context; import com.android.volley.RequestQueue; import com.android.volley.toolbox.ImageLoader; import com.android.volley.toolbox.Volley; import com.github.volley.example.toolbox.BitmapLruCache; /** * Helper class that is used to provide references to initialized RequestQueue(s) and ImageLoader(s) */ public class VolleyHelper { private static final int MAX_IMAGE_CACHE_ENTIRES = 100; private static RequestQueue mRequestQueue; private static ImageLoader mImageLoader; private VolleyHelper() { } static void init(Context context) { mRequestQueue = Volley.newRequestQueue(context); mImageLoader = new ImageLoader(mRequestQueue, new BitmapLruCache(MAX_IMAGE_CACHE_ENTIRES)); } public static RequestQueue getRequestQueue() { if (mRequestQueue != null) { return mRequestQueue; } else { throw new IllegalStateException(\u0026#34;RequestQueue not initialized\u0026#34;); } } /** * Returns instance of ImageLoader initialized with {@see FakeImageCache} which effectively means * that no memory caching is used. This is useful for images that you know that will be show * only once. */ public static ImageLoader getImageLoader() { if (mImageLoader != null) { return mImageLoader; } else { throw new IllegalStateException(\u0026#34;ImageLoader not initialized\u0026#34;); } } } Then, somewhere in our activity, we can use the following code snippet:\nimageView = (ImageView) findViewById(R.id.iv_image); // ...  String imageUrl = \u0026#34;http://www.example.com/image.jpg\u0026#34;; VolleyHelper.init(this); // we can call this method in other place - e.g. in class extending Application class  // and refer to application context insted of activity context  ImageLoader imageLoader = VolleyHelper.getImageLoader(); imageLoader.get(imageUrl,ImageLoader.getImageListener(mImageView,R.drawable.no_image, R.drawable.error_image)); // ... As we can see, we can define image in case of error or no image. What is nice and important, Volley will take care of asynchronous downloading of the bitmaps, so we don\u0026rsquo;t have to create additional AsyncTasks. It will also create cache in temporary memory and on disk with using LRU cache. As we could easily notice, Volley is really good and small, but powerful library, which can make our life easier. It was also created and tested by Google, what assures its stability and quality.\n","permalink":"https://wittchen.io/posts/asynchronous-loading-and-caching-bitmaps-with-volley/","summary":"We can use Volley library from Google for very clean, simple and easy loading of the images from Internet. Volley uses LRU cache, so first of all, we need to create BitmapLruCache class extending LruCache class.\npackage com.github.volley.example.toolbox; import com.android.volley.toolbox.ImageLoader.ImageCache; import android.graphics.Bitmap; import android.support.v4.util.LruCache; public class BitmapLruCache extends LruCache\u0026lt;String, Bitmap\u0026gt; implements ImageCache { public BitmapLruCache(int maxSize) { super(maxSize); } // Fix thanks to Steven\u0026#39;s comment: sizeOf method should not be overriden, // when we are passing max image cache entries in another place of the code // @Override // protected int sizeOf(String key, Bitmap value) { // return value.","title":"Asynchronous loading and caching bitmaps with Volley"},{"content":"When we work with Activities in Android, defining different layouts for different screen orientations is easy. The only thing we need to do, is to create two *.xml files with the same name for layouts in two separate directories (res/layout/ and res/layout-land/). In Fragments it\u0026rsquo;s not that easy. In such case, we need to perform additional operations in order to achieve our goal. Fragment in Android is not re-inflated on configuration change, but we can recreate layout and repopulate view manually. We need to create two layouts for different orientations of the screen in the same way as for Activity:\n res/layout/my_fragment.xml res/layout-land/my_fragment.xml  Then, we need to put code shown below to our fragment. Of course, it requires little adjustments depending on concrete project.\npublic class MyFragment extends Fragment { @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle bundle) { View view = inflater.inflate(R.layout.my_fragment, container, false); // Find your buttons in view, set up onclicks, set up callbacks to your parent fragment or activity here.  // You can create ViewHolder or separate method for that.  // example of accessing views: TextView textViewExample = (TextView) view.findViewById(R.id.text_view_example);  // textViewExample.setText(\u0026#34;example\u0026#34;);  return view; } @Override public void onConfigurationChanged(Configuration newConfig) { super.onConfigurationChanged(newConfig); LayoutInflater inflater = LayoutInflater.from(getActivity()); populateViewForOrientation(inflater, (ViewGroup) getView()); } private void populateViewForOrientation(LayoutInflater inflater, ViewGroup viewGroup) { viewGroup.removeAllViewsInLayout(); View subview = inflater.inflate(R.layout.my_fragment, viewGroup); // Find your buttons in subview, set up onclicks, set up callbacks to your parent fragment or activity here.  // You can create ViewHolder or separate method for that.  // example of accessing views: TextView textViewExample = (TextView) view.findViewById(R.id.text_view_example);  // textViewExample.setText(\u0026#34;example\u0026#34;);  } } That\u0026rsquo;s it!\n","permalink":"https://wittchen.io/posts/how-to-change-fragment-layout-on-orientation-change/","summary":"When we work with Activities in Android, defining different layouts for different screen orientations is easy. The only thing we need to do, is to create two *.xml files with the same name for layouts in two separate directories (res/layout/ and res/layout-land/). In Fragments it\u0026rsquo;s not that easy. In such case, we need to perform additional operations in order to achieve our goal. Fragment in Android is not re-inflated on configuration change, but we can recreate layout and repopulate view manually.","title":"How to change Fragment layout on orientation change?"},{"content":"Some time ago I participated in first Google Glass Hackathon in Poland, where I had possibility to test Google Glass, try it and write applications, which can be run on this cutting-edge device. It was very interesting experience. In addition, I took 2nd place with my team, what made me happy after leaving Warsaw late night. In a few hours, we created simple native application for Android platform, which can be used as a city guide with augmented reality, geolocation and image recognition. We called it Hereandhounds. You can see its source code at: https://github.com/pwittchen/Hereandhounds. You can read detailed report from that event at technical blog of Future Processing: http://www.future-processing.pl/blog/relacja-z-pierwszego-w-polsce-glass-hackathonu/. Unfortunately, its available only in Polish language right now.\n","permalink":"https://wittchen.io/posts/first-google-glass-hackathon-in-poland/","summary":"Some time ago I participated in first Google Glass Hackathon in Poland, where I had possibility to test Google Glass, try it and write applications, which can be run on this cutting-edge device. It was very interesting experience. In addition, I took 2nd place with my team, what made me happy after leaving Warsaw late night. In a few hours, we created simple native application for Android platform, which can be used as a city guide with augmented reality, geolocation and image recognition.","title":"First Google Glass Hackathon in Poland"},{"content":"Currently, I work on my Final Project and Master Thesis at Silesian University of Technology in Gliwice, Poland (original University name in Polish: Politechnika Śląska). I\u0026rsquo;ve decided to choose unconventional topic, which will allow me to use the knowlegde I already have, extend it and learn something new. Topic of my thesis is: Brain Computer Interface for mobile devices. BCI is a topic, which is not completely discovered nowadays. EEG and BCI have their origins in 1924, but up to now, they don\u0026rsquo;t have so many real life applications. We can find only some experiments and simple games. Recently, companies, engineers and scientists started to focus on brain waves, so this topic is worth investigation and it may be the future of modern computing. In my project, I am going to use BCI for controlling mobile devices with Android OS. In my opinion, connecting brain to the smartphone can have really interesting outcome. Below, you can browse my presentation, which I have shown on my Final Project Seminar today.\nSee presentation slides at: http://slid.es/piotrwittchen/brain-computer-interface-for-mobile-devices\n","permalink":"https://wittchen.io/posts/bci-for-mobile-devices-intro/","summary":"Currently, I work on my Final Project and Master Thesis at Silesian University of Technology in Gliwice, Poland (original University name in Polish: Politechnika Śląska). I\u0026rsquo;ve decided to choose unconventional topic, which will allow me to use the knowlegde I already have, extend it and learn something new. Topic of my thesis is: Brain Computer Interface for mobile devices. BCI is a topic, which is not completely discovered nowadays. EEG and BCI have their origins in 1924, but up to now, they don\u0026rsquo;t have so many real life applications.","title":"Brain Computer Interface for mobile devices - introduction"},{"content":"Introduction Daily usage of tools mentioned in this post is quite obvious for me right now, but using them wasn\u0026rsquo;t obvious while I was working alone or when I was involved only in freelance or private projects. Whilst we don\u0026rsquo;t work in a group, we don\u0026rsquo;t have to care about lot of things, but when we work in a team (even small), we have to organize and optimize our work very well in order to obtain its high quality, work efficiently and make life of future developers of our code and co-workers easier.\n1. Good IDE or editor Having good Integrated Development Environment or editor is very important during software development. When we master keyboard shortcuts and useful features of our environment, we can increase speed of work and debugging. Choosing environment depend on the projects and programming languages which we are using on daily basis. Eclipse is a good choice, when we develop code in Java language, but we can use it for creating C/C++ code, PHP and web development. Good alternative for Eclipse is IntelliJ IDEA (only Community Edition for Java developers is free right now). Android developers should strongly consider using Android Studio, which is based on IntelliJ IDEA. JetBrains provided IDE for Python developers as well. It\u0026rsquo;s called PyCharm and its Community Edition is free. Obvious choice for developers using Microsoft technologies will be MS Visual Studio. Despite IDEs, we can also consider using advanced editors like Sublime Text. After proper configuration, it can be very nice tool for web development and JavaScript development (including node.js). Some Ruby developers use Sublime Text as well. In general, it is worth considering while we write our programs in scripting languages. In addition, it is available on MS Windows, Linux and Mac OS. Sublime Text is just an editor, so it does not have code debugger like Eclipse or MS Visual Studio, but we can add this functionality for JavaScript language by installing Sublime Web Inspector plugin. Some people also use Notepad++. I like this editor, but I wouldn\u0026rsquo;t use it for software development due to lack of important features. In my opinion it\u0026rsquo;s good for editing single files or performing some simple operations on text or code. Of course, Linux geeks should not forget about exclusive Vim editor, but use of this software must be learned before using.\n2. Source control system When we work in a team, we need to have source control system. Uploading code to server by different people or sending code via e-mails is not efficient and unprofessional. That\u0026rsquo;s why we should use Git, which is distributed version control system. While using such tool, we can be always up to date with our code and we can easily track changes in the project, create branches for several tasks and so on. We can also rollback changes, when something will go wrong. Git clients are available for all popular operating systems. When we are not familiar with command line interface, we can use tools like TortoiseGit. On daily basis, the most important commands are: clone, pull, commit and push. Good practice is to create branch for development version of the application and treat master branch as a release version of the application. In addition, we can create separate branch for each issue we are working on and when we finish our task, we can merge our branch with development branch. It\u0026rsquo;s very helpful and allows us to increase stability of the project. If we want to know all advanced features of Git and master this environment, we should read \u0026ldquo;Pro Git\u0026rdquo; book which is available on-line for free. Another, older source control system is SVN. Well known GUI client for SVN on MS Windows is TortoiseSVN. SVN is not distributed version control system like Git and does not have such amount of features, but it\u0026rsquo;s worth to know it, because it is used in some projects today for some reasons. Yet another source control system, which is less famous than SVN and Git, is Mercurial. Like mentioned systems, despite command line interface, it also has client with GUI called TortoiseHG available for Windows OS.\n3. Continuous integration tool  Continuous Integration is a software development practice where members of a team integrate their work frequently, usually each person integrates at least daily - leading to multiple integrations per day. Each integration is verified by an automated build (including test) to detect integration errors as quickly as possible. Many teams find that this approach leads to significantly reduced integration problems and allows a team to develop cohesive software more rapidly.\n Quote of Martin Fowler. Continuous Integration is also explained in details on Wikipedia. One of the common tools used for Continuous Integration is Jenkins. In simple words, developers commit changes to the project and afterwards Jenkins download source code from the repository and generates a fresh build of the project (compiled application). Builds can be scheduled and run automatically, but we can also run our builds manually. When something will go wrong, we receive an information that build is broken, unstable or cannot be compiled. In such case, developer who broke the build (pushed changes, which caused such situation) is responsible for repairing the build. We have to take care about the configuration files, because sometimes Jenkins may analyze our source code differently than our local compiler (because of specific settings or different operating system) and it may cause build failure. While using Continuous Integration, we don\u0026rsquo;t have to send compiled projects via e-mail or in other inconvenient way. We can just run the build. After that operation, Quality Assurance Engineers and Project Leader will always have access to the newest version of our project. When we don\u0026rsquo;t want to use Jenkins, we can consider adapting alternative Continuous Integration service called Travis, which is integrated with GitHub. Yet another continous integration and build server is Bamboo from Atlassian.\n4. Code review tool Code review as a systematic examination of the source code plays important role in the quality of the project. Different programmers have different background and point of view. We all make mistakes and it\u0026rsquo;s easier to fix them when we have good support. There are tools which can help us to make Code Review. One of them is Review Board written in Python, which can be associated with Jenkins. After running Review Board build, we can send e-mails including current revision changes to our team in order to keep everyone up to date. There are also other tools, which we can use. Phabricator can be an interesting tool, but I don\u0026rsquo;t have any experience with it yet. Nevertheless I know, that it is written in PHP and was developed at Facebook. Gitlab is also worth considering during conducting code reviews. Moreover, we can omit using additional tools and perform code reviews by browsing code and talking with another developer verbally, which is also good practice. To summarize this section, Code Review lets us to know what is going on in all projects of our team and, what is more important, helps us to increase quality, maintainability and robustness of our code and projects, which are used by the final users.\n5. Issue tracking system Good Issue Tracking System is also important tool used during the development of the project. It lets you track tasks, bugs and changes in the projects. We can create simple workflow in our project, which will increase quality of the software and also keep you informed about progress of the project. This is important in situations when several people work on the same application, so we can divide and choose tasks wisely in such a way, that people won\u0026rsquo;t disturb or \u0026ldquo;interfere\u0026rdquo; themselves during the work. In addition, project leader will be informed about the progress of the work. There are many issue tracking systems, but one of the best and well known is Jira. In addition, Jira allows you to work with projects in Agile methodology, so you can define backlogs, sprints and create good workflow in the project. Despite of these features it has so called Confluence, which is basically internal project Wiki, where you can create your knowledge base and notes.\nSummary All these five elements can help you to make great applications and projects. It may seem, that using them is a lot of additional work, but in fact, they are really useful and can help you to work faster, better, increase quality of the project, integrate code, identify and track the bugs, track tasks, issues and keep the project up to date for everyone who is involved in it. When we take care of good project organization, the only possibility is awesome outcome.\n","permalink":"https://wittchen.io/posts/5-essential-tools-for-serious-software-development-in-a-team-projects/","summary":"Introduction Daily usage of tools mentioned in this post is quite obvious for me right now, but using them wasn\u0026rsquo;t obvious while I was working alone or when I was involved only in freelance or private projects. Whilst we don\u0026rsquo;t work in a group, we don\u0026rsquo;t have to care about lot of things, but when we work in a team (even small), we have to organize and optimize our work very well in order to obtain its high quality, work efficiently and make life of future developers of our code and co-workers easier.","title":"5 essential tools for serious software development in a team projects"},{"content":"Sometimes, we have to work with legacy code and we have to change application\u0026rsquo;s behavior without modifying layouts, structure of the application and core components. Such situations can force us to do some tricks during development or maintenance process. For example, at the beginning, our app had to download data from the web service or RSS channel. This data consisted of the text, so we could use TextView in order to display such information. After some time, back-end developers decided to put there some HTML code including references to images. We want to display images in our mobile application without modifying existing structure, so we can create data of type Drawable inside the TextView. We can do it by creating an additional method getImageHTML() and using fromHtml method from Html class, which is default Android class. Below, you can see an example presenting approach described in this post.\npublic class FromHtmlImageActivity extends Activity { private TextView sampleTextView; private Spanned spannedValue; private String stringWithHtml; @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.main); stringWithHtml = \u0026#34;Sample string with an \u0026lt;a href=\\\u0026#34;http://www.exemplary-link.com\\\u0026#34;\u0026gt;exemplary link\u0026lt;/a\u0026gt;.\u0026#34;; spannedValue = Html.fromHtml(stringWithHtml,getImageHTML(),null); sampleTextView = (TextView)findViewById(R.id.sample_textview); sampleTextView.setText(spannedValue); } public ImageGetter getImageHTML() { ImageGetter imageGetter = new ImageGetter() { public Drawable getDrawable(String source) { try { Drawable drawable = Drawable.createFromStream(new URL(source).openStream(), \u0026#34;src name\u0026#34;); drawable.setBounds(0, 0, drawable.getIntrinsicWidth(),drawable.getIntrinsicHeight()); return drawable; } catch(IOException exception) { Log.v(\u0026#34;IOException\u0026#34;,exception.getMessage()); return null; } } }; return imageGetter; } } ","permalink":"https://wittchen.io/posts/displaying-image-from-the-internet-resource-inside-the-textview-in-android/","summary":"Sometimes, we have to work with legacy code and we have to change application\u0026rsquo;s behavior without modifying layouts, structure of the application and core components. Such situations can force us to do some tricks during development or maintenance process. For example, at the beginning, our app had to download data from the web service or RSS channel. This data consisted of the text, so we could use TextView in order to display such information.","title":"Displaying image from the Internet inside the TextView"},{"content":"Identifying the problem One of the common mistakes done by Android programmers is using improper data type in TextView. Let\u0026rsquo;s have a look on a simple code snippet:\nint area; TextView sampleTextView = (TextView) findViewById(R.id.myTextViewInXml); sampleTextView.setText(area + \u0026#34; km\u0026#34;); Here, we simply set a value of the text in an exemplary TextView and append string value \u0026quot; km\u0026quot; at the end. It can be used with SeekBar. For example, when we change value of the SeekBar, we can also update value of the text inside the TextView. Let\u0026rsquo;s have a look on another example:\nint area; TextView sampleTextView = (TextView) findViewById(R.id.myTextViewInXml); sampleTextView.setText(area); Here, we don\u0026rsquo;t append string value \u0026quot; km\u0026quot; at the end. In such case, our application will crash. We have to remember, that Java is strongly typed language and we have to take care about data types. In previous example, we had a cast to the String type, because we appended String value at the end. In the second example, we have only int value, but argument for setText method must be in type of String. Method named setText accepts integer values as well and in such case, it will try to find resource with a specified integer identifier generated with R.java file. Resource won\u0026rsquo;t be found and application will crash. We can quickly fix this bug by casting argument of the method to the String type.\nSolving the problem There are at least two ways of solving this problem:\nSolution no. 1\nint area; TextView sampleTextView = (TextView) findViewById(R.id.myTextViewInXml); sampleTextView.setText(Integer.toString(area)); Solution no. 2\nint area; TextView sampleTextView = (TextView) findViewById(R.id.myTextViewInXml); sampleTextView.setText(area + \u0026#34;\u0026#34;); ","permalink":"https://wittchen.io/posts/improper-data-type-in-android-textview/","summary":"Identifying the problem One of the common mistakes done by Android programmers is using improper data type in TextView. Let\u0026rsquo;s have a look on a simple code snippet:\nint area; TextView sampleTextView = (TextView) findViewById(R.id.myTextViewInXml); sampleTextView.setText(area + \u0026#34; km\u0026#34;); Here, we simply set a value of the text in an exemplary TextView and append string value \u0026quot; km\u0026quot; at the end. It can be used with SeekBar. For example, when we change value of the SeekBar, we can also update value of the text inside the TextView.","title":"Improper data type in Android TextView"},{"content":"Project overview Some time ago, I created presentation for my university connected with Distributed Inter-Process Communication. It is a piece of software dedicated for Linux OS, created by Kamran Karimi, which allows to distribute software operations inside computer cluster. In addition, we can test it on a single machine during development process and run on a several machines in the production phase. I tested this solution on Ubuntu Linux. Short description of this system is presented below.\n DIPC (Distributd Inter-Process Communication) is a software-only solution for distributed data exchange on a network on Linux computers. It operates at the kernel level, and allows the programmer to use System V semaphores, message queues, and shared memory segments over the network with minimal change at the source code level.\n Presentation View presentation\nReferences  Description on English Wikipedia DIPC\u0026rsquo;s page on SourceForge DIPC\u0026rsquo;s home page Kamran Karimi\u0026rsquo;s home page  ","permalink":"https://wittchen.io/posts/distributed-inter-process-communication/","summary":"Project overview Some time ago, I created presentation for my university connected with Distributed Inter-Process Communication. It is a piece of software dedicated for Linux OS, created by Kamran Karimi, which allows to distribute software operations inside computer cluster. In addition, we can test it on a single machine during development process and run on a several machines in the production phase. I tested this solution on Ubuntu Linux. Short description of this system is presented below.","title":"Distributed inter-process communication"},{"content":"Some time ago, I had to implement Endless ListView in Android application. I checked different solutions, but some of them were overprogrammed or did not work well. Fortunately, I found simple solution, which solves the problem. Code snippet presenting mentioned approach, is placed below.\npublic class EndlessScrollListener implements OnScrollListener { private int visibleThreshold = 20; private int currentPage = 0; @Override public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) { } @Override public void onScrollStateChanged(AbsListView view, int scrollState) { if (scrollState == SCROLL_STATE_IDLE) { if (listView.getLastVisiblePosition() \u0026gt;= listView.getCount() - visibleThreshold) { currentPage++; downloadRecordsTask.setPage(currentPage); downloadRecordsTask.execute(); } } } } In this solution, I simply implement OnScrollListener interface inside the activity, which is responsible for displaying the ListView (class presented above can be nested class in the proper activity class). In this case listView attribute represents ListView and downloadRecordsTask in an examplary AsyncTask. Of course, AsyncTask class should also have setPage method used for pagination. Records are loaded asynchronously to the listView, when user is not scrolling the list (SCROLL_STATE_IDLE). In my opinion, this solution is the simplest, the easiest to implement and works as we expect it to work. I have tested it in my project for over 1000 records and I have not encountered any problems during the testing process.\n","permalink":"https://wittchen.io/posts/endless-listview-in-android/","summary":"Some time ago, I had to implement Endless ListView in Android application. I checked different solutions, but some of them were overprogrammed or did not work well. Fortunately, I found simple solution, which solves the problem. Code snippet presenting mentioned approach, is placed below.\npublic class EndlessScrollListener implements OnScrollListener { private int visibleThreshold = 20; private int currentPage = 0; @Override public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) { } @Override public void onScrollStateChanged(AbsListView view, int scrollState) { if (scrollState == SCROLL_STATE_IDLE) { if (listView.","title":"Endless ListView in Android"},{"content":"When you want to set custom background for Android ActionBar or SherlockActionBar instead of playing with your styles or views, you can use the following simple code snippet.\n@InjectResource(R.drawable.actionbar_custom_background) private Drawable actionBarCustomBackground; public void onCreate() { getSupportActionBar().setBackgroundDrawable(actionBarCustomBackground); } In this case, Drawable object is injected using RoboGuice library and set as a background for the ActionBar. In particular cases, you can use also getActionBar() method. In Drawable object you can store an image of 1 px width and it will be stretched for 100% of width of the ActionBar. I have tested the code snippet presented above for SherlockActionBar and it worked fine.\n","permalink":"https://wittchen.io/posts/custom-background-for-actionbar-and-sherlockactionbar/","summary":"When you want to set custom background for Android ActionBar or SherlockActionBar instead of playing with your styles or views, you can use the following simple code snippet.\n@InjectResource(R.drawable.actionbar_custom_background) private Drawable actionBarCustomBackground; public void onCreate() { getSupportActionBar().setBackgroundDrawable(actionBarCustomBackground); } In this case, Drawable object is injected using RoboGuice library and set as a background for the ActionBar. In particular cases, you can use also getActionBar() method. In Drawable object you can store an image of 1 px width and it will be stretched for 100% of width of the ActionBar.","title":"Custom background for ActionBar and SherlockActionBar"},{"content":"Using custom fonts in Android is quite simple, but requires to do some things programmatically and cannot be done using only XML file defining the view. Let\u0026rsquo;s have a look on an example. Here we have a simple Android view file:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;LinearLayout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; android:orientation=\u0026#34;vertical\u0026#34; android:layout_width=\u0026#34;fill_parent\u0026#34; android:layout_height=\u0026#34;fill_parent\u0026#34; \u0026gt; \u0026lt;TextView android:id=\u0026#34;@+id/custom_font\u0026#34; android:layout_width=\u0026#34;fill_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;This is our custom font\u0026#34; /\u0026gt; \u0026lt;/LinearLayout\u0026gt; We want to use custom font for the TextView element with id: custom_font. Firstly, we have to put our font (in this example: Custom_Font.ttf) into the ./assets directory (create it if it doesn’t exist yet) in the main directory of the project. Then, we can use the following code:\nTextView txt = (TextView) findViewById(R.id.custom_font); Typeface font = Typeface.createFromAsset(getAssets(), \u0026#34;Custom_Font.ttf\u0026#34;); txt.setTypeface(font); Please note, that Android does not fully support fonts in *.otf format, so it\u0026rsquo;s safer to use *.ttf format instead. If we have font only in *.otf format, we can use one of the free font converters in order to obtain desired and proper file extension. When we use the same font in whole application or a lot of elements in our project should use it, we can create custom TextView. The only thing, we have to do, is to create an additional class extending default TextView class.\npublic class MyEditText extends EditText{ public MyEditView(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); init(); } public MyEditView(Context context, AttributeSet attrs) { super(context, attrs); init(); } public MyEditView(Context context) { super(context); init(); } private void init() { if (!isInEditMode()) { Typeface tf = Typeface.createFromAsset(getContext().getAssets(), \u0026#34;font.ttf\u0026#34;); setTypeface(tf); } } } Note: isInEditMode() method is used for graphical preview of the UI in Eclipse IDE. Afterwards, inside the view in the XML file, we should replace default TextView with our custom TextView like in the example below.\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;LinearLayout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; android:orientation=\u0026#34;vertical\u0026#34; android:layout_width=\u0026#34;fill_parent\u0026#34; android:layout_height=\u0026#34;fill_parent\u0026#34; \u0026gt; \u0026lt;com.myapp.widget.MyEditText android:id=\u0026#34;@+id/custom_font\u0026#34; android:layout_width=\u0026#34;fill_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;This is our custom font\u0026#34; /\u0026gt; \u0026lt;/LinearLayout\u0026gt; You can create other custom widgets respectively. E.g. MyButton, MyCheckBox, etc. It can be useful, when you want to unify fonts in your application taking into consideration older versions of the Android. Please note, that Roboto font was introduced in Android Ice Cream Sandwich, but luckily is free and available for download from official Google website. Further reading \u0026amp; references:\n http://mobile.tutsplus.com/tutorials/android/customize-android-fonts/ http://stackoverflow.com/questions/7123833/customize-android-fonts http://stackoverflow.com/questions/10766943/change-font-for-edittext-in-android  Update: There is a library, which simplifies described process. Check it out here: https://github.com/ikocijan/MagicViews.\n","permalink":"https://wittchen.io/posts/custom-fonts-in-android/","summary":"Using custom fonts in Android is quite simple, but requires to do some things programmatically and cannot be done using only XML file defining the view. Let\u0026rsquo;s have a look on an example. Here we have a simple Android view file:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;LinearLayout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; android:orientation=\u0026#34;vertical\u0026#34; android:layout_width=\u0026#34;fill_parent\u0026#34; android:layout_height=\u0026#34;fill_parent\u0026#34; \u0026gt; \u0026lt;TextView android:id=\u0026#34;@+id/custom_font\u0026#34; android:layout_width=\u0026#34;fill_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;This is our custom font\u0026#34; /\u0026gt; \u0026lt;/LinearLayout\u0026gt; We want to use custom font for the TextView element with id: custom_font.","title":"Custom fonts in Android"},{"content":"Below, you can see simple and useful code snippet presenting conversion from binary to decimal number in C language without any sophisticated operations using only strtol function.\n#include \u0026lt;stdio.h\u0026gt;#include \u0026lt;stdlib.h\u0026gt; int main(void) { const char binary[] = \u0026#34;11001\u0026#34;; int decimal = strtol(binary, NULL, 2); printf(\u0026#34;binary = \\\u0026#34;%s\\\u0026#34;, decimal = %d = 0x%02X\\n\u0026#34;, binary, decimal, decimal); return 0; } /* my output binary = \u0026#34;11001\u0026#34;, decimal = 25 = 0x19 */ ","permalink":"https://wittchen.io/posts/easy-conversion-from-binary-to-decimal-numbers-in-c/","summary":"Below, you can see simple and useful code snippet presenting conversion from binary to decimal number in C language without any sophisticated operations using only strtol function.\n#include \u0026lt;stdio.h\u0026gt;#include \u0026lt;stdlib.h\u0026gt; int main(void) { const char binary[] = \u0026#34;11001\u0026#34;; int decimal = strtol(binary, NULL, 2); printf(\u0026#34;binary = \\\u0026#34;%s\\\u0026#34;, decimal = %d = 0x%02X\\n\u0026#34;, binary, decimal, decimal); return 0; } /* my output binary = \u0026#34;11001\u0026#34;, decimal = 25 = 0x19 */ ","title":"Easy conversion from binary to decimal numbers in C"},{"content":"Overview Etymology Maven, a Yiddish word meaning accumulator of knowledge.\nWhat is Maven? Maven is a tool that can be used for building and managing any Java-based project with all its dependencies (libraries).\nMaven\u0026rsquo;s objectives  Making build process easy Providing uniform build system (Project Object Model) Providing quality project information Providing guidelines for best practices development Allowing transparent migration to new features  Setting up Maven Android projects on MS Windows Configuring environment   You need Eclipse Indigo or Juno installed\n  Run Eclipse\n  Install Android Connector for Maven via the Eclipse Marketplace. Select Help -\u0026gt; Eclipse Marketplace… and search for android m2e.\n  Click the Install button next to the Android Connector for Maven that appears and follow the path through the wizard dialog to install the plug-in and its dependencies (including the Android Development Toolkit and the Maven for Eclipse m2e plug-in). Accept the terms-and-conditions and click Finish.\n  Create ANDROID_HOME environmental variable and assign location of the Android SDK into it.\n Click Start button Right click on the Computer and choose Properties Choose Advanced system settings Click Environment Variables… Click New below System variables window. Variable name should be: ANDROID_HOME. Variable value should be location of the directory containing Android SDK.    Click OK and save your data.\n  Go to the following website: http://maven.apache.org/\n  Go to the download section (http://maven.apache.org/download.html) and download Maven (version 3.0.4 is preferred – Binary zip)\n  Extract zip archive and copy apache-maven-3.0.4 directory into C: drive.\n  Location of the extracted directory should be as follows: _C:\\apache-maven-3.0.4_\n  Add C:\\apache-maven-3.0.4\\bin directory to the environmental variable called Path 1. Click Start button 2. Right click on the Computer and choose Properties 3. Choose Advanced system settings 4. Click Environment Variables… 5. Find Path variable and and click Edit 6. After semicolon (;) add path to the directory containing batch script inside the maven directory which should be as follows: C:\\apache-maven-3.0.4\\bin 7. Click OK and save your data.\n  Add platform-tools directory from Android SDK directory to the Path environmental variable respectively.\n  Click Start button and then choose Run option (click Windows button + R key on your keyboard) and type: cmd.\n  Type: mvn –v\n  The returned output should be as follows: * Apache Maven 3.0.4 (r1232337; 2012-01-17 09:44:56+0100) Maven home: C:\\apache-maven-3.0.4\\bin\\.. Java version: 1.6.0_33, vendor: Sun Microsystems Inc. Java home: C:\\Program Files (x86)\\Java\\jdk1.6.0_33\\jre Default locale: en_US, platform encoding: Cp1252 OS name: \u0026ldquo;windows 7\u0026rdquo;, version: \u0026ldquo;6.1\u0026rdquo;, arch: \u0026ldquo;x86\u0026rdquo;, family: \u0026ldquo;windows\u0026rdquo;\n  Now Maven should be properly configured and prepared for deployment of the Android applications.\n  Importing, building and running sample Maven Android project  Download samples from the stable branch on the website: http://code.google.com/p/maven-android-plugin/wiki/Samples Extract downloaded archive. Open Eclipse IDE. Import helloflashlight project (as an Android project). Right click on the project. Choose an option Configure -\u0026gt; Convert to Maven Project. Dependencies and project configuration are defined in pom.xml file. Click Start button and then choose Run option (click Windows button + R key on your keyboard) and type: cmd. Go to the directory, where the current project (helloflashlight) is located. Type in the command line: mvn clean install Command from previous point will create .apk file in the target folder. Type in the command line: mvn android:deploy Command from previous point will install the application via Maven on your Android device or Android emulator (virtual device). If more than one device is available, you can specify the relevant device in your pom.xml file. Maven can also start and stop an Android virtual device automatically for you. You can start the application via Maven by typing the following command: mvn android:run  Summary - Pros \u0026amp; Cons Pros  Uniform build system. No need to search for external libraries. Good quality project information. Transparent migration to new features. Single project configuration for libraries in team work.  Cons  Libraries in the repository are not always up to date. Project configuration takes more time. Mistakes in pom.xml file are not detected by IDE, but can cause fail of the build. Necessity of using CLI (Command Line Interface) in some cases.  Additional resources \u0026amp; references  Maven reference book Maven reference book – Android Development Section Maven Android Plugin Vogella’s article about Maven \u0026amp; Android Eclipse plugin for Maven Android projects Maven repository  ","permalink":"https://wittchen.io/posts/android-and-maven/","summary":"Overview Etymology Maven, a Yiddish word meaning accumulator of knowledge.\nWhat is Maven? Maven is a tool that can be used for building and managing any Java-based project with all its dependencies (libraries).\nMaven\u0026rsquo;s objectives  Making build process easy Providing uniform build system (Project Object Model) Providing quality project information Providing guidelines for best practices development Allowing transparent migration to new features  Setting up Maven Android projects on MS Windows Configuring environment   You need Eclipse Indigo or Juno installed","title":"Android and Maven"},{"content":"In Android 3.0 – HoneyComb (API 11) or higher occurs specific bug connected with map overlay. When we draw overlay on the map (e.g. routes, directions or polylines) after zooming to particular level, overlay disappear unexpectedly. We can fix this bug very easily by disabling hardware acceleration for drawing overlays. Below, you can see exemplary code snippet with map injected by RoboGuice and disabled hardware acceleration. Changing way of drawing overlays should fix the bug.\npublic class ExamplaryMapActivity extends RoboMapActivity { @InjectView(R.id.mapview) private MapView mapView; @Override protected void onCreate(Bundle bundle) { enableHWAccel(mapView, false); } @TargetApi(11) private static void enableHWAccel(MapView mapView, boolean enable) { if (Build.VERSION.SDK_INT \u0026gt;= Build.VERSION_CODES.HONEYCOMB) { int type = enable ? View.LAYER_TYPE_HARDWARE : View.LAYER_TYPE_SOFTWARE; mapView.setLayerType(View.LAYER_TYPE_SOFTWARE, null); } } } ","permalink":"https://wittchen.io/posts/fixing-bug-with-dissappearing-map-overlay-after-zoom-in-android/","summary":"In Android 3.0 – HoneyComb (API 11) or higher occurs specific bug connected with map overlay. When we draw overlay on the map (e.g. routes, directions or polylines) after zooming to particular level, overlay disappear unexpectedly. We can fix this bug very easily by disabling hardware acceleration for drawing overlays. Below, you can see exemplary code snippet with map injected by RoboGuice and disabled hardware acceleration. Changing way of drawing overlays should fix the bug.","title":"Fixing bug with dissappearing map overlay after zoom in Android"},{"content":"In this post I will show you my approach to adding reversed numbers. This problem occurred during the ACM Central European Programming Contest, in Prague in 1998.\nGeneral description of the problem Input The input consists of N cases (equal to about 10000). The first line of the input contains only positive integer N. Then follow the cases. Each case consists of exactly one line with two positive integers separated by space. These are the reversed numbers you are to add.\nOutput For each case, print exactly one line containing only one integer - the reversed sum of two reversed numbers. Omit any leading zeros in the output.\nExample Sample input:\n3 24 1 4358 754 305 794 Sample output:\n34 1998 1 Solution Exemplary approach  In the first line of the input, we put number of the lines to process. In the next lines, we put numbers split by space, in which we should reverse order of the digits and then add them. In the final step, we should reverse order of the digits in the generated data and write result to the output.  Proposal of the solution in the Ruby language def addrev(n) b = 0 n.split(\u0026#39; \u0026#39;).each do |a| b+= a.to_s.reverse.to_i end return b.to_s.reverse.to_i end a = true i = j = 0 out = [] $stdin.each_line do |line| if(!a) then if(j != i) out.push(addrev(line.to_s)) j += 1 else break end else i = line.to_i a = false end end out.each do |b| $stdout \u0026lt;\u0026lt; b \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34; end ","permalink":"https://wittchen.io/posts/adding-reversed-numbers/","summary":"In this post I will show you my approach to adding reversed numbers. This problem occurred during the ACM Central European Programming Contest, in Prague in 1998.\nGeneral description of the problem Input The input consists of N cases (equal to about 10000). The first line of the input contains only positive integer N. Then follow the cases. Each case consists of exactly one line with two positive integers separated by space.","title":"Adding reversed numbers"},{"content":"Hello! I\u0026rsquo;ve decided to create my own blog once again. This time I\u0026rsquo;m gonna write most of the posts only in English in order to make the articles more available and also to train my language skills (I\u0026rsquo;m Polish native speaker as some of you may already noticed). Template is clean and simple, because I\u0026rsquo;m going to focus on content - not the form. Stay tuned!\n","permalink":"https://wittchen.io/posts/launching-brand-new-blog/","summary":"Hello! I\u0026rsquo;ve decided to create my own blog once again. This time I\u0026rsquo;m gonna write most of the posts only in English in order to make the articles more available and also to train my language skills (I\u0026rsquo;m Polish native speaker as some of you may already noticed). Template is clean and simple, because I\u0026rsquo;m going to focus on content - not the form. Stay tuned!","title":"Launching brand new blog"}]