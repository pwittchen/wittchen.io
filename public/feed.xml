<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Piotr Wittchen</title>
  <icon>https://www.gravatar.com/avatar/45a760d9746e8c5b8de8e6db26a482c3</icon>
  <subtitle>personal website and blog</subtitle>
  <link href="//feed.xml" rel="self"/>
  
  <link href="http://wittchen.io/"/>
  <updated>2020-02-18T11:31:25.577Z</updated>
  <id>http://wittchen.io/</id>
  
  <author>
    <name>Piotr Wittchen</name>
    <email>mailto:piotr@wittchen.io</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>I switched to i3 WM</title>
    <link href="http://wittchen.io/i-switched-to-i3wm/"/>
    <id>http://wittchen.io/i-switched-to-i3wm/</id>
    <published>2020-02-16T12:16:49.000Z</published>
    <updated>2020-02-18T11:31:25.577Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>From a long time I wanted to try lightweight WM (Window Manager) for Linux. I installed i3 once a few years ago, but I had no idea how to use it, so I just closed this thing and got back to Gnome. Recently, I watched several videos and tutorials about Linux and i3 on youtube, which helped me to learn this WM, how it works and how to use it. I also read some part of <a href="https://i3wm.org/docs/" target="_blank" rel="noopener">docs</a> and <a href="https://i3wm.org/docs/userguide.html" target="_blank" rel="noopener">user’s guide</a> to customize my configuration. Official docs of i3 are really good.</p><h2 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h2><p>The original concept of i3 and tiling windows managers in general is the fact, that windows are not layered one on top of another like in all typical GUIs for popular operating systems we know today. It makes sense, because when one window is behind another, you cannot see its content anyway. It’s possible to do that in i3 by detaching a windows and moving them around, but it’s not usual case and default behavior. Today we can see that operating systems like Windows or macOS are trying to mimic behavior of tiling window managers with window splitting, etc. This functionality is available in Unity for Ubuntu and can be achieved with additional plugins for Gnome environment. We also have applications like iTerm for macOS or Tilix for Linux, which mimics the same thing, but just for terminals. In i3, we have this functioality out of the box for <strong>all</strong> programs we use in the system. Not just terminals. We can also use the same key bindings and shortcuts across whole system, which is very convenient, because you don’t have to memorize shortcuts and keybindings for each program separately.</p><h2 id="System-configuration-as-a-code"><a href="#System-configuration-as-a-code" class="headerlink" title="System configuration as a code"></a>System configuration as a code</h2><p>What is very convenient in i3 is the fact, that you can keep and maintain your configuration as a code in the single file located in <code>~/.config/i3/config</code>. This file can contain your wallpaper definition, key bindings, configuration for moving and resizing windows, look and feel of the status bar (its colors, location, height, font, etc.) and windows (e.g. I removed title bars, because I don’t need them now)</p><p>Below, you can see my current i3 config. I keep it up to date in my <a href="https://github.com/pwittchen/dotfiles/blob/master/.config/i3/config" target="_blank" rel="noopener">dotfiles repo</a>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This file has been auto-generated by i3-config-wizard(1).</span></span><br><span class="line"><span class="comment"># It will not be overwritten, so edit it as you like.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Should you change your keyboard layout some time, delete</span></span><br><span class="line"><span class="comment"># this file and re-run i3-config-wizard(1).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># i3 config file (v4)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Please see https://i3wm.org/docs/userguide.html for a complete reference!</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$mod</span> Mod4</span><br><span class="line"></span><br><span class="line"><span class="comment"># Font for window titles. Will also be used by the bar unless a different font</span></span><br><span class="line"><span class="comment"># is used in the bar &#123;&#125; block below.</span></span><br><span class="line">font pango:monospace 8</span><br><span class="line"></span><br><span class="line"><span class="comment"># setting bg color</span></span><br><span class="line"><span class="built_in">exec</span> --no-startup-id xsetroot -solid <span class="string">"#17212b"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># setting wallpaper</span></span><br><span class="line"><span class="built_in">exec</span> --no-startup-id feh --<span class="built_in">bg</span>-scale ~/Pictures/config/wallpaper/wallpaper.jpg</span><br><span class="line"></span><br><span class="line"><span class="comment"># This font is widely installed, provides lots of unicode glyphs, right-to-left</span></span><br><span class="line"><span class="comment"># text rendering and scalability on retina/hidpi displays (thanks to pango).</span></span><br><span class="line"><span class="comment">#font pango:DejaVu Sans Mono 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The combination of xss-lock, nm-applet and pactl is a popular choice, so</span></span><br><span class="line"><span class="comment"># they are included here as an example. Modify as you see fit.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># xss-lock grabs a logind suspend inhibit lock and will use i3lock to lock the</span></span><br><span class="line"><span class="comment"># screen before suspend. Use loginctl lock-session to lock your screen.</span></span><br><span class="line"><span class="built_in">exec</span> --no-startup-id xss-lock --transfer-sleep-lock -- i3lock --nofork</span><br><span class="line"></span><br><span class="line"><span class="comment"># NetworkManager is the most popular way to manage wireless networks on Linux,</span></span><br><span class="line"><span class="comment"># and nm-applet is a desktop environment-independent system tray GUI for it.</span></span><br><span class="line"><span class="built_in">exec</span> --no-startup-id nm-applet</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use pactl to adjust volume in PulseAudio.</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$refresh_i3status</span> killall -SIGUSR1 i3status</span><br><span class="line">bindsym XF86AudioRaiseVolume <span class="built_in">exec</span> --no-startup-id pactl <span class="built_in">set</span>-sink-volume @DEFAULT_SINK@ +10% &amp;&amp; <span class="variable">$refresh_i3status</span></span><br><span class="line">bindsym XF86AudioLowerVolume <span class="built_in">exec</span> --no-startup-id pactl <span class="built_in">set</span>-sink-volume @DEFAULT_SINK@ -10% &amp;&amp; <span class="variable">$refresh_i3status</span></span><br><span class="line">bindsym XF86AudioMute <span class="built_in">exec</span> --no-startup-id pactl <span class="built_in">set</span>-sink-mute @DEFAULT_SINK@ toggle &amp;&amp; <span class="variable">$refresh_i3status</span></span><br><span class="line">bindsym XF86AudioMicMute <span class="built_in">exec</span> --no-startup-id pactl <span class="built_in">set</span>-source-mute @DEFAULT_SOURCE@ toggle &amp;&amp; <span class="variable">$refresh_i3status</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use Mouse+$mod to drag floating windows to their wanted position</span></span><br><span class="line">floating_modifier <span class="variable">$mod</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># start a terminal</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Return <span class="built_in">exec</span> gnome-terminal</span><br><span class="line"></span><br><span class="line"><span class="comment"># kill focused window</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+q <span class="built_in">kill</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># start dmenu (a program launcher)</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+d <span class="built_in">exec</span> dmenu_run</span><br><span class="line"><span class="comment"># There also is the (new) i3-dmenu-desktop which only displays applications</span></span><br><span class="line"><span class="comment"># shipping a .desktop file. It is a wrapper around dmenu, so you need that</span></span><br><span class="line"><span class="comment"># installed.</span></span><br><span class="line"><span class="comment"># bindsym $mod+d exec --no-startup-id i3-dmenu-desktop</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># change focus</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+j focus left</span><br><span class="line">bindsym <span class="variable">$mod</span>+k focus down</span><br><span class="line">bindsym <span class="variable">$mod</span>+l focus up</span><br><span class="line">bindsym <span class="variable">$mod</span>+semicolon focus right</span><br><span class="line"></span><br><span class="line"><span class="comment"># alternatively, you can use the cursor keys:</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Left focus left</span><br><span class="line">bindsym <span class="variable">$mod</span>+Down focus down</span><br><span class="line">bindsym <span class="variable">$mod</span>+Up focus up</span><br><span class="line">bindsym <span class="variable">$mod</span>+Right focus right</span><br><span class="line"></span><br><span class="line"><span class="comment"># move focused window</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+j move left</span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+k move down</span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+l move up</span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+semicolon move right</span><br><span class="line"></span><br><span class="line"><span class="comment"># alternatively, you can use the cursor keys:</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+Left move left</span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+Down move down</span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+Up move up</span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+Right move right</span><br><span class="line"></span><br><span class="line"><span class="comment"># split in horizontal orientation</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+h split h</span><br><span class="line"></span><br><span class="line"><span class="comment"># split in vertical orientation</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+v split v</span><br><span class="line"></span><br><span class="line"><span class="comment"># enter fullscreen mode for the focused container</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+f fullscreen toggle</span><br><span class="line"></span><br><span class="line"><span class="comment"># change container layout (stacked, tabbed, toggle split)</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+s layout stacking</span><br><span class="line">bindsym <span class="variable">$mod</span>+w layout tabbed</span><br><span class="line">bindsym <span class="variable">$mod</span>+e layout toggle split</span><br><span class="line"></span><br><span class="line"><span class="comment"># toggle tiling / floating</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+space floating toggle</span><br><span class="line"></span><br><span class="line"><span class="comment"># change focus between tiling / floating windows</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+space focus mode_toggle</span><br><span class="line"></span><br><span class="line"><span class="comment"># focus the parent container</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+a focus parent</span><br><span class="line"></span><br><span class="line"><span class="comment"># focus the child container</span></span><br><span class="line"><span class="comment">#bindsym $mod+d focus child</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define names for default workspaces for which we configure key bindings later on.</span></span><br><span class="line"><span class="comment"># We use variables to avoid repeating the names in multiple places.</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws1</span> <span class="string">"1"</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws2</span> <span class="string">"2"</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws3</span> <span class="string">"3"</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws4</span> <span class="string">"4"</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws5</span> <span class="string">"5"</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws6</span> <span class="string">"6"</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws7</span> <span class="string">"7"</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws8</span> <span class="string">"8"</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws9</span> <span class="string">"9"</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws10</span> <span class="string">"10"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># switch to workspace</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+1 workspace number <span class="variable">$ws1</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+2 workspace number <span class="variable">$ws2</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+3 workspace number <span class="variable">$ws3</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+4 workspace number <span class="variable">$ws4</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+5 workspace number <span class="variable">$ws5</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+6 workspace number <span class="variable">$ws6</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+7 workspace number <span class="variable">$ws7</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+8 workspace number <span class="variable">$ws8</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+9 workspace number <span class="variable">$ws9</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+0 workspace number <span class="variable">$ws10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># move focused container to workspace</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+1 move container to workspace number <span class="variable">$ws1</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+2 move container to workspace number <span class="variable">$ws2</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+3 move container to workspace number <span class="variable">$ws3</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+4 move container to workspace number <span class="variable">$ws4</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+5 move container to workspace number <span class="variable">$ws5</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+6 move container to workspace number <span class="variable">$ws6</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+7 move container to workspace number <span class="variable">$ws7</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+8 move container to workspace number <span class="variable">$ws8</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+9 move container to workspace number <span class="variable">$ws9</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+0 move container to workspace number <span class="variable">$ws10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># reload the configuration file</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+c reload</span><br><span class="line"><span class="comment"># restart i3 inplace (preserves your layout/session, can be used to upgrade i3)</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+r restart</span><br><span class="line"><span class="comment"># exit i3 (logs you out of your X session)</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+e <span class="built_in">exec</span> <span class="string">"i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -B 'Yes, exit i3' 'i3-msg exit'"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set key binding for screen lock</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+b <span class="built_in">exec</span> <span class="string">"i3lock -c 17212b"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># resize window (you can also use the mouse for that)</span></span><br><span class="line">mode <span class="string">"resize"</span> &#123;</span><br><span class="line">        <span class="comment"># These bindings trigger as soon as you enter the resize mode</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Pressing left will shrink the window’s width.</span></span><br><span class="line">        <span class="comment"># Pressing right will grow the window’s width.</span></span><br><span class="line">        <span class="comment"># Pressing up will shrink the window’s height.</span></span><br><span class="line">        <span class="comment"># Pressing down will grow the window’s height.</span></span><br><span class="line">        bindsym j resize shrink width 10 px or 10 ppt</span><br><span class="line">        bindsym k resize grow height 10 px or 10 ppt</span><br><span class="line">        bindsym l resize shrink height 10 px or 10 ppt</span><br><span class="line">        bindsym semicolon resize grow width 10 px or 10 ppt</span><br><span class="line"></span><br><span class="line">        <span class="comment"># same bindings, but for the arrow keys</span></span><br><span class="line">        bindsym Left resize shrink width 10 px or 10 ppt</span><br><span class="line">        bindsym Down resize grow height 10 px or 10 ppt</span><br><span class="line">        bindsym Up resize shrink height 10 px or 10 ppt</span><br><span class="line">        bindsym Right resize grow width 10 px or 10 ppt</span><br><span class="line"></span><br><span class="line">        <span class="comment"># back to normal: Enter or Escape or $mod+r</span></span><br><span class="line">        bindsym Return mode <span class="string">"default"</span></span><br><span class="line">        bindsym Escape mode <span class="string">"default"</span></span><br><span class="line">        bindsym <span class="variable">$mod</span>+r mode <span class="string">"default"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bindsym <span class="variable">$mod</span>+r mode <span class="string">"resize"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># move window (you can also use mouse for that)</span></span><br><span class="line">mode <span class="string">"moveit"</span> &#123;</span><br><span class="line">    bindsym Up move up 20px</span><br><span class="line">    bindsym Left move left 20px</span><br><span class="line">    bindsym Down move down 20px</span><br><span class="line">    bindsym Right move right 20px</span><br><span class="line">    bindsym Mod4+m mode <span class="string">"default"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bindsym <span class="variable">$mod</span>+m focus floating; mode <span class="string">"moveit"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># brightness control (works for thinkpad, requires 'light' program)</span></span><br><span class="line">bindsym XF86MonBrightnessUp <span class="built_in">exec</span> <span class="string">"sudo light -A 20; notify-send 'Brightness (Up)' <span class="variable">$(light)</span>'%' &amp;&amp; light &gt; /var/log/scripts/screen_brightness.log &amp;&amp; killall -SIGUSR1 i3status"</span></span><br><span class="line">bindsym XF86MonBrightnessDown <span class="built_in">exec</span> <span class="string">"sudo light -U 20; notify-send 'Brightness (Down)' <span class="variable">$(light)</span>'%' &amp;&amp; light &gt; /var/log/scripts/screen_brightness.log &amp;&amp; killall -SIGUSR1 i3status"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># spotify play control (requires 'spotify-cli-linux' program and media keys on keyboard)</span></span><br><span class="line">bindsym XF86AudioPlay <span class="built_in">exec</span> <span class="string">"spotifycli --playpause"</span></span><br><span class="line">bindsym XF86AudioNext <span class="built_in">exec</span> <span class="string">"spotifycli --next"</span></span><br><span class="line">bindsym XF86AudioPrev <span class="built_in">exec</span> <span class="string">"spotifycli --prev"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Start i3bar to display a workspace bar (plus the system information i3status</span></span><br><span class="line"><span class="comment"># finds out, if available)</span></span><br><span class="line"></span><br><span class="line">bar &#123;</span><br><span class="line">workspace_buttons yes</span><br><span class="line">    position top</span><br><span class="line">    status_command i3status</span><br><span class="line">font pango:Roboto 10</span><br><span class="line">height 25</span><br><span class="line">tray_output none</span><br><span class="line"></span><br><span class="line">colors &#123;</span><br><span class="line">background <span class="comment">#17212b</span></span><br><span class="line">        statusline <span class="comment">#ffffff</span></span><br><span class="line">        separator  <span class="comment">#666666</span></span><br><span class="line">        active_workspace   <span class="comment">#2c3e50 #2c3e50 #1abc9c</span></span><br><span class="line">        focused_workspace  <span class="comment">#2c3e50 #2c3e50 #1abc9c</span></span><br><span class="line">        inactive_workspace <span class="comment">#2c3e50 #2c3e50 #ecf0f1</span></span><br><span class="line">        urgent_workspace   <span class="comment">#e74c3c #e74c3c #ecf0f1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># hide windows title bar</span></span><br><span class="line">for_window [class=<span class="string">"^.*"</span>] border pixel 1</span><br><span class="line">new_window 1pixel</span><br></pre></td></tr></table></figure><p>I copied colors of the status bar from a place in the web (I don’t remember where) and I liked them, so I decided to keep them in my config.</p><p>You can see a lot of keywords <code>$mod</code> in this config. It’s just <code>Win</code> key on your keyboard. This config contains a few customizations I made. Probably, I’ll describe them in details in separate articles.</p><p>One of the useful customizations is key binding for locking the screen. I needed to install additional program called <code>i3lock</code> and add the following key binding for it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bindsym <span class="variable">$mod</span>+b <span class="built_in">exec</span> <span class="string">"i3lock -c 17212b"</span></span><br></pre></td></tr></table></figure><p>Value in the end of this config is the background color of the locked screen.</p><h2 id="Moving-around-the-system"><a href="#Moving-around-the-system" class="headerlink" title="Moving around the system"></a>Moving around the system</h2><p>We don’t need to know a lot of keybinding to move aroud the system and use it.</p><p>Here are a few default shortcuts I use daily:</p><ul><li><code>$mod+Enter</code> - opens terminal window</li><li><code>$mod+d</code> - opens <code>dmenu</code> with available programs (start typing your program name and Hit enter; hit <code>Esc</code> to close it)</li><li><code>$mod+arrow</code> - switches between windows (arrows: left, right, top, bottom)</li><li><code>$mod+Shift+arrow</code> - moves windows (arrows: left, right, top, bottom)</li><li><code>$mod+number</code> - switches between workspaces (1, 2, 3, etc.)</li><li><code>$mod+Shift+number</code> - moves window to another workspace (1, 2, 3, etc.)</li><li><code>$mod+Shit+space</code> - detaches/attaches window (in case you want to have floating window or you don’t want to use it in full screen mode)</li><li><code>$mod+Shift+q</code> - closes window</li><li><code>$mod+Shift+e</code> - opens dialog for closing i3</li></ul><p>That’s it.</p><p>I also use customized/non-default key bindings, which are not default, but they’re defined in my config:</p><ul><li><code>$mod+b</code> - locks screen</li><li><code>$mod+m</code> - allows to move floating (detached) window (we need to use shortcut, move window around and then use shortcut again to finish the process)</li><li><code>$mod+r</code> - allows to resize floating (detached) window in the same manner like moving it</li><li>media keys (mute/volume+/volume-/play/pause/next/prev) - they work in the same way like on any other system, but we need to configure this explicitly for i3</li><li>brightness keys (brightness+/-) - same story like media keys</li></ul><p>It’s powerful thing and we can configure and customize our own key bindings for the stuff we need.</p><h2 id="Status-bar-configuration-as-a-code"><a href="#Status-bar-configuration-as-a-code" class="headerlink" title="Status bar configuration as a code"></a>Status bar configuration as a code</h2><p>Besides system configuration described above, we can keep status bar configuration as a code too! Configuration of the i3bar is well described in the <a href="https://i3wm.org/docs/userguide.html#_configuring_i3bar" target="_blank" rel="noopener">official documentation</a>. As you could see in my <code>~/.config/i3/config</code> file above <code>bar</code> section looks as follows:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">bar &#123;</span><br><span class="line">workspace_buttons yes</span><br><span class="line">    position top</span><br><span class="line">    status_command i3status</span><br><span class="line">font pango:Roboto 10</span><br><span class="line">height 25</span><br><span class="line">tray_output none</span><br><span class="line"></span><br><span class="line">colors &#123;</span><br><span class="line">background <span class="comment">#17212b</span></span><br><span class="line">        statusline <span class="comment">#ffffff</span></span><br><span class="line">        separator  <span class="comment">#666666</span></span><br><span class="line">        active_workspace   <span class="comment">#2c3e50 #2c3e50 #1abc9c</span></span><br><span class="line">        focused_workspace  <span class="comment">#2c3e50 #2c3e50 #1abc9c</span></span><br><span class="line">        inactive_workspace <span class="comment">#2c3e50 #2c3e50 #ecf0f1</span></span><br><span class="line">        urgent_workspace   <span class="comment">#e74c3c #e74c3c #ecf0f1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Command called <code>status_command</code> invokes <code>i3status</code> program, which is default setup, but there are at least a few programs, which can be used instead of this to customize and enhance status bar. For now, I decided to use default option because it’s good enough for me. You can also see that I customized colors, font, height, removed tray icons and moved status bar to the top (default position is bottom).</p><p>When we are using <code>i3status</code>, then detailed configuration of status bar is located in <code>~/.config/i3status/config</code> file. You can check my current config below and in my <a href="https://github.com/pwittchen/dotfiles/blob/master/.config/i3status/config" target="_blank" rel="noopener">dotfiles repository</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># i3status configuration file.</span></span><br><span class="line"><span class="comment"># see "man i3status" for documentation.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># It is important that this file is edited as UTF-8.</span></span><br><span class="line"><span class="comment"># The following line should contain a sharp s:</span></span><br><span class="line"><span class="comment"># ß</span></span><br><span class="line"><span class="comment"># If the above line is not correctly displayed, fix your editor first!</span></span><br><span class="line"></span><br><span class="line">general &#123;</span><br><span class="line">        colors = <span class="literal">true</span></span><br><span class="line">        interval= 10</span><br><span class="line">    color_good      = <span class="string">'#88b090'</span></span><br><span class="line">    color_degraded  = <span class="string">'#ccdc90'</span></span><br><span class="line">    color_bad       = <span class="string">'#e89393'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">order += <span class="string">"wireless _first_"</span></span><br><span class="line">order += <span class="string">"ethernet _first_"</span></span><br><span class="line">order += <span class="string">"battery 0"</span></span><br><span class="line">order += <span class="string">"battery 1"</span></span><br><span class="line">order += <span class="string">"disk /"</span></span><br><span class="line">order += <span class="string">"disk /home"</span></span><br><span class="line">order += <span class="string">"load"</span></span><br><span class="line">order += <span class="string">"cpu_usage"</span></span><br><span class="line">order += <span class="string">"memory"</span></span><br><span class="line">order += <span class="string">"volume master"</span></span><br><span class="line">order += <span class="string">"read_file spotify"</span></span><br><span class="line">order += <span class="string">"read_file screen_brightness"</span></span><br><span class="line">order += <span class="string">"read_file pacman_new_packages"</span></span><br><span class="line">order += <span class="string">"read_file rss"</span></span><br><span class="line">order += <span class="string">"read_file aqi"</span></span><br><span class="line">order += <span class="string">"read_file weather"</span></span><br><span class="line">order += <span class="string">"tztime local"</span></span><br><span class="line"></span><br><span class="line">wireless _first_ &#123;</span><br><span class="line">        format_up = <span class="string">" %quality %essid %ip"</span></span><br><span class="line">        format_down = <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ethernet _first_ &#123;</span><br><span class="line">        format_up = <span class="string">"%ip (%speed)"</span></span><br><span class="line">        format_down = <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">battery 0 &#123;</span><br><span class="line">    format = <span class="string">"%status %percentage %remaining → 0"</span></span><br><span class="line">    format_down = <span class="string">""</span></span><br><span class="line">    last_full_capacity = <span class="literal">true</span></span><br><span class="line">    integer_battery_capacity = <span class="literal">true</span></span><br><span class="line">    low_threshold = 11</span><br><span class="line">    threshold_type = percentage</span><br><span class="line">    hide_seconds = <span class="literal">true</span></span><br><span class="line">    status_chr = <span class="string">" "</span></span><br><span class="line">    status_bat = <span class="string">" "</span></span><br><span class="line">    status_unk = <span class="string">" "</span></span><br><span class="line">    status_full = <span class="string">" "</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">battery 1 &#123;</span><br><span class="line">    format = <span class="string">"%status %percentage %remaining → 1"</span></span><br><span class="line">    format_down = <span class="string">""</span></span><br><span class="line">    last_full_capacity = <span class="literal">true</span></span><br><span class="line">    integer_battery_capacity = <span class="literal">true</span></span><br><span class="line">    low_threshold = 11</span><br><span class="line">    threshold_type = percentage</span><br><span class="line">    hide_seconds = <span class="literal">true</span></span><br><span class="line">    status_chr = <span class="string">" "</span></span><br><span class="line">    status_bat = <span class="string">" "</span></span><br><span class="line">    status_unk = <span class="string">" "</span></span><br><span class="line">    status_full = <span class="string">" "</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">disk <span class="string">"/"</span> &#123;</span><br><span class="line">format = <span class="string">" %avail"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">disk <span class="string">"/home"</span> &#123;</span><br><span class="line">        format = <span class="string">"⌂ %avail"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">load &#123;</span><br><span class="line">        format = <span class="string">" %1min"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cpu_usage &#123;</span><br><span class="line">format = <span class="string">"💻 %usage"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">memory &#123;</span><br><span class="line">        format = <span class="string">"⛁ %used"</span></span><br><span class="line">        threshold_degraded = <span class="string">"1G"</span></span><br><span class="line">        format_degraded = <span class="string">"MEMORY &lt; %available"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">volume master &#123;</span><br><span class="line">        format = <span class="string">"🔉 %volume"</span></span><br><span class="line">        format_muted = <span class="string">"🔇 %volume"</span></span><br><span class="line">        device = <span class="string">"default"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">read_file spotify &#123;</span><br><span class="line">        format = <span class="string">"♪ %content"</span></span><br><span class="line">        path = <span class="string">"/var/log/scripts/spotify.log"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">read_file screen_brightness &#123;</span><br><span class="line">        format = <span class="string">"🔆 %content%"</span></span><br><span class="line">        path = <span class="string">"/var/log/scripts/screen_brightness.log"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">read_file pacman_new_packages &#123;</span><br><span class="line">format = <span class="string">"📦 %content"</span></span><br><span class="line">path = <span class="string">"/var/log/scripts/pacman_new_packages.log"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">read_file rss &#123;</span><br><span class="line">format = <span class="string">"📶 %content"</span></span><br><span class="line">path = <span class="string">"/var/log/scripts/newsboat.log"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">read_file aqi &#123;</span><br><span class="line">format = <span class="string">"%content"</span></span><br><span class="line">path = <span class="string">"/var/log/scripts/aqi.log"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">read_file weather &#123;</span><br><span class="line">format = <span class="string">"%content"</span></span><br><span class="line">path = <span class="string">"/var/log/scripts/weather.log"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tztime <span class="built_in">local</span> &#123;</span><br><span class="line">        format = <span class="string">" %a %Y-%m-%d ⌚ %H:%M %Z %z  "</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can setup refresh interval of our status bar, which is 10 s in my case, but we can increase or decrease it if we want.</p><p>As you can see, I configured multiple things. Going from the left:</p><ul><li>network connectivity (WiFi + strength or wired connection + IP address)</li><li>usage of battery 0</li><li>usage of battery 1 (I have 2 batteries in my Thinkpad)</li><li>free space on the root directory</li><li>free space in the home directory</li><li>load (number of processes waiting to be executed)</li><li>usage of CPU</li><li>usage of RAM</li><li>sound</li><li>currently played Spotify song</li><li>screen brightness</li><li>number of new pacman packages to be updated</li><li>number of new RSS news from newsboat</li><li>air quality in my city monitored via Airly</li><li>weather in my city</li><li>date, time and time zone</li></ul><p>To make it all work, I needed to write a few additional scripts in Python and Bash, create log files to be read in the status bar, configure dunst notifications to monitor changing Spotify songs, etc. Maybe I’ll put details of these configs in the separate articles.</p><h2 id="Notifications"><a href="#Notifications" class="headerlink" title="Notifications"></a>Notifications</h2><p>By default i3 doesn’t have any notifications. If we want to have them, we need to install notification daemon. We have a few choices. I decided to go with <a href="https://dunst-project.org/" target="_blank" rel="noopener">dunst</a>, which is nice and minimalistic notification daemon. It’s also configurable and we can put its configuration into <code>~/.config/dunst/dunstrc</code> file. You can check my configuration for this daemon in my <a href="https://github.com/pwittchen/dotfiles/blob/master/.config/dunst/dunstrc" target="_blank" rel="noopener">dotfiles repo</a> as well as previous configs. I’ve done a few adjustments in this file to make notifications be consistent with colors of the system and my personal preferences. I also moved notification window a little bit down because it was covering status bar. You can test notification with <code>notify-send</code> command. Remember to kill <code>dunst</code> after applying changes in the config to see them. Moreover, after installing <code>dunst</code>, we need to start it to invoke the daemon and then after future system start-ups it will start automatically.</p><h2 id="Working-with-multiple-screens"><a href="#Working-with-multiple-screens" class="headerlink" title="Working with multiple screens"></a>Working with multiple screens</h2><p>In my current setup, I have laptop screen and external monitor. By default, i3 utilizes all available screens and first workspace is located in my primary (laptop) monitor. When I would like to use this workspace on my external screen, when laptop lid is closed, then I need to disable laptop screen. It’s not neccessary, when you are using both laptop and external monitor. To do that, I’m using <a href="https://wiki.archlinux.org/index.php/Xrandr" target="_blank" rel="noopener">xrandr</a> program. I created wrapper for this program called <code>monitor.sh</code>, which you can find in <code>.scripts</code> directory in my dotfiles repository.</p><p>Key functionalities of this script looks as follows:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> list &#123;</span><br><span class="line">  xrandr --listmonitors</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> laptopoff &#123;</span><br><span class="line">  xrandr --output eDP-1 --off</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> laptopmirror &#123;</span><br><span class="line">  xrandr --output eDP-1 --mode 1920x1080 --output HDMI-2 --mode 1920x1080 --same-as eDP-1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> reset &#123;</span><br><span class="line">  xrandr --auto</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> wallreload &#123;</span><br><span class="line">  feh --<span class="built_in">bg</span>-scale ~/Pictures/config/wallpaper/wallpaper.jpg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When I start the system, log in and close the laptop lid, I need to execute <code>monitor.sh laptopoff</code> to disable laptop screen, and then <code>monitor.sh wallreload</code> to reload wallpaper and adjust it into the higher resolution for the workspace 1. <code>eDP-</code> is name of my laptop monitor and it may be different in your case. In order, to reset settings, I can use <code>reset</code> command. It’s more convenient than remembering all <code>xrandr</code> commands.</p><h2 id="WiFi-and-Bluetooth"><a href="#WiFi-and-Bluetooth" class="headerlink" title="WiFi and Bluetooth"></a>WiFi and Bluetooth</h2><h3 id="WiFi"><a href="#WiFi" class="headerlink" title="WiFi"></a>WiFi</h3><p>i3 doesn’t have any control panel window known from desktop environments like Gnome. If we want to use WiFi and Bluetooth, we need command line tools (or GUI if we prefer) installed additionally in the system. For WiFi, I’m using <a href="https://wiki.archlinux.org/index.php/NetworkManager#Usage" target="_blank" rel="noopener">nmcli</a>. To list WiFi networks, we can type:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli dev wifi</span><br></pre></td></tr></table></figure><p>To connect to the given network, we can type:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli --ask device wifi connect hot_spot_name</span><br></pre></td></tr></table></figure><p>I also created wrapper for this, which you can find in <code>network.sh</code> file inside <code>.scripts</code> directory in my dotfiles repository.</p><h3 id="Bluetooth"><a href="#Bluetooth" class="headerlink" title="Bluetooth"></a>Bluetooth</h3><p>We have the same story with Bluetooth. In order to connect to bluetooth devices, I’m using <code>bluetoothctl</code> program.</p><p>To display devices, we can type:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bluetoothctl devices</span><br></pre></td></tr></table></figure><p>In order to connect to the device, we can type:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bluetoothctl connect mac_address</span><br></pre></td></tr></table></figure><p>I also created wrapper for this stuff, which allows me to connect to different devices, enable/disable bluetooth, start scanning, show paired devices, etc. You can find it in <code>bluetooth.sh</code> in my dotfiles repository in the same place where previous scripts are located.</p><h2 id="Final-thoughts"><a href="#Final-thoughts" class="headerlink" title="Final thoughts"></a>Final thoughts</h2><p>i3 WM is definitely great Window Manager. Probably the best I have been using so far. Initial configuration and setup can be overwhelming, but once we get into it, it will become clear and simple. Whole system is very fast, highly configurable, we can store complete configuration in the files and easily reproduce it on other machines or in our own machine in case when something will go wrong or we just want to reinstall the system. Using shortcuts and tiling windows all the time may be odd in the beginning, but once we get used to it, usage of this system is very efficient and conveninent. I have been using MS Windows, macOS, Unity desktop environment and Gnome in the past. i3wm is my favorite environment so far. Once we perform all the configuration in the beginning, we don’t have to touch it later until we want to change or add something. I wouldn’t recommend this WM to someone who doesn’t like computers, configurations, solving problems, etc. If you want something working out of the box, which you can trade for speed, high customization, control over your system, etc., then you should choose macOS, Windows or maybe Gnome if you prefer Linux.</p><p><img src="/images/posts/2020/i-switched-to-i3wm/screen_i3wm_2020_01.png" alt></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://i3wm.org/" target="_blank" rel="noopener">i3wm.org - official website</a></li><li><a href="https://i3wm.org/docs/" target="_blank" rel="noopener">i3wm.org/docs - official docs (very informative)</a></li><li><a href="https://www.youtube.com/watch?v=uD3qSgsQPRg" target="_blank" rel="noopener">i3 Arch Linux config (video)</a></li><li><a href="https://www.youtube.com/watch?v=GKviflL9XeI" target="_blank" rel="noopener">Tiling Window Management and i3wm config additions (video)</a></li><li><a href="https://www.youtube.com/watch?v=BWZQMWm4_v8" target="_blank" rel="noopener">Co to jest Tiling? [PL] (video)</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;From a long time I wanted to t
      
    
    </summary>
    
    
    
      <category term="linux" scheme="http://wittchen.io/tags/linux/"/>
    
      <category term="arch" scheme="http://wittchen.io/tags/arch/"/>
    
      <category term="i3" scheme="http://wittchen.io/tags/i3/"/>
    
      <category term="wm" scheme="http://wittchen.io/tags/wm/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Actions in action!</title>
    <link href="http://wittchen.io/github-actions-in-action/"/>
    <id>http://wittchen.io/github-actions-in-action/</id>
    <published>2019-11-04T13:11:36.000Z</published>
    <updated>2019-11-04T13:11:36.719Z</updated>
    
    <content type="html"><![CDATA[<p>Recently GitHub introduced really interesting feature to their service called <a href="https://github.com/features/actions" target="_blank" rel="noopener">Actions</a>. Actions can be used for automating various tasks related to the repositories like CI, CD, testing, deployment and whatnot. The general concept is as follows: We can create so called action, which can be based on a JavaScript project or a Docker container. We can also use existing actions in the <a href="https://github.com/marketplace?type=actions" target="_blank" rel="noopener">Marketplace</a>. Next, we can create workflow in the <code>yml</code> file, where we define our workflow. Workflow can consist of on a job with many steps using different actions. We can also define multiple jobs, where one depends on another. Workflows can be triggered in many ways. E.g. by push, pull request, creating issue, publishing release, scheduled event or external event.</p><p>E.g. we can define scheduled event, which will trigger workflow every hour as follows:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">on:</span><br><span class="line">  schedule:</span><br><span class="line">    - cron:  &apos;0 * * * *&apos;</span><br></pre></td></tr></table></figure><p>It has the same syntax like cron.</p><p>We can do many things with workflows and actions like deploying websites, artifacts with libraries, run tests on multiple environments, execute shell scripts on external servers and more. Have a look at the <a href="https://help.github.com/en/github/automating-your-workflow-with-github-actions" target="_blank" rel="noopener">official Github documenation</a> and <a href="https://github.com/marketplace?type=actions" target="_blank" rel="noopener">Marketplace</a> to see what kind of actions people are creating.</p><p>I wanted to try out these actions and workflows, so I automated the deployment process of my website (this one, which you’re visiting right now). Its code is open source and you can see it at <a href="https://github.com/pwittchen/wittchen.io" target="_blank" rel="noopener">https://github.com/pwittchen/wittchen.io</a>. I host my website on the external web server. I can access it via FTP and SSH. Website is based in <a href="http://hexo.io" target="_blank" rel="noopener">hexo</a> framework for static website generation. Before deployment I regenerate contents of the <code>public/</code> directory with command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make regenerate</span><br></pre></td></tr></table></figure><p>Then, I can commit and push my changes to the GitHub repository. My action is triggered whenever I push a change to the <code>public/</code> directory on the repository on the <code>master</code> branch. Once it’s done, workflows checks out my repository and starts copying files the the FTP server in the defined directory. GitHub allows us to keep the secrects like usernames and passwords, tokens etc. inside the repository configuration. we can access it via repository settings on the GitHub website. Once they’re created, they cannot be viewed or edited. We can just delete them (and create again if we want to). Our workflow file has to be located in the <code>.github/workflows/</code> directory. We can have more than one workflow.</p><p>You can see my <code>deploy.yml</code> workflow below:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Publish</span> <span class="string">Website</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line"><span class="attr">  push:</span></span><br><span class="line"><span class="attr">    branches:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">master</span></span><br><span class="line"><span class="attr">    paths:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'public/*'</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  FTP-Deploy-Action:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">FTP-Deploy-Action</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">    - uses:</span> <span class="string">actions/checkout@master</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">FTP-Deploy-Action</span></span><br><span class="line"><span class="attr">      uses:</span> <span class="string">SamKirkland/FTP-Deploy-Action@2.0.0</span></span><br><span class="line"><span class="attr">      env:</span></span><br><span class="line"><span class="attr">        FTP_SERVER:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.FTP_SERVER</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">        FTP_USERNAME:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.FTP_USERNAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">        FTP_PASSWORD:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.FTP_PASSWORD</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">        REMOTE_DIR:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.FTP_REMOTE_DIR</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="string">LOCAL_DIR</span> <span class="string">:</span> <span class="string">"public"</span></span><br><span class="line"><span class="attr">        ARGS:</span> <span class="bullet">--delete</span> <span class="bullet">--transfer-all</span></span><br></pre></td></tr></table></figure><p>I we can see, I defined secrects for FTP server address, username, password and remote directory.</p><p>Previously I was using <code>deploy.sh</code> bash script, which looked like that:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="built_in">source</span> .ftpconfig</span><br><span class="line">lftp ftp://<span class="variable">$USER</span>:<span class="variable">$PASS</span>@<span class="variable">$HOST</span> -e <span class="string">"set ftp:ssl-allow no; rm domains/<span class="variable">$HOST</span>/public_html/css/apollo.css; mirror -R -v --only-newer public domains/<span class="variable">$HOST</span>/public_html; quit"</span></span><br></pre></td></tr></table></figure><p>I had to be careful to avoid commiting <code>.ftpconfig</code> file and exclude it from commits like that:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git update-index --assume-unchanged .ftpconfig</span><br></pre></td></tr></table></figure><p>In my workflow, I used <a href="https://github.com/SamKirkland/FTP-Deploy-Action" target="_blank" rel="noopener">FTP-Deploy-Action</a>, which uses <code>lftp</code> program for the deployment, so it’s the same program I used for deployment of my website before, but now it’s executed on the GitHub infrastructure - not my computer. Thanks to that, I have automated website deployment process and whenever I update my website and push the changes, it’s uploaded automatically to my server via FTP.</p><p>As we could see, GitHub actions can be hosted in the GitHub repositories, we can use them directly in our workflows and define our own custom actions in the same way.</p><p>On the <a href="https://github.com/features/actions" target="_blank" rel="noopener">GitHub website</a>, we can read that depending on our subscription status, we can have several amounts of free minutes for executing actions and after crossing given thershold, we will be charged per minute in pay-as-you go model. As far I as see, amount of minutes is enough for personal usage and prices are reasonable.</p><p>If you’re using GitHub, then Actions are definitely worth considering for automation, because they give you endless opportunities for automating your work and CI/CD pipelines with huge flexibility and stability thanks to Docker containers. In the future, probably I’ll play more with it and maybe automate the last stage of the release process of my Java and Kotlin libraries with that feature.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://github.com/features/actions" target="_blank" rel="noopener">https://github.com/features/actions</a></li><li><a href="https://help.github.com/en/github/automating-your-workflow-with-github-actions" target="_blank" rel="noopener">https://help.github.com/en/github/automating-your-workflow-with-github-actions</a></li><li><a href="https://help.github.com/en/github/automating-your-workflow-with-github-actions/configuring-a-workflow" target="_blank" rel="noopener">https://help.github.com/en/github/automating-your-workflow-with-github-actions/configuring-a-workflow</a></li><li><a href="https://help.github.com/en/github/automating-your-workflow-with-github-actions/building-actions" target="_blank" rel="noopener">https://help.github.com/en/github/automating-your-workflow-with-github-actions/building-actions</a></li><li><a href="https://help.github.com/en/github/automating-your-workflow-with-github-actions/setting-up-continuous-integration-on-github" target="_blank" rel="noopener">https://help.github.com/en/github/automating-your-workflow-with-github-actions/setting-up-continuous-integration-on-github</a></li><li><a href="https://github.com/marketplace?type=actions" target="_blank" rel="noopener">https://github.com/marketplace?type=actions</a></li><li><a href="https://github.com/maddox/actions" target="_blank" rel="noopener">https://github.com/maddox/actions</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently GitHub introduced really interesting feature to their service called &lt;a href=&quot;https://github.com/features/actions&quot; target=&quot;_blan
      
    
    </summary>
    
    
    
      <category term="git" scheme="http://wittchen.io/tags/git/"/>
    
      <category term="ci" scheme="http://wittchen.io/tags/ci/"/>
    
      <category term="github" scheme="http://wittchen.io/tags/github/"/>
    
      <category term="automation" scheme="http://wittchen.io/tags/automation/"/>
    
  </entry>
  
  <entry>
    <title>Fixing font rendering on Firefox and Arch Linux</title>
    <link href="http://wittchen.io/fixing-font-rendering-on-firefox-and-arch-linux/"/>
    <id>http://wittchen.io/fixing-font-rendering-on-firefox-and-arch-linux/</id>
    <published>2019-11-01T10:57:02.000Z</published>
    <updated>2019-11-01T10:57:02.613Z</updated>
    
    <content type="html"><![CDATA[<p>After the recent Firefox update (70.0.1 64-bit), I’ve got a problem with font rendering on Arch Linux. I’ve installed this update probably on 31.10.2019 or 01.11.2019 (I’m not exactly sure right now). On several pages (e.g. Facebook or Github) fonts weren’t rendered correctly. It looked like fonts without anti-aliasing what was quite ugly.</p><p>I figured out that I can go to the Firefox Settings and in the “Fonts and Colors” section, go to “Advanced” and turn off the option “Allow pages to choose their own fonts, instead of your selection above”. It fixes problem with ugly fonts on several websites, but rest of the websites is not able to render the right fonts. E.g. when you have website with custom fonts from fonts.google.com (like this website). That’s why I couldn’t proceed with this solution.</p><p>I looked up style and font family on websites with ugly fonts  with Developer Tools and I figured out that messed up font is usually <code>Helvetica</code>. I’ve done some search and found <a href="https://aur.archlinux.org/packages/ephifonts-no-helvetica/" target="_blank" rel="noopener">ephifonts-no-helvetica</a> package on <a href="https://aur.archlinux.org/" target="_blank" rel="noopener">AUR</a>, which has the following description:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Like ephifonts, less Helvetica that messes up fonts in Firefox and Chromium.</span><br></pre></td></tr></table></figure><p>That’s what I need!</p><p>I used my own AUR helper called <a href="https://github.com/pwittchen/aur.sh" target="_blank" rel="noopener">aur.sh</a> (check it out by the way if you’re on Arch ;-) to install this package as follows:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aur get ephifonts-no-helvetica</span><br></pre></td></tr></table></figure><p>Then I restarted Firefox and problem was finally solved. All websites were rendering fonts correctly thanks to freshly installed font package.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;After the recent Firefox update (70.0.1 64-bit), I’ve got a problem with font rendering on Arch Linux. I’ve installed this update probabl
      
    
    </summary>
    
    
    
      <category term="linux" scheme="http://wittchen.io/tags/linux/"/>
    
      <category term="arch" scheme="http://wittchen.io/tags/arch/"/>
    
      <category term="firefox" scheme="http://wittchen.io/tags/firefox/"/>
    
  </entry>
  
  <entry>
    <title>Fixing Gnome Boot problem</title>
    <link href="http://wittchen.io/fixing-gnome-boot-problem/"/>
    <id>http://wittchen.io/fixing-gnome-boot-problem/</id>
    <published>2019-10-22T20:42:21.000Z</published>
    <updated>2019-10-22T20:46:05.242Z</updated>
    
    <content type="html"><![CDATA[<p>I recently had an issue with Gnome on Arch Linux during the system boot. After turning my computer on, I saw gray screen with message like:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Oh no! Something has gone wrong. A problem has occurred and the system can&apos;t recover...</span><br></pre></td></tr></table></figure><p>and I couldn’t log in or do anything and started searching solutions for this problem via my phone. First, I switched to terminal mode with <kbd>Alt+F2</kbd> (you can switch back to GUI with <kbd>Alt+F1</kbd>), logged in and updated system via pacman: <code>sudo pacman -Syu</code>. I tried to install or reinstall different packages mostly related to graphic card drivers, X11 or Gnome, but it didn’t help. Luckily, I found <a href="https://bbs.archlinux.org/viewtopic.php?id=203416" target="_blank" rel="noopener">this thread</a> on the Arch Forums, where there was <a href="https://bbs.archlinux.org/viewtopic.php?pid=1568684#p1568684" target="_blank" rel="noopener">a post</a> suggesting disabling <a href="https://en.wikipedia.org/wiki/Wayland_%28display_server_protocol%29" target="_blank" rel="noopener">Wayland</a> on <a href="https://wiki.gnome.org/Projects/GDM" target="_blank" rel="noopener">GDM</a> by opening <code>/etc/gdm/custom.conf</code> file and uncommenting line with</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WaylandEnable=false</span><br></pre></td></tr></table></figure><p>I did that. After restart, it finally fixed this problem and Gnome was loaded succesfully. That was the first time I had an issue with Boot related to Gnome and Arch. Fortunately, thanks to good community, I was able to fix it pretty quickly (in ~30 minutes) and avoided system re-installation. After that, I also had a few issues with sound on Bluetooth devices, but I fixed them quickly too.</p><p>I hope, you’ll find this post useful in case of having similar problems.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I recently had an issue with Gnome on Arch Linux during the system boot. After turning my computer on, I saw gray screen with message lik
      
    
    </summary>
    
    
    
      <category term="linux" scheme="http://wittchen.io/tags/linux/"/>
    
      <category term="arch" scheme="http://wittchen.io/tags/arch/"/>
    
      <category term="gnome" scheme="http://wittchen.io/tags/gnome/"/>
    
  </entry>
  
  <entry>
    <title>Cleaning root partition on Linux</title>
    <link href="http://wittchen.io/cleaning-root-partition-on-linux/"/>
    <id>http://wittchen.io/cleaning-root-partition-on-linux/</id>
    <published>2019-10-17T07:57:56.000Z</published>
    <updated>2019-10-17T08:02:15.030Z</updated>
    
    <content type="html"><![CDATA[<p>Size of the root partition <code>/</code> on my system is 25 GB. I recently had a situation where I received notification from the system that there’s too little free space on that partition, which was around 1 GB. My first attempt was to clean pacman cache with <code>sudo pacman -Sc</code>. It helped for a moment, but I kept receiving this notification. I searched for the solutions regarding extending the root partition and noticed that it wouldn’t be that easy and probably require making backup and reinstalling the system. Although installing Arch is not scary for me anymore, I didn’t want to do that again, because it takes some time and after that I will have to configure all my stuff, install apps, etc. which is a lot of work. Due to this fact I started search for the solutions about cleaning root partition. I found nice program called <code>ncdu</code>, which is abbreviation for NCurses Disk Usage according to the man page. You can install it with pacman: <code>sudo pacman -S ncdu</code>. This program shows usage of the directories and shows directories, which take the biggest amount of space on the disk. Once you have that program, you can go to the root partition and run it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /</span><br><span class="line">ncdu</span><br></pre></td></tr></table></figure><p>It will do the analysis and return an interactive output with directories, size and visualisation of the size:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">-- / -------------------------</span><br><span class="line">. 99,8 GiB  [##########] /home</span><br><span class="line">.  12,1 GiB [#         ] /usr</span><br><span class="line">.   7,8 GiB [          ] /var</span><br><span class="line">. 689,2 MiB [          ] /opt</span><br><span class="line">. 191,4 MiB [          ] /tmp</span><br><span class="line">   55,0 MiB [          ] /boot</span><br><span class="line">.  11,3 MiB [          ] /etc</span><br><span class="line">.   1,8 MiB [          ] /run</span><br><span class="line">. 912,0 KiB [          ] /dev</span><br><span class="line">!  16,0 KiB [          ] /lost+found</span><br><span class="line">   12,0 KiB [          ] /srv</span><br><span class="line">!   4,0 KiB [          ] /root</span><br><span class="line">e   4,0 KiB [          ] /mnt</span><br><span class="line">.   0,0   B [          ] /proc</span><br><span class="line">.   0,0   B [          ] /sys</span><br><span class="line">@   0,0   B [          ]  snap</span><br><span class="line">@   0,0   B [          ]  sbin</span><br><span class="line">@   0,0   B [          ]  lib64</span><br><span class="line">@   0,0   B [          ]  lib</span><br><span class="line">@   0,0   B [          ]  bin</span><br></pre></td></tr></table></figure><p>We can naviagte through this directories and locate places which takes space on disk, which can be free.</p><p>For example, here are the contents of the <code>/usr/</code> directory:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">--- /usr ------------------------</span><br><span class="line"></span><br><span class="line">.   5,9 GiB [##########] /share</span><br><span class="line">    5,2 GiB [########  ] /lib</span><br><span class="line">  816,9 MiB [#         ] /bin</span><br><span class="line">  279,8 MiB [          ] /include</span><br><span class="line">   15,5 MiB [          ] /local</span><br><span class="line">   13,1 MiB [          ] /src</span><br><span class="line">    5,5 MiB [          ] /lib32</span><br><span class="line">    2,5 MiB [          ] /doc</span><br><span class="line">@   0,0   B [          ]  sbin</span><br><span class="line">@   0,0   B [          ]  lib64</span><br></pre></td></tr></table></figure><p>I’ve noticed that there were logs in <code>/var/log/journal/</code>, which have significant size. I also had a lot of downloaded packages in <code>/var/cache/pacman/</code>. As I noticed <code>pacman -Sc</code> command doesn’t clean all the cache and keeps the newest packages, so if we want to remove everything or almost everything, we can configure pacman appropriately or remove packages manually. These data could be cleaned and saved me a few GB of space, so I stopped seeing system notification. During cleanup, we can also have a look at other cache data, logs and <code>/tmp/</code> directory. To verify disk sizes and used space, we can use <code>df -H</code> command.</p><p>I hope, you’ll find this tips useful and avoid resizing root partition or system re-installation.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Size of the root partition &lt;code&gt;/&lt;/code&gt; on my system is 25 GB. I recently had a situation where I received notification from the system
      
    
    </summary>
    
    
    
      <category term="linux" scheme="http://wittchen.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Formatting USB disk on Linux</title>
    <link href="http://wittchen.io/formatting-usb-disk-on-linux/"/>
    <id>http://wittchen.io/formatting-usb-disk-on-linux/</id>
    <published>2019-09-01T07:16:07.000Z</published>
    <updated>2019-09-01T07:16:07.486Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes we may want to format external USB drive. I recently encountered a situation, where I had bootable USB drive with operating system ready to install, but I wanted to remove all this stuff and use disk for storing data. I couldn’t format this disk with GUI tools for some reason and I kept getting errors or information that it’s not possible. In case you don’t know, on Linux everything is always possible, so I quit that GUI tool, opened terminal and start playing with good old and simple programs.</p><p>When we insert disk and type:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsblk</span><br></pre></td></tr></table></figure><p>we can see the output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</span><br><span class="line">loop0         7:0    0 181,1M  1 loop /var/lib/snapd/snap/spotify/36</span><br><span class="line">loop1         7:1    0 147,3M  1 loop /var/lib/snapd/snap/skype/66</span><br><span class="line">loop2         7:2    0  88,5M  1 loop /var/lib/snapd/snap/core/7270</span><br><span class="line">loop3         7:3    0   236M  1 loop /var/lib/snapd/snap/kde-frameworks-5/27</span><br><span class="line">loop4         7:4    0 180,2M  1 loop /var/lib/snapd/snap/spotify/35</span><br><span class="line">loop5         7:5    0 149,6M  1 loop /var/lib/snapd/snap/slack/16</span><br><span class="line">sdb           8:16   1   7,5G  0 disk</span><br><span class="line">└─sdb1        8:17   1   7,5G  0 part /run/media/pw/DISK3</span><br><span class="line">nvme0n1     259:0    0   477G  0 disk</span><br><span class="line">├─nvme0n1p1 259:1    0   200M  0 part /boot</span><br><span class="line">├─nvme0n1p2 259:2    0    24G  0 part [SWAP]</span><br><span class="line">├─nvme0n1p3 259:3    0    25G  0 part /</span><br><span class="line">└─nvme0n1p4 259:4    0 427,8G  0 part /home</span><br></pre></td></tr></table></figure><p>When we type:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fdisk -l</span><br></pre></td></tr></table></figure><p>we’ll see:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">Disk /dev/sdb: 7,51 GiB, 8053063680 bytes, 15728640 sectors</span><br><span class="line">Disk model: USB DISK</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel type: dos</span><br><span class="line">Disk identifier: 0x40a863e7</span><br><span class="line"></span><br><span class="line">Device     Boot Start      End  Sectors  Size Id Type</span><br><span class="line">/dev/sdb1        2048 15728639 15726592  7,5G 83 Linux</span><br></pre></td></tr></table></figure><p>Now, we have basic information about our USB drive. It’s located in <code>/dev/sdb</code> and has <code>7,5 GB</code> of space.<br>Sometimes, we can have mulitple partitions on our drive. In such case, we may want to delete them and create new partition.</p><p>To do that, we can type:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk /dev/sdb</span><br></pre></td></tr></table></figure><p>next, we can use <code>d</code> for deleting partition:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Welcome to fdisk (util-linux 2.34).</span><br><span class="line">Changes will remain in memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write command.</span><br><span class="line"></span><br><span class="line">Command (m for help): d</span><br><span class="line">Selected partition 1</span><br><span class="line">Partition 1 has been deleted.</span><br></pre></td></tr></table></figure><p>and <code>n</code> for creating a new one:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Command (m for help): n</span><br><span class="line">Partition type</span><br><span class="line">p   primary (0 primary, 0 extended, 4 free)</span><br><span class="line">e   extended (container for logical partitions)</span><br><span class="line">Select (default p): p</span><br><span class="line">Partition number (1-4, default 1):</span><br><span class="line">First sector (2048-15728639, default 2048):</span><br><span class="line">Last sector, +/-sectors or +/-size&#123;K,M,G,T,P&#125; (2048-15728639, default 15728639):</span><br><span class="line"></span><br><span class="line">Created a new partition 1 of type &apos;Linux&apos; and of size 7,5 GiB.</span><br><span class="line">Partition #1 contains a vfat signature.</span><br><span class="line"></span><br><span class="line">Do you want to remove the signature? [Y]es/[N]o: Y</span><br><span class="line"></span><br><span class="line">The signature will be removed by a write command.</span><br></pre></td></tr></table></figure><p>after that, we can confirm the process with <code>w</code> command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Command (m for help): w</span><br><span class="line">The partition table has been altered.</span><br><span class="line">Syncing disks.</span><br></pre></td></tr></table></figure><p>next, we can umount drive:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo umount /dev/sdb</span><br></pre></td></tr></table></figure><p>and create a file system - in our case, we’ll use FAT32 file system in order to make USB drive accessible across all operating systems</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkfs.vfat /dev/sdb1</span><br></pre></td></tr></table></figure><p>after that, we can create a label for our disk with name <code>disk3</code> (it can be anything):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mlabel - /dev/sdb1 ::disk3</span><br></pre></td></tr></table></figure><p>Please note, when we create file system of a different type, we need to use different commands for creating disk labels. For more information about that, read article about <a href="https://www.sinisterstuf.org/blog/345/renaming-usb-devices-in-linux" target="_blank" rel="noopener">renaming USB devices on Linux</a>.</p><p>That’s it! Maybe it’s not that easy as clicking on the GUI, but we can see whole process and format any disk even when something seems to be messed up.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.sinisterstuf.org/blog/345/renaming-usb-devices-in-linux" target="_blank" rel="noopener">https://www.sinisterstuf.org/blog/345/renaming-usb-devices-in-linux</a></li><li><a href="https://www.cyberciti.biz/faq/linux-disk-format/" target="_blank" rel="noopener">https://www.cyberciti.biz/faq/linux-disk-format/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Sometimes we may want to format external USB drive. I recently encountered a situation, where I had bootable USB drive with operating sys
      
    
    </summary>
    
    
    
      <category term="linux" scheme="http://wittchen.io/tags/linux/"/>
    
      <category term="usb" scheme="http://wittchen.io/tags/usb/"/>
    
      <category term="drive" scheme="http://wittchen.io/tags/drive/"/>
    
  </entry>
  
  <entry>
    <title>Modifying mehtod&#39;s input parameters</title>
    <link href="http://wittchen.io/modifying-methods-input-parameters/"/>
    <id>http://wittchen.io/modifying-methods-input-parameters/</id>
    <published>2019-08-05T16:27:30.000Z</published>
    <updated>2019-08-07T17:57:22.679Z</updated>
    
    <content type="html"><![CDATA[<p>During maintenance of the legacy projects, I sometimes see constructions like:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">appendFooter</span><span class="params">(Report report)</span></span>;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">populate</span><span class="params">(Data data)</span></span>;</span><br></pre></td></tr></table></figure><p>I even saw something like this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">populate</span><span class="params">(Source source, Target target)</span></span>;</span><br></pre></td></tr></table></figure><p>What is wrong with these statements?</p><p>They’re using so called <em>output argument</em>. In the examples above, we’re passing a <code>report</code> or <code>data</code> variable, which usually are going to be global variables available in the scope of the whole class. These methods takes them as an argument and modify them. This idea comes from pre-OOP times and could be applied in programs written in C. Nevertheless, in Java, this technique should be avoided and is considered as a <strong>bad practice</strong>.</p><p>In Robert C. Martin’s “Clean Code” book, it’s written:</p><p><em>Output arguments should be avoided.</em></p><p>Writing code in such way can implicate many problems. Often we don’t know, by looking at the method name, how the method is going to modify the input object. Even when we’ll write unit tests for each method, the final behavior may be different because in a concrete data flow, one method can modify input object, then another method can modify the same object in a concrete order what will change the final outcome. In this approach data cannot be immutable and body of the method is tightly coupled to the class and it’s attributes, which is bad. The more methods like these, the more unpredictable and harder to test code will become. Moreover, when multiple threads will call these methods, then we can encounter errors related to concurrency or data inconsistency.</p><p><strong>How to fix this problem?</strong></p><p>First of all, we should never use input arguments. Variables used in the methods should be available only in the scode of these methods.</p><p>We can rewrite bad examples listed above in the following way:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">report.appendFooter(footer);</span><br></pre></td></tr></table></figure><p>and</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Object value = createValue();</span><br><span class="line">data.setValue(value);</span><br></pre></td></tr></table></figure><p>and</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Source source = createSource();</span><br><span class="line">target.setValue(source);</span><br></pre></td></tr></table></figure><p>Now, we clearly see where objects are created, data is immutable, input parameters are not modified inside the methods, we don’t rely on the global state inside particular methods and all method’s variables are available only in the scope of the method.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://softwareengineering.stackexchange.com/a/245809/189814" target="_blank" rel="noopener">https://softwareengineering.stackexchange.com/a/245809/189814</a></li><li><a href="https://softwareengineering.stackexchange.com/questions/322490/what-is-an-output-argument-as-refered-to-in-martins-clean-code/322495" target="_blank" rel="noopener">https://softwareengineering.stackexchange.com/questions/322490/what-is-an-output-argument-as-refered-to-in-martins-clean-code/322495</a></li><li><a href="https://github.com/denizozger/clean-code#methods" target="_blank" rel="noopener">https://github.com/denizozger/clean-code#methods</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;During maintenance of the legacy projects, I sometimes see constructions like:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
      
    
    </summary>
    
    
    
      <category term="java" scheme="http://wittchen.io/tags/java/"/>
    
      <category term="anti-patterns" scheme="http://wittchen.io/tags/anti-patterns/"/>
    
      <category term="bad-practices" scheme="http://wittchen.io/tags/bad-practices/"/>
    
      <category term="clean-code" scheme="http://wittchen.io/tags/clean-code/"/>
    
  </entry>
  
  <entry>
    <title>Get rid of the list null-checks</title>
    <link href="http://wittchen.io/get-rid-of-the-list-null-checks/"/>
    <id>http://wittchen.io/get-rid-of-the-list-null-checks/</id>
    <published>2019-07-28T21:18:43.000Z</published>
    <updated>2019-08-18T07:43:06.149Z</updated>
    
    <content type="html"><![CDATA[<p>During development of the legacy Java applications, we still have to deal with <code>null</code>. It’s possible to avoid it completly when we’re designing application from the scratch, applying proper code constructions, static code analysis and we’re consistent during code reviews. Nevertheless in majority of the cases we will encounter <code>null</code> in daily projects. We may even expect them in the method inputs and we have to be prepared for it. With the functional programming in Java we can deal with them in quite elegant way, but I often see people are not using features available nowadays.</p><p>Let’s have a look at the following code snippet:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;MyType&gt; <span class="title">getList</span><span class="params">(<span class="keyword">final</span> List&lt;MyType&gt; list)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (list != <span class="keyword">null</span> || list.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line">            .stream()</span><br><span class="line">            .filter(...)</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this example <code>list</code> can be <code>null</code>, so we have to perform null-check. We can also verify if the <code>list</code> is not empty once we’re sure it’s not <code>null</code> and return empty collection in that case. If the condition is not met, we’re converting list to the stream and start processing it.</p><p>We can use <code>CollectionUtils</code> from Apache Commons library to perform exactly the same check if we have it in our project dependencies:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;MyType&gt; <span class="title">getList</span><span class="params">(<span class="keyword">final</span> List&lt;MyType&gt; list)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(list)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line">            .stream()</span><br><span class="line">            .filter(...)</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can try to figure out, how to achieve the same goal with functional programming concepts in Java and write the same logic within the single, fluent stream. We can call <code>Optional.ofNullable(...)</code> method because we know that our method argument can be <code>null</code>. Next, once we’ve got an <code>Optional</code> type, we can call <code>.orElseGet(...)</code> method and provide an object, which we want to return, when <code>nullable</code> value will be <code>null</code>. In this case, it will be an empty list. After that, we can fluently proceed with the stream processing.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;MyType&gt; <span class="title">getList</span><span class="params">(<span class="keyword">final</span> List&lt;MyType&gt; list)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Optional</span><br><span class="line">            .ofNullable(list)</span><br><span class="line">            .orElseGet(Collections::emptyList)</span><br><span class="line">            .stream()</span><br><span class="line">            .filter(...)</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Code snippet above looks much more elegant, it’s shorter, more concise and we have achieved our goal within a single stream without any additional <code>if</code> statements and without breaking chain of method invocations.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;During development of the legacy Java applications, we still have to deal with &lt;code&gt;null&lt;/code&gt;. It’s possible to avoid it completly whe
      
    
    </summary>
    
    
    
      <category term="java" scheme="http://wittchen.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Arch Linux - installation notes no. 2 (GUI and utils)</title>
    <link href="http://wittchen.io/arch-install-notes-gui-and-utils/"/>
    <id>http://wittchen.io/arch-install-notes-gui-and-utils/</id>
    <published>2019-07-27T07:31:30.000Z</published>
    <updated>2019-07-27T07:31:30.221Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>In my <a href="/arch-install-notes">previous article</a> I roughly described Arch Linux installation process. After going through whole process, we will end up with clean terminal without any graphical environment etc. In most cases, we will need it on the desktop.</p><h2 id="Desktop-Environment-DE-Windows-Manager-WM"><a href="#Desktop-Environment-DE-Windows-Manager-WM" class="headerlink" title="Desktop Environment (DE) / Windows Manager (WM)"></a>Desktop Environment (DE) / Windows Manager (WM)</h2><p>There are two main types of the Linux graphical environments for desktop:</p><ul><li>Window Managers</li><li>Desktop Environments</li></ul><p>Window Managers are much simpler, require a lot of configuration, learning how to use them and you see all windows at once. Moreover, usually you can use them without a mouse and mouse is useless most of the time because you cannot drag and drop windows. Once you master it, working with Window Manager can be very efficient. Example of popular Window Manager is <a href="https://i3wm.org/" target="_blank" rel="noopener">i3</a>. This environments are also lightweight. On the other hand, we have Desktop Environments. They’re full of features, windows can be stacked one on another and you can drag and drop them. Several Desktop Environments are extensible through plugins. These kind of graphical interfaces are known to majority of computer users. You can see them on Windows or macOS. Examples of the popular Linux Desktop Environments are <a href="https://www.gnome.org/" target="_blank" rel="noopener">Gnome</a>, <a href="https://xfce.org/" target="_blank" rel="noopener">Xfce</a> and <a href="https://kde.org/" target="_blank" rel="noopener">KDE</a>. Of course, mentioned Window Managers and Desktop Environments are not the only avaiable. There are more. I just mentioned these because I’ve heard about them or tried them.</p><p>I’m using Gnome Desktop Environment right now, so I will show you how to install it in this article</p><h3 id="Installing-X-Window-System"><a href="#Installing-X-Window-System" class="headerlink" title="Installing X Window System"></a>Installing X Window System</h3><p>X Window system is a GUI component created in 80s at MIT. One of the most popular implementation of X is X.org, which we’re going to install. Gnome is built on top of X that’s why, we’re installing X first.</p><p>To install X Window system, we can type:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S xorg-server xorg-xinit xorg-server-utils</span><br></pre></td></tr></table></figure><p>To install desktop features, we can type:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S xorg-twm xorg-xclock xterm</span><br></pre></td></tr></table></figure><p>Now, we can start X Window system, in which we will install Gnome</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startx</span><br></pre></td></tr></table></figure><h3 id="Installing-Gnome"><a href="#Installing-Gnome" class="headerlink" title="Installing Gnome"></a>Installing Gnome</h3><p>Let’s install required fonts:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S ttf-dejavu</span><br></pre></td></tr></table></figure><p>Now, we’re ready to install Gnome:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S gnome</span><br></pre></td></tr></table></figure><p>Enable the display manager:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable gdm.service</span><br></pre></td></tr></table></figure><p>Now, we can reboot our system and once computer restarts, we should see Gnome GUI</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><h2 id="Sound"><a href="#Sound" class="headerlink" title="Sound"></a>Sound</h2><p>Sound is usually not enabled by default on Arch and we need to install required software:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S alsa-utils</span><br></pre></td></tr></table></figure><p><code>alsa-utils</code> package is recommended for this task</p><p>We can type <code>alsamixer</code> to view and adjust the configuration.</p><p>We can also test our speaker with <code>speaker-test -c 2</code> command or via Gnome GUI.</p><p>Once we’re done, it’s good to reboot the computer. </p><p>Sometimes it may be required to perform additional configuration depending on our type of computer or specific sound devices.</p><h2 id="Bluetooth"><a href="#Bluetooth" class="headerlink" title="Bluetooth"></a>Bluetooth</h2><p>If we’re using Bluetooth mouse, keyboard, headphones or speaker, we should install appropriate Bluetooth software:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S pulseaudio-bluetooth</span><br></pre></td></tr></table></figure><p>Now, we should enable <code>bluetooth.service</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable bluetooth.service</span><br></pre></td></tr></table></figure><p>You can connect Bluetooth Device via <code>bluetoothctl</code> or via Gnome GUI.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bluetoothctl</span><br><span class="line">[bluetooth] power on</span><br><span class="line">[bluetooth] agent on</span><br><span class="line">[bluetooth] scan on</span><br><span class="line">[NEW] Device [MAC address]</span><br><span class="line">[bluetooth] pair [MAC address]</span><br><span class="line">[bluetooth] connect [MAC address]</span><br></pre></td></tr></table></figure><p>Please note, that devices won’t connect automatically after turning the computer on. In order to achieve that, we should mark them as trusted.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bluetoothctl</span><br><span class="line">[bluetooth] trust [MAC address]</span><br></pre></td></tr></table></figure><p>We should perform the same procedure for all our Bluetooth devices.</p><p>After next reboot, our devices should connect automatically before login.</p><h2 id="Other-packages"><a href="#Other-packages" class="headerlink" title="Other packages"></a>Other packages</h2><p>Things mentioned above are necessary for running regular desktop environment. Other stuff should be adjusted to our needs. We should keep in mind the fact that Arch is minimalistic distro and it shouldn’t be polluted by too many packages. We should install only what we need. Once we’re are not using a specified program, it’s good to remove it. We should read more about <code>pacman</code>, which is Arch package manager. It allows us to install packages, update and manage them. In order to update our whole operating system and its packages, we can type:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Syuw</span><br></pre></td></tr></table></figure><p>That’s one of the many pacman features. We can install new packages calling <code>pacman</code> with <code>-S</code> parameter:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S package</span><br></pre></td></tr></table></figure><p>It’s also good to remember that, we can use <a href="https://aur.archlinux.org/" target="_blank" rel="noopener">aur</a> repository, which provides third-party packages from users and vendors in case we want to install a specific kind of software. While playing with aur, I was tired of repatitive tasks, so I created (yet another) simple aur helper available here: <a href="https://github.com/pwittchen/aur.sh" target="_blank" rel="noopener">https://github.com/pwittchen/aur.sh</a>, which you can use. Please note, it doesn’t resolve package dependencies yet.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Now, we have prepared simple, basic and clean desktop environment. From this point, we can proceed with the further adjustments and customizations (or leave it as it is :-). In the past I worked with Windows, macOS and Ubuntu Linux and personally I think I like Arch Linux distribution with such setup the most. I can control everything, I know what is working under the hood and how it’s configured, I have installed only software packages I really need, updates are seamless and everything just works. It’s really hard to break anything on this system if you know what you’re doing. Moreover, documentation and community are great. Of course, it requires some learning and time in the beginning, but if you’re working with computers or like playing with them, in my opinion it’s time well invested because Linux knowledge can be our great asset at work or in daily usage of the computer.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;In my &lt;a href=&quot;/arch-install-n
      
    
    </summary>
    
    
    
      <category term="linux" scheme="http://wittchen.io/tags/linux/"/>
    
      <category term="arch" scheme="http://wittchen.io/tags/arch/"/>
    
      <category term="gnome" scheme="http://wittchen.io/tags/gnome/"/>
    
  </entry>
  
  <entry>
    <title>Arch Linux - installation notes</title>
    <link href="http://wittchen.io/arch-install-notes/"/>
    <id>http://wittchen.io/arch-install-notes/</id>
    <published>2019-07-24T21:59:20.000Z</published>
    <updated>2020-01-08T22:29:05.027Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>For a long time, I was considering switching from Ubuntu do Arch Linux distribution, but I didn’t have enough knowledge, time and energy to do this. I definitely knew it requires some specific knowledge and manual steps to perform. I also didn’t wat to spend too much time on reading the documentation. Moreover, I know that sometimes I could have specific issues related to my hardware, which are not listed in documentation and I have to deal with them on my own. Due to these facts I was discouraged to install Arch. Recently, I found awesome video about <a href="https://www.youtube.com/watch?v=4PBqpX0_UOc" target="_blank" rel="noopener">Full Arch Linux Install</a> by <a href="https://www.youtube.com/channel/UC2eYFnH61tmytImy1mTYvhA" target="_blank" rel="noopener">Luke Smith</a> where everything is explained very clearly in each step. I watched it one time without doing anything and then, watched it next time performing all the steps described there. I had a few issues related to my hardware and BIOS, but I managed to install Arch on my ThinkPad T470s thanks to this video. During the installation, I made a few notes for myself for the future possible installations. Maybe you’ll find them useful too. The whole process is actually simpler than I thought. It just requires some practical knowledge about Linux, patience and “can do” attitude. I divided this article into steps and sub-steps, which are required to perform the installation. Please, keep in mind the fact that in the end of the installation, we will have an empty command prompt with plain OS without any GUI and we will have to install the graphical environment from the terminal. It will not be covered in this article, but I think, I’ll cover it in another one. Of course, this article contains just my notes, which help me understand everything well because and I like documenting this kind of things for the future. If you searching for Arch installation guide, I recommend you to see linked video or an <a href="https://wiki.archlinux.org/index.php/Installation_guide" target="_blank" rel="noopener">official Arch installation guide</a> in Arch Wiki. This article can be additional resource to this stuff.</p><h2 id="Booting-installer-from-USB"><a href="#Booting-installer-from-USB" class="headerlink" title="Booting installer from USB"></a>Booting installer from USB</h2><h3 id="Creating-bootable-USB"><a href="#Creating-bootable-USB" class="headerlink" title="Creating bootable USB"></a>Creating bootable USB</h3><p>In order to create bootable USB, we need to download <code>*.iso</code> file with Arch from <a href="https://www.archlinux.org/download/" target="_blank" rel="noopener">https://www.archlinux.org/download/</a>. We also need to have <code>dd</code> (disk dump) program installed. We need to invoke <code>lsblk</code> before inserting USB drive to see our drives and invoke <code>lsblk</code> again after inserting the USB drive to see, which one it is. We can also have a look at disk sizes, what helps in recognizing our disk. Next, we can call <code>dd</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=/path/to/arch.iso of=/dev/sdb status=<span class="string">"progress"</span></span><br></pre></td></tr></table></figure><p><code>status=&quot;progress&quot;</code> parameter will allow us to monitor progress of the whole process.</p><p><strong>Note</strong>: please, be sure that you are writing on the correct disk! In the example above, we’re writing to <code>/dev/sdb</code>. It may be the same in your case, but it may be different too! It’s just an example!</p><h3 id="BIOS-configuration"><a href="#BIOS-configuration" class="headerlink" title="BIOS configuration"></a>BIOS configuration</h3><p>We need to go into the BIOS before installation. It may be different on different computers. On mine it’s hitting <kbd>Enter</kbd> after reboot and then <kbd>F1</kbd>. Inside BIOS, we need to change order of booting devices and move USB drive to the top. I also had to disable secure boot and quick boot. Moreover I set <code>UEFI/Legacy Boot</code> to <code>Both</code> (<code>UEFI/Legacy Boot Priority</code>: <code>UEFI First</code>, <code>CSM Support</code>: <code>YES</code>). Sometimes network boot may interrupt boot process, so I set it to <code>USB HDD</code>. I had to play more with this stuff on freshly installed system because it was not booting in the beginning. It may be different on your computer. Sometimes, there may be no issue with it.</p><h2 id="First-things"><a href="#First-things" class="headerlink" title="First things"></a>First things</h2><h3 id="UEFI-check"><a href="#UEFI-check" class="headerlink" title="UEFI check"></a>UEFI check</h3><p>Once we have booted installer from USB stick, we need to perform <a href="https://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface" target="_blank" rel="noopener">UEFI</a> check as follows.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /sys/firmware/efivars</span><br></pre></td></tr></table></figure><p>If it outputs an error or nothing, that’s ok and we can proceed with installation. If you see bunch of files, then installation procedure may be different or may require additional steps.</p><h3 id="Internet-check"><a href="#Internet-check" class="headerlink" title="Internet check"></a>Internet check</h3><p>We need to check an internet connection because we will need it to download packages. We can do it just by simple ping:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping wittchen.io</span><br></pre></td></tr></table></figure><p>When we see response, that’s ok.</p><p>It’s worth to mention, that it’s good to have ethernet cable connection for the installation process. Optionally, you can use <code>wifi-menu</code> to connect wirelessly, but it’s not recommended for the installation.</p><h2 id="System-time-and-date-initial-setup"><a href="#System-time-and-date-initial-setup" class="headerlink" title="System time and date initial setup"></a>System time and date initial setup</h2><p>To perform system time and date initial setup, we need to run the following command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl set-ntp true</span><br></pre></td></tr></table></figure><h2 id="Partitions"><a href="#Partitions" class="headerlink" title="Partitions"></a>Partitions</h2><p>Let’s see what partitions do we have on our system. We can view them with <code>lsblk</code> program.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsblk</span><br></pre></td></tr></table></figure><p>Before we start doing anything, we should remove existing partitions. We can do it with <code>fdisk</code> tool by running it with our main disk as a parameter. Usually it will be <code>/dev/sda</code>, but in my case it was <code>/dev/nvme0n1</code>. We can get this name from <code>lsblk</code> output.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk /dev/nvme0n1</span><br></pre></td></tr></table></figure><h3 id="Removing-existing-partitions"><a href="#Removing-existing-partitions" class="headerlink" title="Removing existing partitions"></a>Removing existing partitions</h3><p>Next, we can choose different options. In our case, we need to choose <code>:d</code> to delete partitions. We need to call this option for each partition.</p><p>Sometimes, we may have problems with installation or removing old partitions. In that case, we can use alternative method of cleaning disk:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sgdisk --zap-all /dev/nvme0n1p1</span><br></pre></td></tr></table></figure><h3 id="Creating-new-partitions"><a href="#Creating-new-partitions" class="headerlink" title="Creating new partitions"></a>Creating new partitions</h3><p>Now, we have to prepare our disk for the future system installation. Our goal is to have the following configuration of the partitions</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nvme0n1     259:0    0   477G  0 disk</span><br><span class="line">├─nvme0n1p1 259:1    0   200M  0 part /boot</span><br><span class="line">├─nvme0n1p2 259:2    0    24G  0 part [SWAP]</span><br><span class="line">├─nvme0n1p3 259:3    0    25G  0 part /</span><br><span class="line">└─nvme0n1p4 259:4    0 427,8G  0 part /home</span><br></pre></td></tr></table></figure><p>This is the output from my current system and <code>nvme0n1</code> is the disk. First partition (<code>nvme0n1p1</code>) is <code>boot</code> partition used during the system boot. Next partition (<code>nvme0n1p2</code>) is a SWAP partition, which acts as an overflow for our RAM memory, when it gets filled up. Third partition (<code>nvme0n1p3</code>) is root partition, which is the root of the file system and programs will be installed there. The last partition (<code>nvme0n1p4</code>) is home partition, where we are going to keep our files.</p><p>In order to create new partition, we have to call <code>fdisk /dev/nvme0n1p1</code> (if we haven’t done it yet).<br>Let’s create boot partition. Type <code>:c</code> for create. We leave first sector empty, hit <kbd>Enter</kbd> in the last sector we put <code>+200M</code> for 200 megabytes, which is recommended value for boot partitoin and confirm it with <kbd>Enter</kbd>. We follow this procedure for SWAP, which should have size = <code>1.5 * size of RAM in computer</code>. I currently have 16GB of RAM, so it’s <code>1.5 * 16 GB = 24 GB</code>, so I put <code>+24G</code> in the last sector. Next, we can create root partition. It should have around <code>+25G</code>. You can decrease it if you have small disk or increase it if you have huge disk and plans to install a lot of programs. In the end, we are creating home partition, where in the last sector option we can just hit <kbd>Enter</kbd> and <code>fdisk</code> will assign remaining disk space to this partition. When we’re done, we should confirm our partition configuration with <code>:w</code> like write. Then, we can type <code>lsblk</code> again to see our written configuration. It should look like in the example above.</p><h3 id="Creating-file-systems"><a href="#Creating-file-systems" class="headerlink" title="Creating file systems"></a>Creating file systems</h3><p>Next, we can to create file systems on our partitions. In general, we can use <code>ext4</code>, which is Linux file system. Some devices may have boot problems or may have specific BIOS setup. In that case, it’s recommended to use <code>FAT32</code> file system. Let’s use <code>mkfs</code> program to create file systems.</p><p>We will create <code>FAT32</code> file system on our boot partition:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.vfat -F32 /dev/nvme0n1p1</span><br></pre></td></tr></table></figure><p>Then, we will create <code>ext4</code> file systems on root and home partitions:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkfs.ext4 /dev/nvme0n1p3</span><br><span class="line">mkfs.ext4 /dev/nvme0n1p4</span><br></pre></td></tr></table></figure><h3 id="Creating-SWAP"><a href="#Creating-SWAP" class="headerlink" title="Creating SWAP"></a>Creating SWAP</h3><p>Now, we can create SWAP on the <code>nvme0n1p2</code> partition:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkswap /dev/nvme0n1p2</span><br></pre></td></tr></table></figure><p>Next, we can turn the SWAP on:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swapon /dev/nvme0n1p2</span><br></pre></td></tr></table></figure><h3 id="Mounting-partitions"><a href="#Mounting-partitions" class="headerlink" title="Mounting partitions"></a>Mounting partitions</h3><p>Right now, we are ready to mount our partitions.</p><p>We can mount the root partition as follows:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/nvme0n1p3 /mnt</span><br></pre></td></tr></table></figure><p>When we list this partition:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /mnt</span><br></pre></td></tr></table></figure><p>we should see <code>lost+found</code> file, which is a generic system file.</p><p>Now on the root partition we can create home and boot directories.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /mnt/home</span><br><span class="line">mkdir /mnt/boot</span><br></pre></td></tr></table></figure><p>and mount our previously created partitions into these dirs:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/nvme0n1p1 /mnt/boot</span><br><span class="line">mount /dev/nvme0n1p4 /mnt/home</span><br></pre></td></tr></table></figure><p>and then we can type <code>lsblk</code> to see that everything is created properly.</p><h2 id="Arch-installation"><a href="#Arch-installation" class="headerlink" title="Arch installation"></a>Arch installation</h2><p>Now, there is an easy part. We have everything prepared and we’re ready to install the operating system. </p><p>Arch can be installed with literally <strong>one command</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacstrap /mnt base</span><br></pre></td></tr></table></figure><p>It’s recommended to install <code>base-devel</code> package, which contains additional software, which may be required to run everything. We can also install <code>vim</code>, to have an editor to edit our configs and other stuff. The final command can look like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacstrap /mnt base base-devel vim</span><br></pre></td></tr></table></figure><h2 id="Creating-fstab"><a href="#Creating-fstab" class="headerlink" title="Creating fstab"></a>Creating fstab</h2><p>We should also create <code>fstab</code> file, which contains information about system drives and mounted partitions and file systems.<br>We can do it as follows:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br></pre></td></tr></table></figure><p>My <code>/etc/fstab</code> file looks like that:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># Static information about the filesystems.</span><br><span class="line"># See fstab(5) for details.</span><br><span class="line"></span><br><span class="line"># &lt;file system&gt; &lt;dir&gt; &lt;type&gt; &lt;options&gt; &lt;dump&gt; &lt;pass&gt;</span><br><span class="line"># /dev/nvme0n1p3</span><br><span class="line">UUID=d94887d0-daff-4a4b-a28a-1de3fdadbb58/         ext4      rw,relatime0 1</span><br><span class="line"></span><br><span class="line"># /dev/nvme0n1p1</span><br><span class="line">UUID=97B8-B124      /boot     vfat      rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=iso8859-1,shortname=mixed,utf8,errors=remount-ro0 2</span><br><span class="line"></span><br><span class="line"># /dev/nvme0n1p4</span><br><span class="line">UUID=75b24330-5ca7-47fc-a6ea-3d4cd826df4d/home     ext4      rw,relatime0 2</span><br><span class="line"></span><br><span class="line"># /dev/nvme0n1p2</span><br><span class="line">UUID=2788826f-9abf-44c7-b2d5-15323be8ba4enone      swap      defaults  0 0</span><br></pre></td></tr></table></figure><h2 id="Operations-inside-the-system"><a href="#Operations-inside-the-system" class="headerlink" title="Operations inside the system"></a>Operations inside the system</h2><h3 id="Changing-root"><a href="#Changing-root" class="headerlink" title="Changing root"></a>Changing root</h3><p>Now, we can change the root:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arch-chroot /mnt</span><br></pre></td></tr></table></figure><p>After typing command above, we jumped from the bootable USB drive into the operating system installed on the disk of our computer. </p><p>Now, we’re able to perform operations inside the system.</p><h3 id="Installing-network-manager"><a href="#Installing-network-manager" class="headerlink" title="Installing network manager"></a>Installing network manager</h3><p>First of all, we should install network manger via <code>pacman</code> to have network and Internet connectivity:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S networkmanager</span><br></pre></td></tr></table></figure><p>to enable network manager, we can type:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable NetworkManager</span><br></pre></td></tr></table></figure><h3 id="Installing-GRUB"><a href="#Installing-GRUB" class="headerlink" title="Installing GRUB"></a>Installing GRUB</h3><p>We also have to install GRUB, which will be responsible for booting our operating system:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S grub</span><br></pre></td></tr></table></figure><p>Next, we have to configure it:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub-install --target=i386-pc /dev/nvme0n1</span><br></pre></td></tr></table></figure><p>Please note, we provided path to the disk (drive) - not the partition.</p><p>Next, we should create <code>/boot/grub/grub.cfg</code> configuration file:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><h3 id="Setting-password"><a href="#Setting-password" class="headerlink" title="Setting password"></a>Setting password</h3><p>to set the password, we can just type:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure><h3 id="Setting-locale"><a href="#Setting-locale" class="headerlink" title="Setting locale"></a>Setting locale</h3><p>To set locale, we need to edit <code>/etc/locale.gen</code> (e.g. via vim) and uncomment desired locales (one or more).</p><p>In my case I uncommented:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pl_PL.UTF-8</span><br><span class="line">pl_PL ISO-8859-2</span><br><span class="line">en_US.UTF-8</span><br><span class="line">en_US ISO-88591</span><br></pre></td></tr></table></figure><p>becasue I wanted to use both Polish and English language.</p><p>Now, we can type:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locale-gen</span><br></pre></td></tr></table></figure><p>To set default locale, we have to edit <code>/etc/locale.conf</code> and set <code>LANG</code> variable as follows:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure><p>Of course, we can set <code>pl_PL.UTF-8</code> too or any other language we want to use as default system language. I personally use English as a OS language, bacause it’s easier to diagnose possible issues, when you have English messages in terminal. Nevertheles, I use Polish as an input language, to be able to use Polish letters, european metric system, Polish currency, etc. It should be adjusted to our needs.</p><h3 id="Setting-timezone"><a href="#Setting-timezone" class="headerlink" title="Setting timezone"></a>Setting timezone</h3><p>You can browse time zones in <code>/usr/share/zoneinfo</code> directory. To set our time zone, we need to create a symbolic lin between desired time zone and <code>/etc/localtime</code> file. Once we change our time zone, we can create a symbolic link again.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -sf /usr/share/zoneinfo/Europe/Warsaw /etc/localtime</span><br></pre></td></tr></table></figure><p>My time zone is Warsaw in Europe, but you can set your own time zone here.</p><h3 id="Setting-hostname"><a href="#Setting-hostname" class="headerlink" title="Setting hostname"></a>Setting hostname</h3><p>To create our <code>hostname</code>, which is name of the computer, we can edit <code>/etc/hostname</code> file and put our name there.</p><p>My hostname is <code>arch</code>.</p><h2 id="Finalization"><a href="#Finalization" class="headerlink" title="Finalization"></a>Finalization</h2><h3 id="Unmounting-file-systems"><a href="#Unmounting-file-systems" class="headerlink" title="Unmounting file systems"></a>Unmounting file systems</h3><p>Before we reboot our computer, we should unmount partitions:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umount -R /mnt</span><br></pre></td></tr></table></figure><h3 id="Rebooting"><a href="#Rebooting" class="headerlink" title="Rebooting"></a>Rebooting</h3><p>To reboot computer, we can just type:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><h2 id="What’s-next"><a href="#What’s-next" class="headerlink" title="What’s next?"></a>What’s next?</h2><p>Once, our computer will be restarted, GRUB should boot our operating system and we should see the black screen with white letters and command prompt. It means, everything went fine, our system is installed and booted! Now, we’re ready to install other sutff (e.g. Desktop Environment or Window Manager). We can also leave it without GUI, if our computer has really low specs or when we’re planning to use this machine as a server or something like that.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>To wrap up, installing Arch is not trivial and requires some proficiency with Linux and terminal. Neverhteless, once you have some basics, it’s no that hard as we can expect. In addition, we have great documentation and resources on the web about it. Going through this process can be nice lesson. You can see, how much stuff automatic installers are doing for us. Moreover, we can totally adjust system to our needs. We don’t need to have a bloat of not necessary packages and programs like we have on Ubuntu. We can install exactly what we need and track our packages. I haven’t mentioned it before, but Arch has rolling release system. It means, there are no huge system updates like in Ubuntu, Windows or macOS. We can gradually update our system by installing small amount of single packages and our system can be up to date basically everyday. I’m using Arch for a few weeks for now and it seems to be one of the best and most stable operating systems I have used so far. It’s quite hard to break something on this system until you explicitly break it (e.g. by typing into terminal commands you don’t understand). It’s also light-weight and customizable. I cannot recommend this system to people who are not familiar with Linux, don’t like to play with computers and software, don’t want to fix stuff for themselves, customize system etc., but if you’re are not in this group, this OS may be for you. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;For a long time, I was conside
      
    
    </summary>
    
    
    
      <category term="linux" scheme="http://wittchen.io/tags/linux/"/>
    
      <category term="arch" scheme="http://wittchen.io/tags/arch/"/>
    
      <category term="install" scheme="http://wittchen.io/tags/install/"/>
    
  </entry>
  
  <entry>
    <title>Zen of the Java library release process</title>
    <link href="http://wittchen.io/zen-of-java-library-release-process/"/>
    <id>http://wittchen.io/zen-of-java-library-release-process/</id>
    <published>2019-06-08T08:58:10.000Z</published>
    <updated>2019-07-03T22:51:02.816Z</updated>
    
    <content type="html"><![CDATA[<p>In my <a href="/publishing-jar-aar-to-maven-central/">previous article</a> I published information about publishing JAR/AAR library to the Maven Central Repository. A few steps of that process were automated, but a few of them were still manual. I mean closing and release process which had to be done by manual clicking on the Sonatype website. Fortunately, it’s possible to automate it. In order to do that, I used <a href="https://github.com/Codearte/gradle-nexus-staging-plugin" target="_blank" rel="noopener">gradle-nexus-staging-plugin</a> developed by <a href="https://github.com/Codearte" target="_blank" rel="noopener">Codearte</a>. Thanks to this plugin I could get rid of the remaining manual steps left in the release process. </p><p><strong>Please note</strong>, if you want to apply configuration described in this article to your project, you need to perform the steps described in the article about <a href="/publishing-jar-aar-to-maven-central/">Publishing JAR/AAR to the Maven Central</a>.</p><p>In my project, in the top-level <a href="https://github.com/pwittchen/ReactiveNetwork/blob/RxJava2.x/build.gradle" target="_blank" rel="noopener">build.gradle</a> file I had to do the following setup:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'io.codearte.nexus-staging'</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">  <span class="keyword">repositories</span> &#123;</span><br><span class="line">    google()</span><br><span class="line">    jcenter()</span><br><span class="line">    mavenCentral()</span><br><span class="line">    maven &#123;</span><br><span class="line">      url <span class="string">'https://plugins.gradle.org/m2/'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">dependencies</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">classpath</span> <span class="string">"io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.12.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> getRepositoryUsername() &#123;</span><br><span class="line">  <span class="keyword">return</span> hasProperty(<span class="string">'NEXUS_USERNAME'</span>) ? NEXUS_USERNAME : <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> getRepositoryPassword() &#123;</span><br><span class="line">  <span class="keyword">return</span> hasProperty(<span class="string">'NEXUS_PASSWORD'</span>) ? NEXUS_PASSWORD : <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nexusStaging &#123;</span><br><span class="line">  packageGroup = <span class="keyword">GROUP</span> <span class="comment">//optional if packageGroup == project.getGroup()</span></span><br><span class="line">  stagingProfileId = <span class="string">"YOUR_STAGING_PROFILE"</span> <span class="comment">//when not defined will be got from server using "packageGroup"</span></span><br><span class="line">  username = getRepositoryUsername()</span><br><span class="line">  password = getRepositoryPassword()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In order to get <code>YOUR_STAGING_PROFILE</code>, we need to call the following command available in the plugin:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew getStagingProfile</span><br></pre></td></tr></table></figure><p>When we are done, we can simply call:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew uploadArchives closeAndReleaseRepository</span><br></pre></td></tr></table></figure><p>These two gradle tasks will upload our artifact, close and release it, so we won’t have to perform any manual steps in that process. After that, we just need to wait for the Maven sync as usual.</p><p>My complete <code>release.sh</code> script looks like that:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line">./gradlew clean build <span class="built_in">test</span> check uploadArchives closeAndReleaseRepository</span><br></pre></td></tr></table></figure><p>Before upload and release, I also clean everything, build an artifact, run tests and static code analysis. It’s not required, but it’s good to do that.</p><p>If you are interested in complete project configuration, you can have a look at the <a href="https://github.com/pwittchen/ReactiveNetwork" target="_blank" rel="noopener">https://github.com/pwittchen/ReactiveNetwork</a> repository. It’s an Android library, but the same configuration can be applied to any JVM project built with Gradle. I have performed library release with this plugin a few times and it seems to work well.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In my &lt;a href=&quot;/publishing-jar-aar-to-maven-central/&quot;&gt;previous article&lt;/a&gt; I published information about publishing JAR/AAR library to th
      
    
    </summary>
    
    
    
      <category term="java" scheme="http://wittchen.io/tags/java/"/>
    
      <category term="gradle" scheme="http://wittchen.io/tags/gradle/"/>
    
      <category term="open-source" scheme="http://wittchen.io/tags/open-source/"/>
    
      <category term="library" scheme="http://wittchen.io/tags/library/"/>
    
      <category term="release" scheme="http://wittchen.io/tags/release/"/>
    
  </entry>
  
  <entry>
    <title>Publishing a JAR/AAR to the Maven Central</title>
    <link href="http://wittchen.io/publishing-jar-aar-to-maven-central/"/>
    <id>http://wittchen.io/publishing-jar-aar-to-maven-central/</id>
    <published>2019-05-24T17:18:27.000Z</published>
    <updated>2019-07-03T22:51:02.813Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>As a Java/JVM/Android developers we rely on the work of other people through frameworks and libraries. Many of them are open-source. Most of the developers are consumers of such projects. What if we would like to create our own library and distribute it to other developers? We can always create it and share a <code>*.jar</code> or <code>*.aar</code> file with others. Drawback of such solution is the fact that source of distribution may not be trusted. We also have problems with versioning. Consumers of the library have to constantly download and update their files. It’s much better to publish our library to Maven Central Repository and allow others to easily and seamlessly add it as an external dependency to <code>pom.xml</code> file (in case of Maven) or <code>build.gradle</code> file (in case of Gradle). In such case, dependency is managed by the appropriate build system and distributed via trusted source. This may be not easy for the first time that’s why I decided to collect information related to this topic in a single article. Let’s see how to do this.</p><h2 id="Generating-a-GPG-Key"><a href="#Generating-a-GPG-Key" class="headerlink" title="Generating a GPG Key"></a>Generating a GPG Key</h2><p>Before we upload library, we need to generate GPG key.</p><p>In order to generate GPG key, we need to open the terminal and type the following command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg2 --gen-key</span><br></pre></td></tr></table></figure><p>Then, we should see the output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">gpg: key YOUR_KEY_ID marked as ultimately trusted</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Read more at: <a href="https://alexcabal.com/creating-the-perfect-gpg-keypair" target="_blank" rel="noopener">https://alexcabal.com/creating-the-perfect-gpg-keypair</a></p><h2 id="Distributing-the-public-key"><a href="#Distributing-the-public-key" class="headerlink" title="Distributing the public key"></a>Distributing the public key</h2><p>Next, we need to distribute public key. We can do that as follows:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --keyserver hkp://pool.sks-keyservers.net --send-keys YOUR_KEY_ID</span><br></pre></td></tr></table></figure><p>We can distribute our key to multiple servers to speed up the synchronization process (pgp.mit.edu, keyserver.ubuntu.com, etc.)</p><p>We can also list our keys as follows:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg2 --list-keys</span><br></pre></td></tr></table></figure><p>To list secret keys, we can type:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg2 --list-secret-keys</span><br></pre></td></tr></table></figure><h2 id="Preparing-the-Gradle-configuration"><a href="#Preparing-the-Gradle-configuration" class="headerlink" title="Preparing the Gradle configuration"></a>Preparing the Gradle configuration</h2><p>In my case, I used Gradle as a build system, which works well for Java, Kotlin and Android projects. We can use Maven for this purpose as well. As a reference, I used <a href="https://github.com/chrisbanes/gradle-mvn-push" target="_blank" rel="noopener">a Gradle script prepared by Chris Banes</a>. You can have a look at it in <a href="https://github.com/pwittchen/ReactiveNetwork/blob/RxJava2.x/maven_push.gradle" target="_blank" rel="noopener">one of my projects</a>.</p><p>In my libraries, I usually have the following structure:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/</span><br><span class="line">├── library</span><br><span class="line">│   ├── gradle.properties</span><br><span class="line">│   └── build.gradle</span><br><span class="line">│</span><br><span class="line">├── build.gradle</span><br><span class="line">├── maven_push.gradle</span><br><span class="line">└── gradle.properties</span><br></pre></td></tr></table></figure><p>In <code>maven_push.gradle</code> I keep the mentioned release script. In the <code>library/gradle.properties</code>, I keep details about artifact released from a given directory:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POM_NAME=reactivenetwork</span><br><span class="line">POM_ARTIFACT_ID=reactivenetwork-rx2</span><br><span class="line">POM_PACKAGING=aar</span><br></pre></td></tr></table></figure><p>It can be <code>jar</code> if you’re releasing pure Java library. Here’s an example for Android library.</p><p>In the <code>/gradle.properties</code> file, I keep release configuration:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">VERSION_NAME=3.0.3</span><br><span class="line">VERSION_CODE=34</span><br><span class="line">GROUP=com.github.pwittchen</span><br><span class="line"></span><br><span class="line">POM_DESCRIPTION=Android library listening network connection state and Internet connectivity with RxJava Observables</span><br><span class="line">POM_URL=https://github.com/pwittchen/ReactiveNetwork</span><br><span class="line">POM_SCM_URL=https://github.com/pwittchen/ReactiveNetwork</span><br><span class="line">POM_SCM_CONNECTION=scm:git@github.com:pwittchen/ReactiveNetwork.git</span><br><span class="line">POM_SCM_DEV_CONNECTION=scm:git@github.com:pwittchen/ReactiveNetwork.git</span><br><span class="line">POM_LICENCE_NAME=The Apache Software License, Version 2.0</span><br><span class="line">POM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt</span><br><span class="line">POM_LICENCE_DIST=repo</span><br><span class="line">POM_DEVELOPER_ID=pwittchen</span><br><span class="line">POM_DEVELOPER_NAME=Piotr Wittchen</span><br><span class="line"></span><br><span class="line">org.gradle.daemon=true</span><br><span class="line">org.gradle.jvmargs=-XX:MaxPermSize=1024m -XX:+CMSClassUnloadingEnabled -XX:+HeapDumpOnOutOfMemoryError -Xmx2048m</span><br></pre></td></tr></table></figure><p>In the <code>library/build.gradle</code> file I need to include release Gradle script:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apply from: &apos;../maven_push.gradle&apos;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>In the <code>$HOME/.gradle/gradle.properties</code> file, I keep system-wide release configuration for Sonatype:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">signing.keyId=YOUR_KEY_ID</span><br><span class="line">signing.password=YOUR_SIGNING_PASSWORD</span><br><span class="line">signing.secretKeyRingFile=/home/piotr/.gnupg/secring.gpg</span><br><span class="line"> </span><br><span class="line">NEXUS_USERNAME=YOUR_NEXUS_USERNAME</span><br><span class="line">NEXUS_PASSWORD=YOUR_NEXUS_PASSWORD</span><br></pre></td></tr></table></figure><p><code>YOUR_NEXUS_USERNAME</code> and <code>YOUR_NEXU_PASSWORD</code> can be defined during account creation on the <a href="http://oss.sonatype.org" target="_blank" rel="noopener">http://oss.sonatype.org</a> website.</p><p>Of course, you need to provide your own path to <code>secretKeyRingFile</code>, which was created during generating key.</p><p>If you’re interested in the complete project structure prepared for library release, you can have a look at the following examples:</p><ul><li>Java library (compiled into <code>*.jar</code> file): <a href="https://github.com/pwittchen/kirai" target="_blank" rel="noopener">https://github.com/pwittchen/kirai</a></li><li>Android library written in Java (compiled into <code>*.aar</code> file): <a href="https://github.com/pwittchen/ReactiveNetwork" target="_blank" rel="noopener">https://github.com/pwittchen/ReactiveNetwork</a></li><li>Android library written in Kotlin (compiled into <code>*.aar</code> file): <a href="https://github.com/pwittchen/RxBiometric" target="_blank" rel="noopener">https://github.com/pwittchen/RxBiometric</a></li></ul><h2 id="Creating-a-Jira-ticket-for-Sonatype"><a href="#Creating-a-Jira-ticket-for-Sonatype" class="headerlink" title="Creating a Jira ticket for Sonatype"></a>Creating a Jira ticket for Sonatype</h2><p>We should create a <a href="https://issues.sonatype.org/secure/Signup!default.jspa" target="_blank" rel="noopener">Sonatype Jira account</a> and <a href="https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&pid=10134" target="_blank" rel="noopener">a new project ticket</a>. You can have a look at <a href="https://issues.sonatype.org/browse/OSSRH-13199" target="_blank" rel="noopener">my first issue</a>. It took a bit longer in my case, because I needed to adjust package name. </p><p>To avoid my mistakes, have a look at the following guides:</p><ul><li><a href="https://central.sonatype.org/pages/ossrh-guide.html" target="_blank" rel="noopener">https://central.sonatype.org/pages/ossrh-guide.html</a></li><li><a href="https://central.sonatype.org/pages/choosing-your-coordinates.html" target="_blank" rel="noopener">https://central.sonatype.org/pages/choosing-your-coordinates.html</a></li></ul><p>Please note, this step is required for the first time only as well as generating keys. After that, we we’ll be able to release as many artifacts under the given package name as we want. These steps need to be repeated in the case of registering the new package name.</p><p>This is reasonable from the security and stability perspective because random people cannot just override widely used packages what might cause serious problems in many projects around the world.</p><h2 id="Uploading-an-artifact"><a href="#Uploading-an-artifact" class="headerlink" title="Uploading an artifact"></a>Uploading an artifact</h2><p>Once, we have everything set up, we can go to our project via terminal, and type:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew uploadArchives</span><br></pre></td></tr></table></figure><p>and wait while artifacts are being uploaded.</p><h2 id="Releasing-an-artifact"><a href="#Releasing-an-artifact" class="headerlink" title="Releasing an artifact"></a>Releasing an artifact</h2><p>Next, we need to go to the <a href="http://oss.sonatype.org" target="_blank" rel="noopener">http://oss.sonatype.org</a> website, log in and on the left-hand side, click “Staging Repositories”. Then, we need to sort artifacts by date (Updated column), to view the recently updated items. We should find our artifact (it should be on the top) and click it. We can verify its contents to ensure that everything is ok (package name, version, etc.) and then, we should press “Release” on our artifact. Once release is done, we should press “Close” on the artifact.</p><h2 id="Commenting-the-Jira-ticket"><a href="#Commenting-the-Jira-ticket" class="headerlink" title="Commenting the Jira ticket"></a>Commenting the Jira ticket</h2><p>When we are done with the previous steps, we should go back to our Jira ticket and provide the comment:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I have promoted my first release. Thanks.</span><br></pre></td></tr></table></figure><h2 id="Waiting-for-the-Maven-sync"><a href="#Waiting-for-the-Maven-sync" class="headerlink" title="Waiting for the Maven sync"></a>Waiting for the Maven sync</h2><p>After all of these steps, we need to wait for the acceptance from the people from Sonatype and Maven Sync. Maven Sync can take no longer than 48 hours. It’s usually faster, but it won’t happen immediately after releasing and closing an artifact like in the release of the Python packages.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>We can see, that release process may be overwhelming and time consuming, but <strong>once we release the first artifact, we can skip most of these steps</strong> like generating keys and creating Jira ticket. We just need to have Gradle or Maven configuration, upload artifacts, release and close them via sonatype website and wait for the Maven Sync. Process of releasing new versions of the same artifact is the same as the first release (excluding mentioned first-time steps). During the next release, we simply need to bump library version in the Gradle configuration before uploading artifacts. In the future, I’m planning to write another article, which shows how to skip manual steps of going to Sonatype website and releasig artifacts via clicking on the page via Gradle plugins, so everything will be automated via CLI.</p><h2 id="Links-and-references"><a href="#Links-and-references" class="headerlink" title="Links and references"></a>Links and references</h2><ul><li><a href="https://stackoverflow.com/questions/28846802/how-to-manually-publish-jar-to-maven-central" target="_blank" rel="noopener">https://stackoverflow.com/questions/28846802/how-to-manually-publish-jar-to-maven-central</a></li><li><a href="https://chris.banes.dev/2013/08/27/pushing-aars-to-maven-central/" target="_blank" rel="noopener">https://chris.banes.dev/2013/08/27/pushing-aars-to-maven-central/</a></li><li><a href="https://dzone.com/articles/deploy-maven-central" target="_blank" rel="noopener">https://dzone.com/articles/deploy-maven-central</a></li><li><a href="https://central.sonatype.org/pages/gradle.html" target="_blank" rel="noopener">https://central.sonatype.org/pages/gradle.html</a></li><li><a href="https://central.sonatype.org/pages/apache-maven.html" target="_blank" rel="noopener">https://central.sonatype.org/pages/apache-maven.html</a></li><li><a href="https://central.sonatype.org/pages/working-with-pgp-signatures.html" target="_blank" rel="noopener">https://central.sonatype.org/pages/working-with-pgp-signatures.html</a></li><li><a href="https://alexcabal.com/creating-the-perfect-gpg-keypair" target="_blank" rel="noopener">https://alexcabal.com/creating-the-perfect-gpg-keypair</a></li><li><a href="https://central.sonatype.org/pages/ossrh-guide.html" target="_blank" rel="noopener">https://central.sonatype.org/pages/ossrh-guide.html</a></li><li><a href="https://central.sonatype.org/pages/choosing-your-coordinates.html" target="_blank" rel="noopener">https://central.sonatype.org/pages/choosing-your-coordinates.html</a></li><li><a href="https://gist.github.com/diegopacheco/13c0754f0ab36482f4f804ef3f05f989" target="_blank" rel="noopener">https://gist.github.com/diegopacheco/13c0754f0ab36482f4f804ef3f05f989</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;As a Java/JVM/Android develope
      
    
    </summary>
    
    
    
      <category term="java" scheme="http://wittchen.io/tags/java/"/>
    
      <category term="gradle" scheme="http://wittchen.io/tags/gradle/"/>
    
      <category term="open-source" scheme="http://wittchen.io/tags/open-source/"/>
    
      <category term="maven" scheme="http://wittchen.io/tags/maven/"/>
    
      <category term="sonatype" scheme="http://wittchen.io/tags/sonatype/"/>
    
  </entry>
  
  <entry>
    <title>Kyma meets CCV2 hackathon summary</title>
    <link href="http://wittchen.io/kyma-meets-ccv2-hackathon-summary/"/>
    <id>http://wittchen.io/kyma-meets-ccv2-hackathon-summary/</id>
    <published>2018-12-14T13:34:01.000Z</published>
    <updated>2019-07-03T22:51:02.813Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>I recently I had an opportunity to join “Kyma meets CCV2 Hackathon” in the <a href="https://www.sap.com/poland/index.html" target="_blank" rel="noopener">SAP Labs Poland</a> office in Gliwice. The goal of the hackathon was to create a simple project, which will use <a href="https://github.com/kyma-project/kyma" target="_blank" rel="noopener">Kyma</a> to integrate external services with the <a href="https://cx.sap.com/en/products/commerce" target="_blank" rel="noopener">SAP Hybris Commerce Platform</a>. CCV2 stands for “Commerce Cloud Version 2”, which are basically SAP Hybris Commerce solutions deployed on the MS Azure Cloud (that’s a long story described in a short way). I joined a team consisting of people from a few different departments in the office, so we didn’t actually know each other before the event. We decided to create a simple application consisting of a few microservices, which will send an e-mail with a promotional link to the user once he or she add something to the cart in the on-line shop. After clicking on the link sent via the e-mail, user will be redirected to the front-end application, where he or she has to click on the button as many times as possible in a given period of time.</p><p><img src="/images/posts/2018/kyma-meets-ccv2-hackathon-summary/clickr_frontend.png" alt></p><p>The more clicks were performed, the higher discount user will get, but not higher than 20%. When game is finished, front-end application is sending a request to the voucher service from which we can retrieve a promotional code. </p><p><img src="/images/posts/2018/kyma-meets-ccv2-hackathon-summary/clickr_frontend2.png" alt></p><p>With this code, we can go to the SAP Hybris Commerce store-front…</p><p><img src="/images/posts/2018/kyma-meets-ccv2-hackathon-summary/storefront1.png" alt></p><p>…and get our discount!</p><p><img src="/images/posts/2018/kyma-meets-ccv2-hackathon-summary/storefront2.png" alt></p><h2 id="Application-overview"><a href="#Application-overview" class="headerlink" title="Application overview"></a>Application overview</h2><p>General concept of the application flow is presented on the diagram below.</p><p><img src="/images/posts/2018/kyma-meets-ccv2-hackathon-summary/diagram.png" alt></p><p>We decided to create three microservices:</p><ul><li>mailing service written in Node.js</li><li>front-end application with clicking game written in JavaScript</li><li>voucher service written in Kotlin</li></ul><p>All microservices needed to have corresponsing Docker containers, which were deployed to the Kyma instance. Kyma was communicating with SAP Hybris Commerce platform written in Java. Thanks to clear separation of a different environments, we were able to integrate services using different technologies.</p><h2 id="Creating-a-microservice"><a href="#Creating-a-microservice" class="headerlink" title="Creating a microservice"></a>Creating a microservice</h2><p>I was responsible for writing voucher storage microservice. On daily basis I use Java programming language, but I wanted to try something new, so I chose Kotlin. Kotlin is a JVM language, so it runs on the same runtime as regular Java applications. Moreover, I could use tools I’m familiar with like IntelliJ, Gradle, etc. In my microservice I used <a href="https://gradle.org/" target="_blank" rel="noopener">Gradle</a> as a build tool, <a href="http://javalin.io/" target="_blank" rel="noopener">Javalin</a> for designing REST API and <a href="https://github.com/google/dagger" target="_blank" rel="noopener">Dagger</a> for Dependency Injection. Moreover, for writing unit tests I used <a href="https://junit.org" target="_blank" rel="noopener">JUnit</a>, <a href="https://github.com/Pragmatists/JUnitParams" target="_blank" rel="noopener">JUnitParams</a>, <a href="https://github.com/google/truth" target="_blank" rel="noopener">Truth</a> and <a href="https://github.com/mockito/mockito" target="_blank" rel="noopener">Mockito</a>. I also wrote a few integration tests for the API with <a href="https://github.com/rest-assured/rest-assured" target="_blank" rel="noopener">REST Assured</a>. As you can see, I could easily use Java libraries in the Kotlin application because those two languages are fully interoperable.</p><p>REST API definition of my application looks pretty simple:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">  <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> logger = LoggerFactory.getLogger(Application::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> component = DaggerApplicationComponent.create()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> voucherController = component.voucherController()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> voucherHttpFacade = component.voucherHttpFacade()</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JvmStatic</span> <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">      Javalin</span><br><span class="line">          .create()</span><br><span class="line">          .enableCorsForAllOrigins()</span><br><span class="line">          .requestLogger &#123; ctx, time -&gt;</span><br><span class="line">            logger.info(<span class="string">"<span class="subst">$&#123;ctx.method()&#125;</span> <span class="subst">$&#123;ctx.path()&#125;</span> <span class="subst">$&#123;ctx.status()&#125;</span> took <span class="variable">$time</span> ms"</span>)</span><br><span class="line">          &#125;.routes &#123;</span><br><span class="line">            <span class="keyword">get</span>(<span class="string">"/voucher"</span>) &#123; voucherHttpFacade.getAll(it) &#125;</span><br><span class="line">            <span class="keyword">get</span>(<span class="string">"/voucher/:group"</span>) &#123; voucherHttpFacade.getGroup(it) &#125;</span><br><span class="line">            <span class="keyword">get</span>(<span class="string">"/health"</span>) &#123; it.json(Health(<span class="string">"UP"</span>)).status(HttpStatus.OK_200) &#125;</span><br><span class="line">            <span class="keyword">get</span>(<span class="string">"/"</span>) &#123; it.status(HttpStatus.FORBIDDEN_403) &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          .event(JavalinEvent.SERVER_STARTING) &#123; voucherController.loadVouchers() &#125;</span><br><span class="line">          .start(<span class="number">7000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I have an endpoint for gathering all vouchers, gathering single voucher for a given group and deactivating it and health-check. In addition, I’m loading all the vouchers into the application memory on the server startup using <a href="https://kotlinlang.org/docs/reference/coroutines-overview.html" target="_blank" rel="noopener">Kotlin coroutine</a> under the hood asynchronously.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">loadVouchers</span><span class="params">()</span></span> &#123;</span><br><span class="line">  GlobalScope.async &#123; loadVouchersFromAllGroups() &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Application can be build with Gradle as follows:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew build</span><br></pre></td></tr></table></figure><p>I’m using <a href="https://github.com/johnrengelman/shadow" target="_blank" rel="noopener">Shadow Gradle plugin</a> to create fat jar. Once, build is finished, I can start the application with embdedded Jetty HTTP server on the port 7000.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar build/libs/app-1.0-all.jar</span><br></pre></td></tr></table></figure><p>You can find source code of the whole application at: <a href="https://github.com/pwittchen/voucher-storage-service" target="_blank" rel="noopener">https://github.com/pwittchen/voucher-storage-service</a>.</p><h2 id="Deployment-of-the-microservice"><a href="#Deployment-of-the-microservice" class="headerlink" title="Deployment of the microservice"></a>Deployment of the microservice</h2><p>In order to deploy the microservice to the Kyma, I needed to prepare <code>Dockerfile</code>, which looks as follows:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jre-alpine</span><br><span class="line"><span class="keyword">MAINTAINER</span> pwittchen</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> build/libs/app-1.0-all.jar .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ls -la /app</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> java -jar app-1.0-all.jar</span></span><br></pre></td></tr></table></figure><p>It’s just a lightweight Alpine Linux with Java 8 and Kotlin application compiled into fat jar.</p><p>To build the container, I invoked command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker build -t pwittchen/voucher-storage-service .</span><br></pre></td></tr></table></figure><p>and to run it, I invoked command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -p 127.0.0.1:7000:7000 -t pwittchen/voucher-storage-service</span><br></pre></td></tr></table></figure><p>I also pushed it to the <a href="https://hub.docker.com/r/pwittchen/voucher-storage-service/" target="_blank" rel="noopener">docker hub</a> because Kyma gets required containers from there.</p><p>Next, I created <code>deployment.yml</code> file for Kubernetess, which is used by Kyma under the hood.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">voucher-storage-service</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">voucher-storage-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">voucher-storage-service</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">voucher-storage-service</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">          image:</span> <span class="string">docker.io/pwittchen/voucher-storage-service:latest</span></span><br><span class="line"><span class="attr">          ports:</span></span><br><span class="line"><span class="attr">            - containerPort:</span> <span class="number">7000</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">voucher-storage-service</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">voucher-storage-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">7000</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">voucher-storage-service</span></span><br></pre></td></tr></table></figure><p>Such configuration had to be provided for Kyma by all microservices.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Once, we deployed all the microservices and tested the whole flow, we needed to apply a few adjustments. When issues were fixed, whole application worked correctly. This proves that external services written in different technologies can be integrated with SAP Hybris Commerce using Kyma. This hackathon was pretty nice experience, learning opportunity and productive distraction from daily projects. Moreover, our team won the whole event ex aequo with another team located in Germany. Thanks to this hackathon, I have better understanding of Kyma and integration tooling for the SAP Hybris Commerce platform.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;I recently I had an opportunit
      
    
    </summary>
    
    
    
      <category term="hybris" scheme="http://wittchen.io/tags/hybris/"/>
    
      <category term="hackathon" scheme="http://wittchen.io/tags/hackathon/"/>
    
      <category term="kotlin" scheme="http://wittchen.io/tags/kotlin/"/>
    
      <category term="kyma" scheme="http://wittchen.io/tags/kyma/"/>
    
      <category term="sap" scheme="http://wittchen.io/tags/sap/"/>
    
  </entry>
  
  <entry>
    <title>Brain-Computer Interfaces - Science Fiction or Reality?</title>
    <link href="http://wittchen.io/bci-sci-fi-or-reality-oredev-2018/"/>
    <id>http://wittchen.io/bci-sci-fi-or-reality-oredev-2018/</id>
    <published>2018-11-21T20:59:06.000Z</published>
    <updated>2019-07-03T22:51:02.810Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, I had an opportunity to speak at the software development conference abroad for the first time. I visited Malmö in Sweden and gave a talk during the <a href="http://oredev.org/" target="_blank" rel="noopener">Øredev</a> 2018 conference. The main theme of the conference was Deus Ex Machina, so I decided to adapt to this topic and prepared presentation about Brain-Computer Interfaces, which is my interest since the end of my studies at the Silesian University of Technology where I wrote a Master Thesis about similar topic. Before the conference, I prepared the same presentation in Polish during the SAP Lunch Talks for the colleagues from my company in Gliwice, Poland.</p><script async class="speakerdeck-embed" data-id="0d3626bc99734bf1b7d6468960bbb523" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><h2 id="Interactions-with-the-audience"><a href="#Interactions-with-the-audience" class="headerlink" title="Interactions with the audience"></a>Interactions with the audience</h2><p>After my presentation people sent tweets on the web and even made really nice notes!</p><ul><li><a href="https://twitter.com/roshan_khan/status/1064559411199467520" target="_blank" rel="noopener">https://twitter.com/roshan_khan/status/1064559411199467520</a></li><li><a href="https://twitter.com/katrina_tester/status/1064560075786866688" target="_blank" rel="noopener">https://twitter.com/katrina_tester/status/1064560075786866688</a></li></ul><p>I was impressed by that!</p><p>Except for interactions on the web, I got a few interesting questions from the audience during the Q&amp;A session and after the presentation. Moreover, people were willing to talk about the subject of the presentation during the conference what was really nice and shown their interest in this area. If you didn’t have an opportunity to see this presentation, but you are interested in watching it, it should be available on YouTube on the <a href="https://www.youtube.com/channel/UC0XtR2kcXnqtfrGSsxM8oAg" target="_blank" rel="noopener">Øredev Channel</a> and I’ll add appropriate link on the <a href="http://wittchen.io/talks/">talks</a> page on this website once I get it.</p><h2 id="Experiences-from-the-conference"><a href="#Experiences-from-the-conference" class="headerlink" title="Experiences from the conference"></a>Experiences from the conference</h2><p>Attending such international event as a speaker was really interesting experience, which broadens my mind. I met nice and interesting people from different countries all over the world. There was also some time to <a href="https://twitter.com/KevinMost7/status/1064158140143419394" target="_blank" rel="noopener">grab local craft beers and talk with other speakers</a>. Organization and logistics of the conference were really good. Conference organizers covered costs of the flights, accommodation and organised everything in advance. Moreover, there were additional activities for speakers like sauna, dinner and meeting in the city hall of Malmö. There was also a party and performance in the end of the second day for all attendees. Breaks between the sessions were fine (around 20-30 minutes), so people didn’t have to rush from one room to another. There were 7 concurrent sessions on 2 floors. Technicians in the rooms also did great job and everything worked without any problems. It’s worth mentioning that food was quite good and healthy what is not usual thing during IT conferences. I also attended talks of other speakers and I can tell that there was wide variety of topics: programming, AR, VR, mathematics, JVM, new programming languages (e.g. Unison), UX, Mobile, Music, Security, Machine Learning, AI, Biohacking, Art, etc. Presenters were well prepered and most of the presentations I attended were interesting and entertaining. There were also discussion panels where audience could ask questions. This form of sharing knowledge and opinions was good addition to regular talks. To sum up, I had to put some effort and spend some time during my preparations and sending call for papers, but in general it was good decision to join this event. I can recommend it to everyone interested in IT.</p><h2 id="References-and-links"><a href="#References-and-links" class="headerlink" title="References and links"></a>References and links</h2><ul><li><a href="https://github.com/pwittchen/neurosky-android-sdk" target="_blank" rel="noopener">https://github.com/pwittchen/neurosky-android-sdk</a></li><li><a href="https://github.com/pwittchen/EEGReader" target="_blank" rel="noopener">https://github.com/pwittchen/EEGReader</a></li><li><a href="http://wittchen.io/tags/bci/">http://wittchen.io/tags/bci/</a></li><li><a href="https://speakerdeck.com/pwittchen/brain-computer-interfaces-science-fiction-or-reality" target="_blank" rel="noopener">https://speakerdeck.com/pwittchen/brain-computer-interfaces-science-fiction-or-reality</a></li><li><a href="https://play.google.com/store/apps/details?id=com.pwittchen.eeganalyzer" target="_blank" rel="noopener">https://play.google.com/store/apps/details?id=com.pwittchen.eeganalyzer</a></li><li><a href="http://developer.choosemuse.com/" target="_blank" rel="noopener">http://developer.choosemuse.com/</a></li><li><a href="http://developer.neurosky.com/" target="_blank" rel="noopener">http://developer.neurosky.com/</a></li><li><a href="https://en.wikipedia.org/wiki/Brain%E2%80%93computer_interface" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Brain%E2%80%93computer_interface</a></li><li><a href="http://oredev.org/" target="_blank" rel="noopener">http://oredev.org/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently, I had an opportunity to speak at the software development conference abroad for the first time. I visited Malmö in Sweden and g
      
    
    </summary>
    
    
    
      <category term="bci" scheme="http://wittchen.io/tags/bci/"/>
    
      <category term="conferences" scheme="http://wittchen.io/tags/conferences/"/>
    
  </entry>
  
  <entry>
    <title>Creating a fat AAR</title>
    <link href="http://wittchen.io/creating-fat-aar/"/>
    <id>http://wittchen.io/creating-fat-aar/</id>
    <published>2018-10-01T22:01:31.000Z</published>
    <updated>2019-07-03T22:51:02.810Z</updated>
    
    <content type="html"><![CDATA[<p>I recently wrote a new library called <a href="https://github.com/pwittchen/neurosky-android-sdk" target="_blank" rel="noopener">NeuroSky Android SDK</a>. It’s used for writing Android apps using signals of the brain waves received from the NeuroSky MindWave Mobile headsets. Probably I’ll write a separate article about it because it’s quite interesting topic. This library uses ThinkGear library, which is distributed by the NeuroSky as a <code>*.jar</code> file, so I couldn’t use it as a Gradle or Maven dependency in my project and I had to put this <code>*.jar</code> file into the <code>lib</code> directory and link it in the <code>build.gradle</code> file. Moreover, I wanted to create a library, which can be added to the project as a single Gradle dependency without messing around with additional <code>*.jar</code> files or custom configuration. Due to this fact, I decided to create a fat <code>*.aar</code> file and deploy it to the Maven Central repository. For those who are not familar with Android, <code>*.aar</code> is an Android version or <code>*.jar</code> file, which can be used as library in the project. I didn’t want to reinvent the wheel, so I searched for the different solutions. Unfortunatey, a few of them didn’t work, but luckilly I’ve found what I wanted. It’s <a href="https://github.com/Mobbeel/fataar-gradle-plugin" target="_blank" rel="noopener">fat AAR Gradle Plugin</a> developed by <a href="https://github.com/Mobbeel" target="_blank" rel="noopener">Mobbeel</a> company.</p><p>Here’s how I configured everything:</p><p>In my top-level <code>build.gradle</code> file I defined dependency to my custom <code>*.jar</code> file and other dependencies.</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ext.deps = [ <span class="comment">// other dependencies goes here...</span></span><br><span class="line">             thinkgear : files(<span class="string">'library/libs/ThinkGear.jar'</span>)</span><br><span class="line">           ]</span><br></pre></td></tr></table></figure><p>Next, I added dependency to the plugin within a <code>buildscript</code> section.</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">  <span class="keyword">repositories</span> &#123;</span><br><span class="line">    google()</span><br><span class="line">    jcenter()</span><br><span class="line">    mavenCentral()</span><br><span class="line">    maven &#123;</span><br><span class="line">      url <span class="string">'https://plugins.gradle.org/m2/'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">dependencies</span> &#123;</span><br><span class="line">   <span class="comment">// other plugin dependencies goes here...</span></span><br><span class="line">   <span class="keyword">classpath</span> <span class="string">'gradle.plugin.com.mobbeel.plugin:mobbeel-fataar:1.2.0'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>After that, in the <code>library/build.gradle</code> file, I could add dependency to the <code>*.jar</code> file.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  api deps.thinkgear</span><br><span class="line">  // other dependencies goes here...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then plugin could be applied.</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.mobbeel.plugin'</span></span><br></pre></td></tr></table></figure><p>And I could configure it.</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fatAARConfig &#123;</span><br><span class="line">  includeAllInnerDependencies <span class="keyword">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When we set <code>includeAllInnerDependencies</code> parameter to <code>true</code>, then all transitive dependencies will be included in the fat <code>*.aar</code>. Default value is <code>false</code> and it’s OK for now. I could even skip this step, but sometimes I prefer to define things explicitly.</p><p>Now, we can build our library.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew build</span><br></pre></td></tr></table></figure><p>and fat <code>*.aar</code> will be generated in the <code>library/builds/output/</code> directory as a <code>library-release.aar</code> file. There should be also <code>library-debug.aar</code>. We can unzip this file and notice that it has the following structure:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── AndroidManifest.xml</span><br><span class="line">├── classes.jar</span><br><span class="line">└── libs</span><br><span class="line">    ├── rxandroid.jar</span><br><span class="line">    ├── rxjava-2.2.2.jar</span><br><span class="line">    └── ThinkGear.jar</span><br></pre></td></tr></table></figure><p>so we can clearly see that all project dependencies are included in the <code>*.aar</code> file. Library deployed to the Maven Central Repository looks the same and now, users can add library as a single dependency to the project in the <code>build.gradle</code> file.</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">  implementation <span class="string">'com.github.pwittchen:neurosky-android-sdk:0.0.2'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>*.jar</code> library shipped inside <code>*.aar</code> file will be included in the project and everything will just work.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I recently wrote a new library called &lt;a href=&quot;https://github.com/pwittchen/neurosky-android-sdk&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NeuroSky
      
    
    </summary>
    
    
    
      <category term="android" scheme="http://wittchen.io/tags/android/"/>
    
      <category term="java" scheme="http://wittchen.io/tags/java/"/>
    
      <category term="gradle" scheme="http://wittchen.io/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>Separate execution of unit and integration tests in Gradle</title>
    <link href="http://wittchen.io/separate-execution-of-unit-and-integration-tests-in-gradle/"/>
    <id>http://wittchen.io/separate-execution-of-unit-and-integration-tests-in-gradle/</id>
    <published>2018-09-22T14:51:47.000Z</published>
    <updated>2019-07-03T22:51:02.813Z</updated>
    
    <content type="html"><![CDATA[<p>During development process, we often write unit and integration tests. While unit tests verify corectness of the small pieces of code, integration tests verify software as a whole project and sometimes can treat it as a black box where concrete results are expected. During development of the REST API, we can write integration tests for such API with <a href="https://github.com/rest-assured/rest-assured" target="_blank" rel="noopener">REST Assured</a>. Integration tests are usually slower, because they need to start the server and sometimes do other stuff. That’s why it’s good to separate their execution from regular unit tests. On the CI server we can even have separate job for them.</p><p>We can define the following project structure:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">+ src</span><br><span class="line">|</span><br><span class="line">+- main</span><br><span class="line">|  |</span><br><span class="line">|  +- java</span><br><span class="line">|    |</span><br><span class="line">|    +- com ...</span><br><span class="line">|</span><br><span class="line">+- test</span><br><span class="line">  |</span><br><span class="line">  +- java</span><br><span class="line">    |</span><br><span class="line">    +- com ... (unit tests)</span><br><span class="line">    |</span><br><span class="line">    +- integration (integration tests)</span><br></pre></td></tr></table></figure><p>In the <code>java/com/</code> directory we can put unit tests and in the <code>integration/</code> directory we can put integration tests.</p><p>Now, we can prepare the following configuration in the <code>build.gradle</code>:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">test &#123;</span><br><span class="line">  <span class="keyword">if</span> (System.properties[<span class="string">'test.profile'</span>] != <span class="string">'integration'</span>) &#123;</span><br><span class="line">    <span class="keyword">exclude</span> <span class="string">'**/*integration*'</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">exclude</span> <span class="string">'**/*com/*'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As you can see, when <code>test.profile</code> is different than <code>integration/</code>, we’re excluding <code>integration/</code> directory from tests. Otherwise, we’re excluding <code>com/</code> directory.</p><p>Now, when we want to execute unit tests only, we can type the following command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew test</span><br></pre></td></tr></table></figure><p>but when we want to run unit test, we can type:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew test -Dtest.profile=integration</span><br></pre></td></tr></table></figure><p>When we want to execute all tests, we can redefine configuration above, write another gradle task or perform one execution after another:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew test &amp;&amp; ./gradlew test -Dtest.profile=integration</span><br></pre></td></tr></table></figure><p>That’s it!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;During development process, we often write unit and integration tests. While unit tests verify corectness of the small pieces of code, in
      
    
    </summary>
    
    
    
      <category term="java" scheme="http://wittchen.io/tags/java/"/>
    
      <category term="gradle" scheme="http://wittchen.io/tags/gradle/"/>
    
      <category term="testing" scheme="http://wittchen.io/tags/testing/"/>
    
  </entry>
  
  <entry>
    <title>Excluding generated code from JaCoCo report</title>
    <link href="http://wittchen.io/excluding-generated-code-from-jacoco-report/"/>
    <id>http://wittchen.io/excluding-generated-code-from-jacoco-report/</id>
    <published>2018-09-18T18:07:30.000Z</published>
    <updated>2019-07-03T22:51:02.810Z</updated>
    
    <content type="html"><![CDATA[<p>I recently wrote a simple java app with Dagger 2 as a DI container and Gradle as a build system. I wanted to generate unit test coverage report for this app, so I used Jacoco.</p><p>In my <code>build.gradle</code> file I configured JaCoCo as follows:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">  id <span class="string">'jacoco'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jacocoTestReport &#123;</span><br><span class="line">  reports &#123;</span><br><span class="line">    xml.enabled = <span class="keyword">true</span></span><br><span class="line">    html.enabled = <span class="keyword">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, I could type:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew test jacocoTestReport</span><br></pre></td></tr></table></figure><p>Report was generated in <code>build/reports/jacoco/</code> directory. I noticed that report includes Java code generated by Dagger during the compilation. I didn’t want to include it in the report because it doesn’t really make any sense to write unit tests for generated code.</p><p>I compiled project and browsed classes generated in <code>build/classes/</code> directory. I’ve noticed that Dagger classes have similar patterns like:</p><ul><li><code>DaggerApplicationComponent.class</code></li><li><code>ControllerModule_MemberInjector.class</code></li><li><code>ControllerModule_ProvideContextWrapperFactory.class</code></li><li><code>AccountController_Factory.class</code></li><li>and so on…</li></ul><p>As you can see <code>ApplicationComponent</code> interface got its implementation with <code>Dagger</code> prefix and classes related to modules has postfixes like <code>_MemberInjector</code>, <code>_Provide*</code> and <code>_Factory</code>.</p><p>With this knowledge, I could improve my JaCoCo configuration and exclude classes, which match the Dagger pattern.</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">jacocoTestReport &#123;</span><br><span class="line">  reports &#123;</span><br><span class="line">    xml.enabled = <span class="keyword">true</span></span><br><span class="line">    html.enabled = <span class="keyword">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  afterEvaluate &#123;</span><br><span class="line">    classDirectories = files(classDirectories.files.<span class="keyword">collect</span> &#123;</span><br><span class="line">      <span class="keyword">fileTree</span>(dir: it,</span><br><span class="line">              excludes: [</span><br><span class="line">                      <span class="string">'**/*_Provide*/**'</span>,</span><br><span class="line">                      <span class="string">'**/*_Factory*/**'</span>,</span><br><span class="line">                      <span class="string">'**/*_MembersInjector.class'</span>,</span><br><span class="line">                      <span class="string">'**/*Dagger*'</span></span><br><span class="line">              ])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, my report contains only code which was written by me and automatically generated classes are excluded.</p><p>You can apply similar trick while using other libraries, which generates Java code.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I recently wrote a simple java app with Dagger 2 as a DI container and Gradle as a build system. I wanted to generate unit test coverage 
      
    
    </summary>
    
    
    
      <category term="java" scheme="http://wittchen.io/tags/java/"/>
    
      <category term="gradle" scheme="http://wittchen.io/tags/gradle/"/>
    
      <category term="testing" scheme="http://wittchen.io/tags/testing/"/>
    
      <category term="jacoco" scheme="http://wittchen.io/tags/jacoco/"/>
    
      <category term="coverage" scheme="http://wittchen.io/tags/coverage/"/>
    
  </entry>
  
  <entry>
    <title>Testing exceptions</title>
    <link href="http://wittchen.io/testing-exceptions/"/>
    <id>http://wittchen.io/testing-exceptions/</id>
    <published>2018-09-04T17:49:26.000Z</published>
    <updated>2019-07-03T22:51:02.816Z</updated>
    
    <content type="html"><![CDATA[<p>In Java, we can test exceptions via unit tests in a few different ways. In this article, I’ll present common methods of doing that. Nevertheless, I suppose we there are different methods as well.</p><p>First method is basically wrapping a method call with try-catch block, assigning an exception to a variable and performing appropriate assertion. In these examples, I’m using <a href="https://junit.org" target="_blank" rel="noopener">JUnit</a> for unit tests and <a href="https://google.github.io/truth/" target="_blank" rel="noopener">Truth</a> for assertions.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldTestExceptionWithTryCatch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Exception caughtException = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeExcetpion(<span class="string">"message"</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception e) &#123;</span><br><span class="line">    caughtException = e;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  assertThat(caughtException).hasMessageThat().isEqualTo(<span class="string">"message"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the second method, we can define a type of the thrown exception within the <code>@Test</code> annotation. It’s useful approach when we don’t want to test exception details like message and we care only about the type.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span>(expected = RuntimeException.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldTestExceptionWithExpectedAnnotation</span><span class="params">()</span> <span class="keyword">throws</span> RuntimeException </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"message"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can also test exceptions with AssertJ library as follows:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldTestExceptionWithAssertJ</span><span class="params">()</span> <span class="keyword">throws</span> RuntimeException </span>&#123;</span><br><span class="line">  Throwable thrown = catchThrowable(<span class="keyword">this</span>::throwException);</span><br><span class="line"></span><br><span class="line">  org.assertj.core.api.Assertions</span><br><span class="line">      .assertThat(thrown)</span><br><span class="line">      .isInstanceOf(RuntimeException.class)</span><br><span class="line">      .hasMessage(EXCEPTION_MESSAGE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Another method allows us to test exception type, message and other details without wrapping method call with try-catch block, what increases code readibility and makes it clear. In order to achieve that, we need <code>@Rule</code> annotation and <code>ExpectedException</code> object like in the code snippet below. What is important in this example, we have to define assertions in the beginning and invoke method, which will throw an exception after these assertions. It’s different order than in a regular unit test.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Rule</span></span><br><span class="line"><span class="keyword">public</span> ExpectedException expectedException = ExpectedException.none();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldTestExceptionWithRuleAnnotation</span><span class="params">()</span> <span class="keyword">throws</span> RuntimeException </span>&#123;</span><br><span class="line">  expectedException.expect(RuntimeException.class);</span><br><span class="line">  expectedException.expectMessage(EXCEPTION_MESSAGE);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"message"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Alternatively, we can experiment with <a href="https://www.vavr.io/" target="_blank" rel="noopener">Vavr</a> and <code>Try</code> interface.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldTestExceptionWithTryCatchAndVavr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Object object = </span><br><span class="line">    Try</span><br><span class="line">      .of(<span class="keyword">this</span>::throwException)</span><br><span class="line">      .toOption()</span><br><span class="line">      .getOrElse(<span class="keyword">new</span> ErrorObject());</span><br><span class="line"></span><br><span class="line">  assertThat(object).isInstanceOf(ErrorObject.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">throwException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"message"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorObject</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>We can even go crazy and prepare RxJava wrapper for our exception.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Completable <span class="title">toCompletable</span><span class="params">(<span class="keyword">final</span> Runnable runnable)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Completable.create(emitter -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      runnable.run();</span><br><span class="line">      emitter.onComplete();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception e) &#123;</span><br><span class="line">      emitter.onError(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>and write test like that:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldTestExceptionWithRxJava</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Throwable throwable = toCompletable(<span class="keyword">this</span>::throwException).blockingGet();</span><br><span class="line"></span><br><span class="line">  assertThat(throwable).isInstanceOf(RuntimeException.class);</span><br><span class="line">  assertThat(throwable.getMessage()).isEqualTo(EXCEPTION_MESSAGE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For sure, it shouldn’t be default choice and I wrote it just for a little experiment. Don’t treat that as a production-ready code (unless there’s a reson you really need something like that).</p><p>I think, we can find even more ways of testing exceptions. In my opinion, solution with JUnit and <code>@Rule</code> annotation is the cleanest and most flexible one among all of the approaches presented here. It’s good to mention that last two approaches are just experiments. I also recommend Truth for writing assertions. Nevertheless, libraries like FEST, AssertJ and others, which have fluent interfaces helping in error analysis are also worth considering in daily usage.</p><p>Do you know other (maybe better) approaches of testing exceptions in Java? Share them in comments :-).</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In Java, we can test exceptions via unit tests in a few different ways. In this article, I’ll present common methods of doing that. Never
      
    
    </summary>
    
    
    
      <category term="java" scheme="http://wittchen.io/tags/java/"/>
    
      <category term="testing" scheme="http://wittchen.io/tags/testing/"/>
    
  </entry>
  
  <entry>
    <title>Writing my first library in Kotlin</title>
    <link href="http://wittchen.io/writing-my-first-library-in-kotlin/"/>
    <id>http://wittchen.io/writing-my-first-library-in-kotlin/</id>
    <published>2018-08-19T08:24:19.000Z</published>
    <updated>2019-07-03T22:51:02.816Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Recently, I decided to create a tiny Android library called <a href="https://github.com/pwittchen/RxBattery" target="_blank" rel="noopener">RxBattery</a>, which is monitoring battery state of the device with RxJava and RxKotlin. I created a few Java and Android libraries already and this time I decided to use <a href="https://kotlinlang.org/" target="_blank" rel="noopener">Kotlin</a> programming language instead of Java to learn something new and write something more complicated than “Hello World” app. Here are my observations.</p><h2 id="Build-System"><a href="#Build-System" class="headerlink" title="Build System"></a>Build System</h2><p>I used <a href="https://gradle.org/" target="_blank" rel="noopener">Gradle</a> to build the project. It’s popular for JVM and Android apps nowadays and works fine with Kotlin. I just needed to add Kotlin Gradle Plugin and Kotlin STD Lib to the <code>/library/build.gradle</code> file to the <code>classpath</code> dependencies in <code>buildscript</code> section. I also needed to define <code>sourceSets</code> to allow IntelliJ and Android Studio recognize directories with sources.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  sourceSets &#123;</span><br><span class="line">    androidTest.java.srcDirs += <span class="string">"src/androidTest/kotlin"</span></span><br><span class="line">    main.java.srcDirs += <span class="string">"src/main/kotlin"</span></span><br><span class="line">    test.java.srcDirs += <span class="string">"src/test/kotlin"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To keep the project clean, I defined all dependencies and version numbers in top-level <code>build.gradle</code> file, so I could reuse them in all modules.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">ext &#123;</span><br><span class="line">  minSdkVersion = <span class="number">14</span></span><br><span class="line">  compileSdkVersion = <span class="number">28</span></span><br><span class="line">  buildToolsVersion = <span class="string">'28'</span></span><br><span class="line">  gradleVersion = <span class="string">'4.4.1'</span></span><br><span class="line">  kotlinVersion = <span class="string">'1.2.60'</span></span><br><span class="line">  detektVersion = <span class="string">'1.0.0.RC6-1'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ext.deps = [ <span class="string">rxjava2              :</span> <span class="string">'io.reactivex.rxjava2:rxjava:2.2.0'</span>,</span><br><span class="line">             <span class="string">rxandroid2           :</span> <span class="string">'io.reactivex.rxjava2:rxandroid:2.0.2'</span>,</span><br><span class="line">             <span class="string">rxkotlin2            :</span> <span class="string">'io.reactivex.rxjava2:rxkotlin:2.3.0'</span>,</span><br><span class="line">             <span class="string">supportannotations   :</span> <span class="string">'com.android.support:support-annotations:28.0.0-rc01'</span>,</span><br><span class="line">             <span class="string">appcompatv7          :</span> <span class="string">'com.android.support:appcompat-v7:28.0.0-rc01'</span>,</span><br><span class="line">             <span class="string">constraintlayout     :</span> <span class="string">'com.android.support.constraint:constraint-layout:1.1.2'</span>,</span><br><span class="line">             <span class="string">junit                :</span> <span class="string">'junit:junit:4.12'</span>,</span><br><span class="line">             <span class="string">truth                :</span> <span class="string">'com.google.truth:truth:0.42'</span>,</span><br><span class="line">             <span class="string">robolectric          :</span> <span class="string">'org.robolectric:robolectric:4.0-alpha-3'</span>,</span><br><span class="line">             <span class="string">mockitocore          :</span> <span class="string">'org.mockito:mockito-core:2.21.0'</span>,</span><br><span class="line">             <span class="string">mockitokotlin        :</span> <span class="string">'com.nhaarman.mockitokotlin2:mockito-kotlin:2.0.0-RC1'</span>,</span><br><span class="line">             <span class="string">dokka                :</span> <span class="string">'org.jetbrains.dokka:dokka-gradle-plugin:0.9.17'</span>,</span><br><span class="line">             <span class="string">detekt               :</span> <span class="string">"gradle.plugin.io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detektVersion"</span>,</span><br><span class="line">             <span class="string">ktlintgradle         :</span> <span class="string">"gradle.plugin.org.jlleitschuh.gradle:ktlint-gradle:4.1.0"</span>,</span><br><span class="line">             <span class="string">kotlinstdlib         :</span> <span class="string">"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"</span>,</span><br><span class="line">             <span class="string">kotlingradleplugin   :</span> <span class="string">"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"</span> ]</span><br></pre></td></tr></table></figure><h2 id="Static-Code-Analysis"><a href="#Static-Code-Analysis" class="headerlink" title="Static Code Analysis"></a>Static Code Analysis</h2><p>For static code analysis, I used CheckStyle, FindBugs, PMD and Android Lint as usual. Moreover, I used <a href="https://github.com/shyiko/ktlint" target="_blank" rel="noopener">ktlint</a> via <a href="https://github.com/JLLeitschuh/ktlint-gradle" target="_blank" rel="noopener">ktlint-gradle plugin</a> and <a href="https://github.com/arturbosch/detekt" target="_blank" rel="noopener">detekt</a>. I’ve added these dependencies to <code>classpath</code> in <code>buildscript</code> section in <code>library/build.gradle</code> file as previosuly</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">  repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">    jcenter()</span><br><span class="line">    google()</span><br><span class="line">    maven &#123;</span><br><span class="line">      url <span class="string">'https://plugins.gradle.org/m2/'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  dependencies &#123;</span><br><span class="line">    classpath deps.kotlingradleplugin</span><br><span class="line">    classpath deps.detekt</span><br><span class="line">    classpath deps.ktlintgradle</span><br><span class="line">    classpath deps.dokka</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I also applied minimal configuration for these plugins.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">detekt &#123;</span><br><span class="line">  version = rootProject.ext.detektVersion</span><br><span class="line">  profile(<span class="string">"main"</span>) &#123;</span><br><span class="line">    input = <span class="string">"$projectDir"</span></span><br><span class="line">    config = <span class="string">"$projectDir/detekt.yml"</span></span><br><span class="line">    filters = <span class="string">".*test.*,.*/resources/.*,.*/tmp/.*"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ktlint &#123;</span><br><span class="line">  verbose = <span class="literal">true</span></span><br><span class="line">  reporters = [<span class="string">"CHECKSTYLE"</span>, <span class="string">"PLAIN"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I also tried to generate <strong>code coverage report</strong>, to be able to verify what amount of code is covered by unit tests, but unfortunately Jacoco wasn’t able to analyze Kotlin code. I saw on the web that people struggled with the same problem and a few of them could have solved that issue. Maybe I missed something and I could update it in the future.</p><h2 id="Continuous-Integration"><a href="#Continuous-Integration" class="headerlink" title="Continuous Integration"></a>Continuous Integration</h2><p>In my open-source projects, I use <a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis</a> for CI. Everything can be configured in <code>.travis.yml</code> file and setup looks exactly the same as for Android libraries written in Java.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">language: android</span><br><span class="line"></span><br><span class="line">android:</span><br><span class="line">  components:</span><br><span class="line">    - tools</span><br><span class="line">    - platform-tools</span><br><span class="line">    - build-tools-28</span><br><span class="line">    - android-28</span><br><span class="line">    - extra-android-support</span><br><span class="line">    - extra-android-m2repository</span><br><span class="line">  licenses:</span><br><span class="line">    - android-sdk-license-5be876d5</span><br><span class="line">    - android-sdk-license-c81a61d9</span><br><span class="line">    - &apos;android-sdk-preview-license-.+&apos;</span><br><span class="line">    - &apos;android-sdk-license-.+&apos;</span><br><span class="line">    - &apos;google-gdk-license-.+&apos;</span><br><span class="line"></span><br><span class="line">jdk: oraclejdk8</span><br><span class="line"></span><br><span class="line">before_install:</span><br><span class="line">  - yes | sdkmanager &quot;platforms;android-27&quot;</span><br><span class="line"></span><br><span class="line">install:</span><br><span class="line">  - true</span><br><span class="line"></span><br><span class="line">script:</span><br><span class="line">  - ./gradlew clean build test check</span><br><span class="line"></span><br><span class="line">cache:</span><br><span class="line">  directories:</span><br><span class="line">- $HOME/.m2</span><br></pre></td></tr></table></figure><p>I suppose that in case of writing pure Kotlin (non-Android), library configuration would be the same as in regular Java project because everything is built via Gradle. Configuration, which works fine for one of my pure Java libraries looks like that:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">language: java</span><br><span class="line"></span><br><span class="line">install:</span><br><span class="line">  # Check install section: http://docs.travis-ci.com/user/build-configuration/#install</span><br><span class="line">  # If you&apos;d like to skip the install stage entirely, set it to true and nothing will be run.</span><br><span class="line">  - true</span><br><span class="line"></span><br><span class="line">after_success:</span><br><span class="line">  - bash &lt;(curl -s https://codecov.io/bash)</span><br><span class="line">  - python &lt;(curl -s https://raw.githubusercontent.com/TouK/sputnik-ci/master/sputnik-ci.py)</span><br><span class="line"></span><br><span class="line">script:</span><br><span class="line">- ./gradlew clean build test check</span><br></pre></td></tr></table></figure><p>I don’t think that it would require any significant change in case of Kotlin.</p><h2 id="Kotlin-vs-Java"><a href="#Kotlin-vs-Java" class="headerlink" title="Kotlin vs. Java"></a>Kotlin vs. Java</h2><p>I’ve decided to use Kotlin instead of Java to learn a bit more about this language and try something new. Google promotes this language during Google I/O events and recommends to use it for Android development. Moreover, it’s regular JVM language, so we can use it anywhere we want - on Android (mobile), on servers and even on desktop apps. I haven’t discovered all the features of this language during writing this tiny project, but I have a few observations. Writing code is a bit strange because I got used to programming in Java. In Kotlin, we define the function or variable name first, then we put colon and we define the type next. It’s opposite to Java, where types are defined first. </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">createBroadcastReceiver</span><span class="params">(emitter: <span class="type">FlowableEmitter</span>&lt;<span class="type">BatteryState</span>&gt;)</span></span>: BroadcastReceiver &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">val</span> status: <span class="built_in">Int</span> = intent.getIntExtra(BatteryManager.EXTRA_STATUS, UNKNOWN)</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Moreover, there’s type inference in Kotlin and sometimes compiler is able to guess our type, so we don’t have to provide it. See the following example:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> emitter = mock(FlowableEmitter::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br></pre></td></tr></table></figure><p>In addition, we don’t have to put semicolon in the end of the statement as you can see on the code snippets above, what is really convenient. The thing, I really like about Kotlin is <strong>null safety</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (intent != <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="keyword">val</span> status: <span class="built_in">Int</span> = intent.getIntExtra(BatteryManager.EXTRA_STATUS, UNKNOWN)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If we don’t do that, code won’t compile. We can avoid such null-checks, by using <code>!!.</code> operator like here:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> status: <span class="built_in">Int</span> = intent!!.getIntExtra(BatteryManager.EXTRA_STATUS, UNKNOWN)</span><br></pre></td></tr></table></figure><p>but by looking at the code, we can see that there are two exclamation marks, so clearly something must be wrong here and we should think about improvement. Moreover, when NPE occurs, it’ll be easier to find.</p><p>Kotlin is also <strong>more concise</strong> than Java. It’s hard to say if it’s an advantage or drawback. In Java we have more code, but we clearly know what’s going on when the code is clean. In Kotlin a lot of stuff is <strong>implicit</strong>.</p><p>E.g. inheritance looks as follows:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>()</span><br></pre></td></tr></table></figure><p>and sometimes we don’t have variable provided in the lambda, when there’s only one value and we can invoke this value by calling <code>it</code> object</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">batteryDisposable = RxBattery</span><br><span class="line">  .observe(<span class="keyword">this</span>)</span><br><span class="line">  .subscribeOn(Schedulers.io())</span><br><span class="line">  .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">  .subscribe &#123; textView.text = it.toString() &#125;</span><br></pre></td></tr></table></figure><p>The thing I like about implicit Kotlin code is <strong>data classes</strong>. We can create something like that:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">BatteryState</span></span>(</span><br><span class="line">  <span class="keyword">val</span> status: <span class="built_in">Int</span>,</span><br><span class="line">  <span class="keyword">val</span> plugged: <span class="built_in">Int</span>,</span><br><span class="line">  <span class="keyword">val</span> health: <span class="built_in">Int</span>,</span><br><span class="line">  <span class="keyword">val</span> level: <span class="built_in">Int</span>,</span><br><span class="line">  <span class="keyword">val</span> temperature: <span class="built_in">Int</span>,</span><br><span class="line">  <span class="keyword">val</span> voltage: <span class="built_in">Int</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>and it will generate constructor with all these values, getters and <code>toString()</code> method. In Java, we would need to write it by hand, use code generators in the IDE or code generation libraries like Lombok.</p><p>When we take a look at the <strong>control flow</strong> in Kotlin, except for <code>if</code> expression, <code>for</code> and <code>while</code> loops, we also have <code>when</code> expression, which can be kind of neat equivalent to <code>switch</code> instruction in Java. It looks like this:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">fun</span> <span class="title">plugged</span><span class="params">()</span></span>: Plugged &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">when</span> (pluggedCode) &#123;</span><br><span class="line">     BatteryManager.BATTERY_PLUGGED_AC -&gt; Plugged.AC</span><br><span class="line">     BatteryManager.BATTERY_PLUGGED_USB -&gt; Plugged.USB</span><br><span class="line">     BatteryManager.BATTERY_PLUGGED_WIRELESS -&gt; Plugged.WIRELESS</span><br><span class="line">     <span class="keyword">else</span> -&gt; Plugged.UNKNOWN</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It’s worth to say that there’s good <strong>inter-operability</strong> between Java and Kotlin. We can use Kotlin modules and libraries in Java projects and vice-versa because everything compiles to the same byte-code. We can even create pure Java code in the Kotlin module. For example, I wanted to have static method called from the Kotlin library. In order to achieve that, I needed to wrap whole class in a Companion Object.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RxBattery</span> </span>&#123;</span><br><span class="line">  <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Next, in the Kotlin module, I could call it like this:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RxBattery.observe(<span class="keyword">this</span>)</span><br></pre></td></tr></table></figure><p>but in Java module it wasn’t possible and I needed to write something like this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RxBattery.Companion.observe(context);</span><br></pre></td></tr></table></figure><p>I didn’t want library users to call this <code>Companion</code> value explicitely in Java projects, so I created additional Java class.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RxBatteryFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">RxBatteryFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Flowable&lt;BatteryState&gt; <span class="title">observe</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> RxBattery.Companion.observe(context);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>and put it next to the Kotlin classes. Now In Java module, people could call method like that:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RxBatteryFactory.observe(<span class="keyword">this</span>)</span><br></pre></td></tr></table></figure><p>It’s good to know that it’s possible because when we got stuck with implicit Kotlin syntaxt, we can always use Java in one particular scenario.</p><p>Later, I figured out, we can simply add <code>@JvmStatic</code> annotation before the method signature and since now, method method will be visible as <code>static</code> in the Java modules as well and we no longer need additional Java code.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JvmStatic</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">observe</span><span class="params">(context: <span class="type">Context</span>)</span></span>: Flowable&lt;BatteryState&gt; &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Moreover, all classes created in Kotlin are <strong>final by default</strong>. It can cause a problems during writing unit tests and creating mocks. If we want to have non-final class (e.g. in order to mock it), we need to mark it explicitly as <code>open</code>.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></span><br></pre></td></tr></table></figure><p>Of course, things mentioned above are not all features of Kotlin. There’s much more to discover - e.g. <a href="https://kotlinlang.org/docs/reference/coroutines.html" target="_blank" rel="noopener">couroutines</a>. To learn more, check <a href="https://kotlinlang.org/docs/reference/" target="_blank" rel="noopener">Kotlin Language Reference</a>, open-source projects in this language, books, and other articles on the web.</p><p>It’s hard to say if in more complex project Kotlin would be a better choice. Right now, I’m more familar and comfortable with Java, but on the other hand, Kotlin has a few interesting features, which makes development better. Maybe I’ll give this language more chances in the future to learn it better.</p><h2 id="Unit-Tests"><a href="#Unit-Tests" class="headerlink" title="Unit Tests"></a>Unit Tests</h2><p>Unit tests in Kotlin are pretty similar to Java.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span> <span class="function"><span class="keyword">fun</span> <span class="title">shouldCreateBroadcastReceiver</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// given</span></span><br><span class="line">  <span class="keyword">val</span> emitter = mock(FlowableEmitter::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// when</span></span><br><span class="line">  <span class="keyword">val</span> broadcastReceiver: BroadcastReceiver = RxBattery.createBroadcastReceiver(</span><br><span class="line">    emitter <span class="keyword">as</span> FlowableEmitter&lt;BatteryState&gt;</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="comment">// then</span></span><br><span class="line">  assertThat(broadcastReceiver).isNotNull()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can use JUnit and Java assertion libraries like Google Truth and mocking libraries like Mockito. There’s also <a href="https://github.com/nhaarman/mockito-kotlin" target="_blank" rel="noopener">mockit-kotlin</a> library, but in my case, I used <a href="https://github.com/mockito/mockito" target="_blank" rel="noopener">mockito-core</a>. There are also other mocking libraries like <a href="https://github.com/mockk/mockk" target="_blank" rel="noopener">Mockk</a> and libraries for BDD like <a href="https://github.com/spekframework/spek" target="_blank" rel="noopener">Spek</a>. Moreover, we can achieve more concise syntax for unit tests using various kotlin libraries like <a href="https://github.com/kotlintest/kotlintest" target="_blank" rel="noopener">kotlintest</a>. I haven’t used it in this project yet, but I may update it in the future.</p><h2 id="JavaDoc"><a href="#JavaDoc" class="headerlink" title="JavaDoc"></a>JavaDoc</h2><p>Generating JavaDoc (or KotlinDoc?) in Kotlin projects is not straightforward. In order to generate documentation, I used <a href="https://github.com/Kotlin/dokka" target="_blank" rel="noopener">dokka</a> gradle plugin. It’s pretty easy to use, we just need to add appropriate dependency, apply the plugin and create configuration in <code>build.gradle</code> file.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dokka &#123;</span><br><span class="line">  outputFormat = <span class="string">'html'</span></span><br><span class="line">  outputDirectory = <span class="string">"$buildDir/javadoc"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Next, we just call: <code>./gradlew dokka</code> and our JavaDoc is generated in defined <code>outputDirectory</code>.</p><h2 id="Library-Deployment"><a href="#Library-Deployment" class="headerlink" title="Library Deployment"></a>Library Deployment</h2><p>Library deployment of the Kotlin project is exactly the same as Java project. I simply used <a href="https://github.com/pwittchen/RxBattery/blob/master/maven_push.gradle" target="_blank" rel="noopener"><code>maven_push.gradle</code></a> script created by Chris Banes some time ago, applied it in the library module and configured everything in <code>gradle.properties</code> and <code>library/gradle.properties</code>. Of course, I also needed to have my credentials configured in <code>~/.gradle/gradle.properties</code> file. Next, I could just call <code>./gradlew uploadArchives</code>, close and release library on the OSS SonaType website.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>To wrap up, Kotlin is an interesting language. It’s hard to say, if it’s really better than Java although it has a few interesting features. Nevertheless, it’s good to familiarize with it because it’s being promoted by Google and JetBrains. JetBrains company actually created and develops this language, so due to this fact, I’m able to put more trust in that project. If you would like to see complete code and configuration of the project mentioned in this article, check out my <a href="https://github.com/pwittchen/RxBattery" target="_blank" rel="noopener">RxBattery</a> repository on GitHub. Last, but not least, learning new things broadens our mind and horizon.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;Recently, I decided to create 
      
    
    </summary>
    
    
    
      <category term="android" scheme="http://wittchen.io/tags/android/"/>
    
      <category term="java" scheme="http://wittchen.io/tags/java/"/>
    
      <category term="gradle" scheme="http://wittchen.io/tags/gradle/"/>
    
      <category term="kotlin" scheme="http://wittchen.io/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Solving problems with AVD and KVM on Linux</title>
    <link href="http://wittchen.io/solving-problems-with-avd-and-kvm-on-linux/"/>
    <id>http://wittchen.io/solving-problems-with-avd-and-kvm-on-linux/</id>
    <published>2018-08-16T20:01:06.000Z</published>
    <updated>2019-07-03T22:51:02.813Z</updated>
    
    <content type="html"><![CDATA[<p>I installed Android SDK and Android Studio on my new ThinkPad T470s with Ubuntu Linux 18.04.1 LTS. As usual, I wanted to create a new Android phone emulator called AVD (Android Virtual Device). I was able to create a new device, but unfortunately I encoutered problems. After opening AVD window, I saw the error message…</p><h2 id="dev-kvm-is-not-found"><a href="#dev-kvm-is-not-found" class="headerlink" title="/dev/kvm is not found"></a>/dev/kvm is not found</h2><p>KVM (Kernel-based Virtual Machine) is a full virtualization solution for Linux on x86 hardware containing virtualization extensions (Intel VT or AMD-V). In order to enable KVM, I needed to restart the computer and enter the BIOS by pressing <code>F1</code> key before the system boot. Next, I entered <code>Security</code> tab and enabled <code>Intel Virtualization Technology</code> and <code>Intel VT-d Feature</code>. Now, I could press <code>F10</code> to save, exit nad restart the computer. Unfortunately, that wasn’t the end of the story. I saw another error message…</p><h2 id="dev-kvm-device-permission-denied"><a href="#dev-kvm-device-permission-denied" class="headerlink" title="/dev/kvm device permission denied"></a>/dev/kvm device permission denied</h2><p>Luckily, I found answer to this issue on <a href="https://stackoverflow.com/questions/37300811/android-studio-dev-kvm-device-permission-denied$" target="_blank" rel="noopener">StackOverflow</a>. I just needed to install <code>qemu-kvm</code> and add my user to the <code>kvm</code> group.</p><p>I installed required software:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install qemu-kvm</span><br></pre></td></tr></table></figure><p>Then, checked the ownership of <code>/dev/kvm</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -al /dev/kvm</span><br></pre></td></tr></table></figure><p>The user was root, the group kvm. To check which users are in the kvm group, I could use:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep kvm /etc/group</span><br></pre></td></tr></table></figure><p>This returned:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kvm:x:some_number:</span><br></pre></td></tr></table></figure><p>As there is nothing left to the final <code>:</code>, there are no users in the kvm group.</p><p>To add the user <code>username</code> to the kvm group, I could use:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser username kvm</span><br></pre></td></tr></table></figure><p>I can check my <code>username</code>, by typing:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whoami</span><br></pre></td></tr></table></figure><p>Now, I could check group members once again with:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep kvm /etc/group</span><br></pre></td></tr></table></figure><p>My user should be there. Next, I could just restart the machine, create new AVD, start it and everything worked! I could finally use my Android emulator. Optionally, if you still have a problem, you can call the following command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown username /dev/kvm</span><br></pre></td></tr></table></figure><p>and replace <code>username</code> with your username</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://stackoverflow.com/questions/36527278/dev-kvm-not-found-error-on-windows-in-android-studio" target="_blank" rel="noopener">https://stackoverflow.com/questions/36527278/dev-kvm-not-found-error-on-windows-in-android-studio</a></li><li><a href="https://stackoverflow.com/questions/37300811/android-studio-dev-kvm-device-permission-denied" target="_blank" rel="noopener">https://stackoverflow.com/questions/37300811/android-studio-dev-kvm-device-permission-denied</a></li><li><a href="https://en.wikipedia.org/wiki/Kernel-based_Virtual_Machine" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Kernel-based_Virtual_Machine</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I installed Android SDK and Android Studio on my new ThinkPad T470s with Ubuntu Linux 18.04.1 LTS. As usual, I wanted to create a new And
      
    
    </summary>
    
    
    
      <category term="android" scheme="http://wittchen.io/tags/android/"/>
    
      <category term="linux" scheme="http://wittchen.io/tags/linux/"/>
    
  </entry>
  
</feed>
