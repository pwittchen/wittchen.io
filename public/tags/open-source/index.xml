<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Open-Source on Piotr Wittchen</title>
    <link>https://wittchen.io/tags/open-source/</link>
    <description>Recent content in Open-Source on Piotr Wittchen</description>
    <generator>Hugo -- 0.140.2</generator>
    <language>en</language>
    <lastBuildDate>Sun, 24 Jun 2018 23:39:18 +0000</lastBuildDate>
    <atom:link href="https://wittchen.io/tags/open-source/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Releasing ReactiveNetwork v. 1.0.0 (paying the technical debt)</title>
      <link>https://wittchen.io/posts/releasing-reactive-network-1/</link>
      <pubDate>Sun, 24 Jun 2018 23:39:18 +0000</pubDate>
      <guid>https://wittchen.io/posts/releasing-reactive-network-1/</guid>
      <description>&lt;p&gt;Today, I&amp;rsquo;ve released next version of my most popular open-source project - &lt;a href=&#34;https://github.com/pwittchen/ReactiveNetwork&#34;&gt;ReactiveNetwork&lt;/a&gt;. I&amp;rsquo;ve released version &lt;code&gt;0.12.4&lt;/code&gt; for RxJava1.x and version &lt;code&gt;1.0.0&lt;/code&gt; for RxJava2.x. Please note, RxJava1.x is &lt;a href=&#34;https://github.com/ReactiveX/RxJava/releases/tag/v1.3.8&#34;&gt;no longer officially supported&lt;/a&gt; and I&amp;rsquo;m going to follow the same approach in my RxJava-based projects. It&amp;rsquo;s not the first release of this project, but I&amp;rsquo;m breaking the API and removing existing methods, so I decided to stick to proper versioning standard. I didn&amp;rsquo;t always do it properly in the past, but it&amp;rsquo;s never too late.&lt;/p&gt;</description>
    </item>
    <item>
      <title>DroidCon Poland 2017 - Is your app really connected?</title>
      <link>https://wittchen.io/posts/droidcon-poland-2017-is-your-app-really-connected/</link>
      <pubDate>Sat, 02 Dec 2017 01:39:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/droidcon-poland-2017-is-your-app-really-connected/</guid>
      <description>&lt;p&gt;Yesterday, I gave a presentation about connectivity in the Android apps during the &lt;a href=&#34;http://droidcon.pl&#34;&gt;DroidCon Poland 2017&lt;/a&gt; Conference in Kraków.&lt;/p&gt;
&lt;p&gt;Below, you can see slides from this presentation.&lt;/p&gt;


&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;2a3a400c94c1497d8a2343e269c7d1ce&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;http://speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/pwittchen/is-your-app-really-connected-1&#34;&gt;View slides on SpeakerDeck&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s also tweet related to this presentation from &lt;a href=&#34;https://twitter.com/droidconkr&#34;&gt;DroidCon Kraków&lt;/a&gt;:&lt;/p&gt;


&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Piotr Wittchen tells us about how we can we keep the track of network &amp;#x1f30e; or Internet connectivity changes in our app &amp;#x1f4f1;&amp;#x1f198;&amp;#x1f642; &lt;a href=&#34;https://t.co/7YGGzNJeb2&#34;&gt;pic.twitter.com/7YGGzNJeb2&lt;/a&gt;&lt;/p&gt;&amp;mdash; droidcon Kraków (@droidconkr) &lt;a href=&#34;https://twitter.com/droidconkr/status/936889529566347265?ref_src=twsrc%5Etfw&#34;&gt;December 2, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;


&lt;p&gt;I hope, you enjoyed it. Any kind of feedback is welcome (in the comments below this article or via e-mail). Don&amp;rsquo;t forget to check &lt;a href=&#34;https://github.com/pwittchen/ReactiveNetwork&#34;&gt;ReactiveNetwork&lt;/a&gt; library I mentioned during the presentation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introducing ReactiveAirplaneMode</title>
      <link>https://wittchen.io/posts/introducing-reactive-airplane-mode/</link>
      <pubDate>Tue, 15 Aug 2017 19:28:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/introducing-reactive-airplane-mode/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m continuing &lt;em&gt;Rxfication&lt;/em&gt; of the Android. Recently I released brand new library called &lt;a href=&#34;https://github.com/pwittchen/ReactiveAirplaneMode&#34;&gt;&lt;strong&gt;ReactiveAirplaneMode&lt;/strong&gt;&lt;/a&gt;. As you may guess, it allows listening Airplane mode on Android device with RxJava observables. A usual I&amp;rsquo;ve hidden all implementation details, BroadcastReceivers and rest of the Android related stuff behind RxJava abstraction layer, so API is really simple. Just take a look on that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;ReactiveAirplaneMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;observe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;subscribeOn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Schedulers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;observeOn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AndroidSchedulers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;mainThread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;subscribe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isOn&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;textView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Airplane mode on: %s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isOn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the code above &lt;strong&gt;subscriber will be notified only when airplane mode changes&lt;/strong&gt;. If you want to &lt;strong&gt;read airplane mode and then listen to it&lt;/strong&gt;, you can use the following method:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Releasing ReactiveNetwork v. 0.11.0</title>
      <link>https://wittchen.io/posts/reactivenetwork-v-0110-walled-garden/</link>
      <pubDate>Sun, 06 Aug 2017 06:38:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/reactivenetwork-v-0110-walled-garden/</guid>
      <description>&lt;p&gt;In the latest release of &lt;a href=&#34;https://github.com/pwittchen/ReactiveNetwork&#34;&gt;ReactiveNetwork&lt;/a&gt; library, I focused on &lt;a href=&#34;http://searchsecurity.techtarget.com/definition/walled-garden&#34;&gt;Walled Garden&lt;/a&gt; AKA Great Firewall support during checking Internet connectivity. There are countries with limited Internet access like China and in such cases, pinging commonly known host like &lt;a href=&#34;https://www.google.com&#34;&gt;www.google.com&lt;/a&gt; may have different results than in other countries because it may be blocked. We may get false positive results because users will generally have an access to the Internet, but they don&amp;rsquo;t have access only to several websites. To solve that problem, I created &lt;a href=&#34;https://github.com/pwittchen/ReactiveNetwork/blob/RxJava2.x/library/src/main/java/com/github/pwittchen/reactivenetwork/library/rx2/internet/observing/strategy/WalledGardenInternetObservingStrategy.java&#34;&gt;WalledGardenInternetObservingStrategy&lt;/a&gt; and made it default strategy for checking Internet connectivity inside the library. Of course, you can still use &lt;a href=&#34;https://github.com/pwittchen/ReactiveNetwork/blob/RxJava2.x/library/src/main/java/com/github/pwittchen/reactivenetwork/library/rx2/internet/observing/strategy/SocketInternetObservingStrategy.java&#34;&gt;SocketInternetObservingStrategy&lt;/a&gt; if you want to. Detailed release notes are as follows: &lt;strong&gt;RxJava1.x&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Releasing ReactiveNetwork v. 0.10.0</title>
      <link>https://wittchen.io/posts/releasing-reactivenetwork-v-0100/</link>
      <pubDate>Thu, 20 Jul 2017 20:02:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/releasing-reactivenetwork-v-0100/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve recently released &lt;a href=&#34;https://github.com/pwittchen/ReactiveNetwork&#34;&gt;&lt;strong&gt;ReactiveNetwork&lt;/strong&gt;&lt;/a&gt; library v. &lt;strong&gt;0.10.0&lt;/strong&gt; for RxJava1.x and RxJava2.x. ReactiveNetwork is an Android library listening network connection state and Internet connectivity with RxJava Observables, which I&amp;rsquo;m developing for approximately 2 years now. In this version, I&amp;rsquo;ve done a few bug fixes and added new features for RxJava2.x version. Below, you can find the release notes: &lt;a href=&#34;https://github.com/pwittchen/ReactiveNetwork/releases/tag/v0.10.0&#34;&gt;&lt;strong&gt;Release for RxJava1.x&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bumped RxJava1 version to 1.3.0&lt;/li&gt;
&lt;li&gt;bumped test dependencies&lt;/li&gt;
&lt;li&gt;created Code of Conduct&lt;/li&gt;
&lt;li&gt;updated Kotlin version in sample apps&lt;/li&gt;
&lt;li&gt;added retrolambda to the sample Java app - issue &lt;a href=&#34;https://github.com/pwittchen/ReactiveNetwork/issues/163&#34;&gt;#163&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;fixed behavior of network observing in disconnected state - issue &lt;a href=&#34;https://github.com/pwittchen/ReactiveNetwork/issues/159&#34;&gt;#159&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/pwittchen/ReactiveNetwork/releases/tag/v0.10.0-rx2&#34;&gt;&lt;strong&gt;Release for RxJava2.x&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Release of prefser v. 2.1.0 with RxJava2 support</title>
      <link>https://wittchen.io/posts/release-of-prefser-210-with-rxjava2/</link>
      <pubDate>Mon, 19 Jun 2017 16:56:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/release-of-prefser-210-with-rxjava2/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve recently released new version of &lt;a href=&#34;https://github.com/pwittchen/prefser&#34;&gt;prefser&lt;/a&gt; library for Android. In case you don&amp;rsquo;t know, it&amp;rsquo;s a wrapper for Android SharedPreferences with object serialization and RxJava Observables. This version has the new artifact, which has codebase migrated to RxJava2.x. As usual, I kept backward compatibility with RxJava1.x. You can find more details about the project at &lt;a href=&#34;https://github.com/pwittchen/prefser&#34;&gt;https://github.com/pwittchen/prefser&lt;/a&gt;. If you want to use it in your mobile project, you need the following dependencies in the &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Releasing Prefser v. 2.0.7</title>
      <link>https://wittchen.io/posts/prefser-207/</link>
      <pubDate>Sun, 28 May 2017 20:48:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/prefser-207/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve recently released new version of &lt;a href=&#34;https://github.com/pwittchen/prefser&#34;&gt;Prefser&lt;/a&gt;. It&amp;rsquo;s a wrapper for Android SharedPreferences with object serialization and RxJava Observables. The new version number is &lt;a href=&#34;https://github.com/pwittchen/prefser/releases/tag/v2.0.7&#34;&gt;2.0.7&lt;/a&gt;. In this release, I performed mostly internal work not related to the external library API. Nevertheless, it&amp;rsquo;s important for the library development in the future. The following things were done:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;updated dependencies&lt;/li&gt;
&lt;li&gt;updated Gradle configuration&lt;/li&gt;
&lt;li&gt;migrated unit tests to Robolectric&lt;/li&gt;
&lt;li&gt;started executing unit tests on Travis CI&lt;/li&gt;
&lt;li&gt;added integration with codecov.io and coverage report&lt;/li&gt;
&lt;li&gt;extracted code related to accessors from the Prefser class (refactoring library internals)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Organizational work is done and now I&amp;rsquo;m ready for migration to RxJava2 in this project on a separate branch. I want to keep backward compatibility with RxJava1 as in my other projects. This update is planned for version 2.1.0. Stay tuned!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Monitoring usage of open-source projects</title>
      <link>https://wittchen.io/posts/monitoring-usage-of-oss/</link>
      <pubDate>Tue, 02 May 2017 19:51:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/monitoring-usage-of-oss/</guid>
      <description>&lt;p&gt;While developing open-source projects it&amp;rsquo;s important to monitor usage of them. Having that information we know on which projects we should concentrate the most and which are becoming more popular. In this short article, I&amp;rsquo;ll present you two tools, which can help you with that.&lt;/p&gt;
&lt;h2 id=&#34;github&#34;&gt;GitHub&lt;/h2&gt;
&lt;p&gt;On GitHub, each project has &amp;ldquo;Traffic&amp;rdquo; tab. After clicking on it, we can see how many visitors and unique visitors we have, we can also check how many project clones and unique clones were performed (including CI servers). Moreover, we can see referring sites for our projects. It&amp;rsquo;s useful information because we can check how people gather information about our project.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ReactiveNetwork - release v. 0.9.0 with RxJava2.x support</title>
      <link>https://wittchen.io/posts/reactivenetwork-090-rxjava2/</link>
      <pubDate>Tue, 11 Apr 2017 06:04:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/reactivenetwork-090-rxjava2/</guid>
      <description>&lt;p&gt;This time, I upgraded my another reactive Android open-source project called &lt;a href=&#34;https://github.com/pwittchen/ReactiveNetwork&#34;&gt;ReactiveNetwork&lt;/a&gt; to RxJava2.x. Many thanks goes to &lt;a href=&#34;https://github.com/tushar-acharya&#34;&gt;@tushar-acharya&lt;/a&gt; who performed initial migration to the newer version of RxJava. During migration, I&amp;rsquo;ve also created new package &lt;code&gt;rx2&lt;/code&gt; to avoid potential import conflicts during migration inside Android apps. Besides migration, I&amp;rsquo;ve updated sample apps, documentation &amp;amp; JavaDocs on Github pages. You can still use RxJava1.x version and it&amp;rsquo;s available on the branch with that name. To use brand new ReactiveNetwork compatible with RxJava2.x, add the following dependency to your &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to make open-source projects, which people want to use</title>
      <link>https://wittchen.io/posts/how-to-make-open-source-projects-which-people-want-to-use/</link>
      <pubDate>Sat, 01 Apr 2017 17:22:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/how-to-make-open-source-projects-which-people-want-to-use/</guid>
      <description>&lt;p&gt;Today at &lt;a href=&#34;http://careercon.pl/konferencja/kariera-it-katowice-01-04-2017/&#34;&gt;Kariera IT&lt;/a&gt; conference in Katowice, Poland, I presented talk explaining &lt;strong&gt;how to make open-source projects, which people want to use&lt;/strong&gt; from my perspective. Below, you can find slides from my presentation. Thank you all for the attendance, interesting questions and organizers for inviting me. I hope you learned something new. Of course, any constructive feedback for this talk will be appreciated :).&lt;/p&gt;



&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;2df04d70e41647a89218b61b8dddb523&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;



&lt;p&gt;Link: &lt;a href=&#34;https://speakerdeck.com/pwittchen/how-to-make-open-source-projects-which-people-want-to-use&#34;&gt;How to make open-source projects, which people want to use&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>ReactiveNetwork - release of v. 0.2.0</title>
      <link>https://wittchen.io/posts/reactive-network-2/</link>
      <pubDate>Thu, 11 Feb 2016 19:19:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/reactive-network-2/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve recently released new version of &lt;a href=&#34;https://github.com/pwittchen/ReactiveNetwork&#34;&gt;ReactiveNetwork&lt;/a&gt; library for Android. Here are the fresh &lt;strong&gt;release notes&lt;/strong&gt; for &lt;a href=&#34;https://github.com/pwittchen/ReactiveNetwork/releases/tag/v0.2.0&#34;&gt;version 0.2.0&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;added possibility to observe WiFi signal level with &lt;code&gt;observeWifiSignalLevel(context, numLevels)&lt;/code&gt; and &lt;code&gt;observeWifiSignalLevel(context)&lt;/code&gt; method&lt;/li&gt;
&lt;li&gt;created &lt;code&gt;WifiSignalLevel&lt;/code&gt; enum&lt;/li&gt;
&lt;li&gt;added internet check to parameters of &lt;code&gt;getConnectivityStatus(context, checkInternet)&lt;/code&gt; method&lt;/li&gt;
&lt;li&gt;made &lt;code&gt;getConnectivityStatus(context, checkInternet)&lt;/code&gt; method public&lt;/li&gt;
&lt;li&gt;changed String variable status in &lt;code&gt;ConnectivityStatus&lt;/code&gt; enum to description and made it public&lt;/li&gt;
&lt;li&gt;changed output of the &lt;code&gt;toString()&lt;/code&gt; method in &lt;code&gt;ConnectivityStatus&lt;/code&gt; to keep consistency with another enum&lt;/li&gt;
&lt;li&gt;made &lt;code&gt;ReactiveNetwork&lt;/code&gt; class non-final&lt;/li&gt;
&lt;li&gt;bumped Kotlin version in sample app to 1.0.0-rc-1036&lt;/li&gt;
&lt;li&gt;increased immutability of code of the library&lt;/li&gt;
&lt;li&gt;updated sample apps and documentation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/llp&#34;&gt;@llp&lt;/a&gt; and his Pull Request, we are able to &lt;a href=&#34;https://github.com/pwittchen/ReactiveNetwork#observing-wifi-signal-level&#34;&gt;observe WiFi signal level&lt;/a&gt; AKA &lt;a href=&#34;https://en.wikipedia.org/wiki/Received_signal_strength_indication&#34;&gt;RSSI&lt;/a&gt; now!&lt;/p&gt;</description>
    </item>
    <item>
      <title>New release of Kirai - elegant string formatting library for Java</title>
      <link>https://wittchen.io/posts/new-release-of-kirai-140/</link>
      <pubDate>Sun, 22 Nov 2015 20:34:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/new-release-of-kirai-140/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve recently released version &lt;strong&gt;1.4.0&lt;/strong&gt; of &lt;a href=&#34;https://github.com/pwittchen/kirai&#34;&gt;Kirai&lt;/a&gt; library. Kirai means &lt;em&gt;phrase&lt;/em&gt; in Swahili language. It&amp;rsquo;s string formatting library written in Java. It originally started as an Android library, but it evolved to pure Java library. It&amp;rsquo;s first possibilities were basic string formatting and text formatting for Android TextViews. Now, it allows to format strings for &lt;strong&gt;Java&lt;/strong&gt;, &lt;strong&gt;Web&lt;/strong&gt;, &lt;strong&gt;Android&lt;/strong&gt; and even &lt;strong&gt;Unix Terminal&lt;/strong&gt;! Have you ever wanted to have colorful and styled text in your mobile app, website or terminal app? Now you can with an elegant and fluent API! Moreover, I&amp;rsquo;ve added test coverage supported by &lt;a href=&#34;http://codecov.io&#34;&gt;codecov.io&lt;/a&gt;. It&amp;rsquo;s really nice service, which integrates with &lt;a href=&#34;http://travis-ci.org&#34;&gt;Travis CI&lt;/a&gt; and is free for open-source projects. It&amp;rsquo;s available for various programming languages and build systems. Check library source code and samples at: &lt;a href=&#34;https://github.com/pwittchen/kirai&#34;&gt;https://github.com/pwittchen/kirai&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bunch of updates in my OSS for Android</title>
      <link>https://wittchen.io/posts/bunch-of-updates-in-my-android-oss/</link>
      <pubDate>Sun, 08 Nov 2015 16:53:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/bunch-of-updates-in-my-android-oss/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In the last days I prepared a bunch of updates in my open-source software for Android. Most of them are bug fixes and are related to increasing robustness of the projects as well as their overall quality. I also decided to play a little with &lt;a href=&#34;https://kotlinlang.org/&#34;&gt;Kotlin&lt;/a&gt; language from JetBrains, which seems to be reasonable choice for mobile applications running on Android. Nevertheless, writing an app in Kotlin requires some additional configuration and we should remember, it&amp;rsquo;s still in beta version. If you are interested in Kotlin programming for Android, take a look at &lt;a href=&#34;https://kotlinlang.org/docs/tutorials/kotlin-android.html&#34;&gt;Getting started with Android and Kotlin&lt;/a&gt; guide from official Kotlin website. You can also take a look at &lt;a href=&#34;https://github.com/pwittchen/ReactiveNetwork/tree/master/app-kotlin&#34;&gt;one of my sample apps&lt;/a&gt; written in Kotlin and &lt;a href=&#34;https://github.com/pwittchen/ReactiveNetwork/blob/master/app-kotlin/build.gradle&#34;&gt;its configuration in Gradle&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introducing ReactiveNetwork</title>
      <link>https://wittchen.io/posts/introducing-reactive-network/</link>
      <pubDate>Mon, 10 Aug 2015 21:52:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/introducing-reactive-network/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve recently released &lt;a href=&#34;https://github.com/pwittchen/ReactiveNetwork&#34;&gt;ReactiveNetwork&lt;/a&gt;. It is an open-source Android library listening network connection state and change of the WiFi signal strength with &lt;a href=&#34;https://github.com/ReactiveX/RxJava&#34;&gt;RxJava&lt;/a&gt; Observables. It&amp;rsquo;s a successor of &lt;a href=&#34;https://github.com/pwittchen/NetworkEvents&#34;&gt;Network Events&lt;/a&gt; library rewritten with Reactive Programming approach.&lt;/p&gt;
&lt;p&gt;Library is compatible with RxJava 1.0.+ and RxAndroid 1.0.+ and uses them under the hood. Min Android SDK version is 9.
JavaDoc can be found at: &lt;a href=&#34;http://pwittchen.github.io/ReactiveNetwork&#34;&gt;http://pwittchen.github.io/ReactiveNetwork&lt;/a&gt;.
Repository is available at: &lt;a href=&#34;https://github.com/pwittchen/ReactiveNetwork&#34;&gt;https://github.com/pwittchen/ReactiveNetwork&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This library is much simpler and easier to use than NetworkEvents. Even code-base is much smaller, but we have to remember that it utilizes powerful RxJava and RxAndroid. RxJava hase huge API and gives a lot of possibilities. That&amp;rsquo;s why I was able to obtain desired result with fewer lines of code.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Releasing prefser 2.0.0</title>
      <link>https://wittchen.io/posts/releasing-prefser-2/</link>
      <pubDate>Thu, 06 Aug 2015 22:34:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/releasing-prefser-2/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve recently released &lt;a href=&#34;https://github.com/pwittchen/prefser&#34;&gt;Prefser&lt;/a&gt; library v. &lt;a href=&#34;https://github.com/pwittchen/prefser/releases/tag/v2.0.0&#34;&gt;2.0.0&lt;/a&gt;. Prefser is a wrapper for Android SharedPreferences with object serialization and RxJava Observables. This update couldn&amp;rsquo;t be done without help of awesome open-source community and people who reported new issues and created pull requests. Thanks for that! A lot of issues related to RxJava was fixed. Moreover, now we can store and retrieve lists of objects of any type with Prefser. Examples of library usage can be found in &lt;code&gt;README.md&lt;/code&gt; file and in unit tests covering 96% of the code. Below, you can find release notes for this version of the library:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Releasing NetworkEvents 2.0.0</title>
      <link>https://wittchen.io/posts/releasing-network-events-2/</link>
      <pubDate>Fri, 31 Jul 2015 09:28:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/releasing-network-events-2/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve recently released &lt;a href=&#34;https://github.com/pwittchen/NetworkEvents&#34;&gt;NetworkEvents&lt;/a&gt; library &lt;a href=&#34;https://github.com/pwittchen/NetworkEvents/releases/tag/v2.0.0&#34;&gt;v. 2.0.0&lt;/a&gt;. It&amp;rsquo;s an Android library listening network connection state and change of the Wifi signal strength. It has a few significant changes in the API and new features, which people were requesting on GitHub. Moreover, codebase was slightly refactored and updated. I&amp;rsquo;m going to keep &lt;code&gt;major.minor.patch&lt;/code&gt; convention AKA semantic versioning now:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;major&lt;/strong&gt; - new feature or update - backward incompatible&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;minor&lt;/strong&gt; - new feature - backward compatible&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;patch&lt;/strong&gt; - bug-fix - backward compatible&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A few changes are backward incompatible, so I&amp;rsquo;ve increased &lt;code&gt;major&lt;/code&gt; number. Below, you can find list of changes. As you can see, there is a lot of stuff. That&amp;rsquo;s why I&amp;rsquo;ve made the most important changes &lt;strong&gt;bold&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Releasing Weather Icon View v. 1.0.0 for Android</title>
      <link>https://wittchen.io/posts/releasing-weather-icon-view-1-for-android/</link>
      <pubDate>Tue, 21 Jul 2015 17:34:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/releasing-weather-icon-view-1-for-android/</guid>
      <description>&lt;p&gt;Today I released &lt;a href=&#34;https://github.com/pwittchen/WeatherIconView&#34;&gt;Weather Icon View&lt;/a&gt; library v. &lt;a href=&#34;https://github.com/pwittchen/WeatherIconView/releases/tag/v1.0.0&#34;&gt;1.0.0&lt;/a&gt; It&amp;rsquo;s very simple and easy to use Android library, which allows you to use &lt;a href=&#34;https://github.com/erikflowers/weather-icons/&#34;&gt;Weather Icons&lt;/a&gt; created by &lt;a href=&#34;https://github.com/erikflowers&#34;&gt;Erik Flowers&lt;/a&gt; in your mobile applications. This library was already available on GitHub as I wrote in &lt;a href=&#34;http://blog.wittchen.biz.pl/weather-icons-for-android-applications/&#34;&gt;one of my previous posts&lt;/a&gt;, but today it was released to Maven Central Repository and you can use it as &lt;a href=&#34;https://github.com/pwittchen/WeatherIconView#download&#34;&gt;Maven or Gradle dependency&lt;/a&gt;. I was encouraged to make this project more available by the open-source community and people who find it useful as I could read in the &lt;a href=&#34;https://github.com/pwittchen/WeatherIconView/issues/1&#34;&gt;issue&lt;/a&gt; reported on the repository website. Thanks for that. You can find more details, usage examples and sample app in the repository of the project at: &lt;a href=&#34;https://github.com/pwittchen/WeatherIconView&#34;&gt;https://github.com/pwittchen/WeatherIconView&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Releasing prefser v. 1.0.5</title>
      <link>https://wittchen.io/posts/releasing-prefser-v-105/</link>
      <pubDate>Thu, 18 Jun 2015 20:46:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/releasing-prefser-v-105/</guid>
      <description>&lt;p&gt;I am happy to announce that I released version 1.0.5 of &lt;a href=&#34;https://github.com/pwittchen/prefser&#34;&gt;Prefser&lt;/a&gt; Android library. Prefser is a wrapper for Android SharedPreferences with object serialization and RxJava Observables. What has been done in this version:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Removed &lt;code&gt;final&lt;/code&gt; keyword from &lt;code&gt;Prefser&lt;/code&gt; class in order to allow class mocking thanks to &lt;a href=&#34;https://github.com/plackemacher&#34;&gt;@plackemacher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Removed unused imports from &lt;code&gt;Prefser&lt;/code&gt; class&lt;/li&gt;
&lt;li&gt;Added &lt;a href=&#34;http://blog.wittchen.biz.pl/test-coverage-report-for-android-application/&#34;&gt;test coverage report generation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pwittchen.github.io/prefser/test-coverage-report&#34;&gt;Increased test coverage to 100%&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Added abstraction for &lt;code&gt;JsonConverter&lt;/code&gt; and default &lt;code&gt;GsonConverter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;getAndObserve(...)&lt;/code&gt; method&lt;/li&gt;
&lt;li&gt;Emiting current value right on subscription to &lt;code&gt;Observable&lt;/code&gt; with &lt;code&gt;getAndObserve(...)&lt;/code&gt; method, which is idea provided by &lt;a href=&#34;https://github.com/semanticer&#34;&gt;@semanticer&lt;/a&gt;. Thanks!&lt;/li&gt;
&lt;li&gt;Added GitHub pages with generated JavaDoc documentation on &lt;code&gt;gh-pages&lt;/code&gt; branch available at: &lt;a href=&#34;http://pwittchen.github.io/prefser&#34;&gt;http://pwittchen.github.io/prefser&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Moreover you can browse auto-generated reports:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introducing prefser</title>
      <link>https://wittchen.io/posts/introducing-prefser/</link>
      <pubDate>Sun, 22 Feb 2015 22:39:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/introducing-prefser/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve recently released &lt;a href=&#34;https://github.com/pwittchen/prefser&#34;&gt;Prefser&lt;/a&gt;, which is a wrapper for Android &lt;a href=&#34;http://developer.android.com/reference/android/content/SharedPreferences.html&#34;&gt;SharedPreferences&lt;/a&gt; with object serialization and &lt;a href=&#34;https://github.com/ReactiveX/RxJava&#34;&gt;RxJava&lt;/a&gt; Observables. Prefser wraps SharedPreferences and thanks to Java Generics provides you simpler API than classic SharedPreferences with only two methods:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Class&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;classOfT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;defaultValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Classic SharedPreferences allows you to store only primitive data types and set of strings. Thanks to &lt;a href=&#34;https://code.google.com/p/google-gson/&#34;&gt;Gson&lt;/a&gt; serialization, Prefser allows you to store:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Primitive data types (boolean, float, int, long, double)&lt;/li&gt;
&lt;li&gt;Strings&lt;/li&gt;
&lt;li&gt;Custom Objects&lt;/li&gt;
&lt;li&gt;Lists&lt;/li&gt;
&lt;li&gt;Arrays&lt;/li&gt;
&lt;li&gt;Sets&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition, Prefser transforms &lt;a href=&#34;http://developer.android.com/reference/android/content/SharedPreferences.OnSharedPreferenceChangeListener.html&#34;&gt;OnSharedPreferenceChangeListener&lt;/a&gt; into Observables from RxJava:&lt;/p&gt;</description>
    </item>
    <item>
      <title>NetworkEvents v. 1.0.2</title>
      <link>https://wittchen.io/posts/network-events-v102/</link>
      <pubDate>Sun, 15 Feb 2015 00:16:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/network-events-v102/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve recently released &lt;a href=&#34;https://github.com/pwittchen/NetworkEvents&#34;&gt;NetworkEvents&lt;/a&gt; v. 1.0.2. In case, you don&amp;rsquo;t know it, it&amp;rsquo;s an Android library listening network connection state and change of the Wifi signal strength. This version has small improvements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Updated &lt;code&gt;ping&lt;/code&gt; method in &lt;code&gt;NetworkHelper&lt;/code&gt; class.&lt;/li&gt;
&lt;li&gt;Detection of Internet access in WiFi network works faster and is more reliable.&lt;/li&gt;
&lt;li&gt;Added example of usage of NetworkEvents with &lt;a href=&#34;https://github.com/square/dagger&#34;&gt;Dagger&lt;/a&gt; in &lt;code&gt;example-dagger&lt;/code&gt; directory in the repository of the project.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Right now, we check Internet connection in a different way. Instead of sending HEAD or GET request to a specific website like &lt;a href=&#34;https://www.google.com&#34;&gt;www.google.com&lt;/a&gt;, we just ping 4.2.2.2 IP address. If you want to know why, read an article about &lt;a href=&#34;http://www.tummy.com/articles/famous-dns-server/&#34;&gt;4.2.2.2: The Story Behind a DNS Legend&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introducing NetworkEvents</title>
      <link>https://wittchen.io/posts/introducing-network-events/</link>
      <pubDate>Sat, 31 Jan 2015 20:35:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/introducing-network-events/</guid>
      <description>&lt;p&gt;I have released NetworkEvents library for Android. It&amp;rsquo;s a wrapper for system Broadcast Receivers built with Otto library. It allows you to listen change of connectivity status (connected to WiFi network with or without Internet access, mobile network, off-line) and change of the WiFi signal strength very easily with &lt;code&gt;@Subscribe&lt;/code&gt; annotation. The only thing you need to do, is to create &lt;code&gt;Bus&lt;/code&gt; and &lt;code&gt;NetworkEvents&lt;/code&gt; objects, register them in &lt;code&gt;onResume()&lt;/code&gt; method and unregister them in &lt;code&gt;onPause()&lt;/code&gt; method in your activity. After that, you can subscribe for the events you want to listen. Of course, remember to give your app appropriate permissions in &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file. In contrast to Broadcast Receivers available in Android SDK, NetworkEvents sends only one event per one occurrence of this event. Android Broadcast Receivers have a &lt;a href=&#34;http://stackoverflow.com/questions/8412714/broadcastreceiver-receives-multiple-identical-messages-for-one-event&#34;&gt;bug, which causes sending multiple Intents&lt;/a&gt; even if only one event occurred. This behavior may vary on different devices. Regardless of this fact, this bug was handled by NetworkEvents and you shouldn&amp;rsquo;t encounter that problem while using this library. Important facts:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Android resource converter</title>
      <link>https://wittchen.io/posts/android-resource-converter/</link>
      <pubDate>Sat, 17 Jan 2015 00:19:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/android-resource-converter/</guid>
      <description>&lt;p&gt;In international projects sometimes there&amp;rsquo;s a need to send resource files to the client in order to have translated strings. Client doesn&amp;rsquo;t have to understand XML notation and editing two or more files at the same time is inconvenient. It&amp;rsquo;s easier to send file which can be edited in MS Excel or Libre Office Calc. I&amp;rsquo;ve created Python scripts, which are able to convert Android xml resources with translations to a single &lt;code&gt;*.csv&lt;/code&gt; file ready to open in software for common users. In addition, there&amp;rsquo;s another script, which can generate xml resource files with translations from &lt;code&gt;*.csv&lt;/code&gt; file. Generating &lt;code&gt;*.csv&lt;/code&gt; file from resources is easy:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kirai - flavored Android string formatting library</title>
      <link>https://wittchen.io/posts/kirai-flavored-android-string-formatting-library/</link>
      <pubDate>Tue, 13 Jan 2015 19:12:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/kirai-flavored-android-string-formatting-library/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;Recently I&amp;rsquo;ve developed and realased to Maven Central Repository &lt;strong&gt;&lt;a href=&#34;https://github.com/pwittchen/kirai/&#34;&gt;Kirai&lt;/a&gt;&lt;/strong&gt;, which is &lt;strong&gt;flavored Android string formatting library&lt;/strong&gt;. Kirai means &lt;em&gt;phrase&lt;/em&gt; in Swahili language. Project is inspired by &lt;a href=&#34;https://github.com/square/phrase&#34;&gt;phrase&lt;/a&gt;, &lt;a href=&#34;https://github.com/polok/TaggerString&#34;&gt;TaggerString&lt;/a&gt; and &lt;a href=&#34;https://github.com/quiqueqs/BabushkaText&#34;&gt;BabushkaText&lt;/a&gt;. Kirai has fluent API similar to phrase with additional formatting similar to TaggerString and allows to add formatted pieces of text like BabushkaText. Development including writing Unit Tests took me about 2 days. Deployment and release to Maven Central Repository took me about 2 days as well. It was my first deployment, so it wasn&amp;rsquo;t so easy, but people from Sonatype are helpful, problems were solved very quickly and release went quite smooth.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
