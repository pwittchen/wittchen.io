<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rxjava on Piotr Wittchen</title>
    <link>https://wittchen.io/tags/rxjava/</link>
    <description>Recent content in rxjava on Piotr Wittchen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 11 Mar 2018 20:02:45 +0000</lastBuildDate>
    
	<atom:link href="https://wittchen.io/tags/rxjava/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introducing ReactiveBus</title>
      <link>https://wittchen.io/posts/introducing-reactive-bus/</link>
      <pubDate>Sun, 11 Mar 2018 20:02:45 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/introducing-reactive-bus/</guid>
      <description>Today, I&amp;rsquo;ve released my another tiny project. It&amp;rsquo;s a very simple implementation of Event Bus with RxJava 2 under the hood. This library is compatible with Java 1.7 or higher. I didn&amp;rsquo;t use Java 1.8 or 1.9 because I wanted to make it compatible with Android apps.
You can use it as follows:
Bus bus = ReactiveBus.create(); Disposable observer = bus.receive().subscribe(new Consumer&amp;lt;Event&amp;gt;() { @Override public void accept(Event event) { // handle event here  } }); Once, we created Event Bus object and our observer (or more precisely: disposable subscriber), we can start sending events:</description>
    </item>
    
    <item>
      <title>DroidCon Poland 2017 - Is your app really connected?</title>
      <link>https://wittchen.io/posts/droidcon-poland-2017-is-your-app-really-connected/</link>
      <pubDate>Sat, 02 Dec 2017 01:39:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/droidcon-poland-2017-is-your-app-really-connected/</guid>
      <description>Yesterday, I gave a presentation about connectivity in the Android apps during the DroidCon Poland 2017 Conference in Kraków.
Below, you can see slides from this presentation.
 View slides on SpeakerDeck
There&amp;rsquo;s also tweet related to this presentation from DroidCon Kraków:
Piotr Wittchen tells us about how we can we keep the track of network &amp;#x1f30e; or Internet connectivity changes in our app &amp;#x1f4f1;&amp;#x1f198;&amp;#x1f642; pic.twitter.com/7YGGzNJeb2
&amp;mdash; droidcon Kraków (@droidconkr) December 2, 2017  I hope, you enjoyed it.</description>
    </item>
    
    <item>
      <title>Simple reactive HTTP client and server with RxJava, Vert.x and Android</title>
      <link>https://wittchen.io/posts/simple-reactive-http-client-and-server-with-rxjava-vertx-and-android/</link>
      <pubDate>Thu, 09 Nov 2017 22:30:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/simple-reactive-http-client-and-server-with-rxjava-vertx-and-android/</guid>
      <description>During Hack Your Career event at the Silesian University of Technology, I&amp;rsquo;ve prepared a presentation titled Reactive Programming - Efficient Server Applications with a colleague from work. Arek told about theory of Reactive Programming, shown basic concepts, data types and a few examples in the code. During my part of the presentation, I&amp;rsquo;ve wrote a very simple server and client in Java (9 on the server, 7 on the client) with Vert.</description>
    </item>
    
    <item>
      <title>JDD 2017 - Get ready for java.util.concurrent.Flow! - summary</title>
      <link>https://wittchen.io/posts/jdd-2017-juc-flow-presentation-summary/</link>
      <pubDate>Thu, 05 Oct 2017 16:19:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/jdd-2017-juc-flow-presentation-summary/</guid>
      <description>Recently on the JDD 2017 conference, I gave a presentation regarding introduction to Reactive Streams standard in Java 9. I also talked about existing implementations of this standard with the strongest focus on RxJava2 and created simple Reactive Streams implementation in pure Java 9 during the presentation. Below, you can find slides from this talk.
 View presentation on SpeakerDeck
Code snippets shown during this presentation are available at https://github.com/pwittchen/java-flow-experiments. I have done a tiny live coding session during this talk.</description>
    </item>
    
    <item>
      <title>Introducing ReactiveAirplaneMode</title>
      <link>https://wittchen.io/posts/introducing-reactive-airplane-mode/</link>
      <pubDate>Tue, 15 Aug 2017 19:28:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/introducing-reactive-airplane-mode/</guid>
      <description>I&amp;rsquo;m continuing Rxfication of the Android. Recently I released brand new library called ReactiveAirplaneMode. As you may guess, it allows listening Airplane mode on Android device with RxJava observables. A usual I&amp;rsquo;ve hidden all implementation details, BroadcastReceivers and rest of the Android related stuff behind RxJava abstraction layer, so API is really simple. Just take a look on that:
ReactiveAirplaneMode.create() .observe(context) .subscribeOn(Schedulers.io()) .observeOn(AndroidSchedulers.mainThread()) .subscribe(isOn -&amp;gt; textView.setText(String.format(&amp;#34;Airplane mode on: %s&amp;#34;, isOn.toString()))); In the code above subscriber will be notified only when airplane mode changes.</description>
    </item>
    
    <item>
      <title>Releasing ReactiveNetwork v. 0.10.0</title>
      <link>https://wittchen.io/posts/releasing-reactivenetwork-v-0100/</link>
      <pubDate>Thu, 20 Jul 2017 20:02:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/releasing-reactivenetwork-v-0100/</guid>
      <description>I&amp;rsquo;ve recently released ReactiveNetwork library v. 0.10.0 for RxJava1.x and RxJava2.x. ReactiveNetwork is an Android library listening network connection state and Internet connectivity with RxJava Observables, which I&amp;rsquo;m developing for approximately 2 years now. In this version, I&amp;rsquo;ve done a few bug fixes and added new features for RxJava2.x version. Below, you can find the release notes: Release for RxJava1.x
 bumped RxJava1 version to 1.3.0 bumped test dependencies created Code of Conduct updated Kotlin version in sample apps added retrolambda to the sample Java app - issue #163 fixed behavior of network observing in disconnected state - issue #159  Release for RxJava2.</description>
    </item>
    
    <item>
      <title>Release of prefser v. 2.1.0 with RxJava2 support</title>
      <link>https://wittchen.io/posts/release-of-prefser-210-with-rxjava2/</link>
      <pubDate>Mon, 19 Jun 2017 16:56:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/release-of-prefser-210-with-rxjava2/</guid>
      <description>I&amp;rsquo;ve recently released new version of prefser library for Android. In case you don&amp;rsquo;t know, it&amp;rsquo;s a wrapper for Android SharedPreferences with object serialization and RxJava Observables. This version has the new artifact, which has codebase migrated to RxJava2.x. As usual, I kept backward compatibility with RxJava1.x. You can find more details about the project at https://github.com/pwittchen/prefser. If you want to use it in your mobile project, you need the following dependencies in the build.</description>
    </item>
    
    <item>
      <title>New reactive data types in RxJava2</title>
      <link>https://wittchen.io/posts/new-reactive-data-types-in-rxjava2/</link>
      <pubDate>Wed, 31 May 2017 17:49:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/new-reactive-data-types-in-rxjava2/</guid>
      <description>Introduction #  I&amp;rsquo;m still exploring reactive programming world and RxJava library. Recently, I&amp;rsquo;ve migrated a few of my open-source libraries from RxJava1 to RxJava2 and written yet another project in RxJava2 from the beginning. Nevertheless, I&amp;rsquo;m still learning this library and its concept. It&amp;rsquo;s very wide topic. In RxJava1 we simply had one reactive data type called Observable. In RxJava2, we have more data types like Observable, Flowable, Single, Maybe &amp;amp; Completable.</description>
    </item>
    
    <item>
      <title>Introducing YaaS Java SDK</title>
      <link>https://wittchen.io/posts/introducing-yaas-java-sdk/</link>
      <pubDate>Sun, 28 May 2017 21:24:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/introducing-yaas-java-sdk/</guid>
      <description>Introduction #  In my company, there&amp;rsquo;s a concept of so-called &amp;ldquo;innovation day&amp;rdquo;. I have the possibility to &amp;ldquo;use&amp;rdquo; 1 innovation day per 2 development sprints. Last year, I used only 1 day due to the tight release schedule and a lot of work. Now, we are right after release, so I had time to take innovation day once again. I&amp;rsquo;ve decided to create YaaS Java SDK. If you don&amp;rsquo;t know what the YaaS is, check out my previous article about basic usage of YaaS proxy for the microservice.</description>
    </item>
    
    <item>
      <title>Joining lists of RxJava Observables</title>
      <link>https://wittchen.io/posts/joining-lists-of-rxjava-observables/</link>
      <pubDate>Mon, 15 May 2017 20:37:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/joining-lists-of-rxjava-observables/</guid>
      <description>In RxJava we have a few operators for joining Observables. The most common are:
 concat merge zip  Take a look at the documentation in these links. It has interactive marble diagrams showing how the operators work on the streams. You can move marbles along the lines and see how the output stream changes. It really helps to understand how it works. Code snippets in this article are based on RxJava 2.</description>
    </item>
    
    <item>
      <title>Emitting different observables conditionally</title>
      <link>https://wittchen.io/posts/emitting-different-rxjava-observables-depending-on-the-condition-with-flatmap/</link>
      <pubDate>Sun, 14 May 2017 21:44:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/emitting-different-rxjava-observables-depending-on-the-condition-with-flatmap/</guid>
      <description>Sometimes, we may need to emit different RxJava Observables depending on the specific condition dynamically. Moreover, it&amp;rsquo;s good to do it right without breaking a chain (stream of Observables). We want to combine different Observables together and do not want to nest one subscription inside another subscription because this will lead us to &amp;ldquo;subscription hell&amp;rdquo; similar to &amp;ldquo;callback hell&amp;rdquo;. Luckily RxJava has mechanisms to deal with such problems. In this article, I&amp;rsquo;m basing my examples on RxJava 2.</description>
    </item>
    
    <item>
      <title>ReactiveNetwork - release v. 0.9.0 with RxJava2.x support</title>
      <link>https://wittchen.io/posts/reactivenetwork-090-rxjava2/</link>
      <pubDate>Tue, 11 Apr 2017 06:04:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/reactivenetwork-090-rxjava2/</guid>
      <description>This time, I upgraded my another reactive Android open-source project called ReactiveNetwork to RxJava2.x. Many thanks goes to @tushar-acharya who performed initial migration to the newer version of RxJava. During migration, I&amp;rsquo;ve also created new package rx2 to avoid potential import conflicts during migration inside Android apps. Besides migration, I&amp;rsquo;ve updated sample apps, documentation &amp;amp; JavaDocs on Github pages. You can still use RxJava1.x version and it&amp;rsquo;s available on the branch with that name.</description>
    </item>
    
    <item>
      <title>Reactive Live Coding during GDG DevFest 2015 in Poland</title>
      <link>https://wittchen.io/posts/reactive-live-coding-gdg-devfest-pl-2015/</link>
      <pubDate>Sun, 29 Nov 2015 20:16:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/reactive-live-coding-gdg-devfest-pl-2015/</guid>
      <description>I was asked to be a speaker during GDG DevFest 2015 conference in Warsaw, Poland. Of course, I accepted this invitation and prepared presentation titled &amp;ldquo;Reactive Live Coding&amp;rdquo;. Presentation covered basics of Reactive Programming, RxJava and RxAndroid. Besides my talk I&amp;rsquo;ve done live coding to show how to use mentioned libraries and basics principles of Reactive Programming in real life. I had only 20 minutes for all of that, so my time-box was very limited.</description>
    </item>
    
    <item>
      <title>Introducing ReactiveNetwork</title>
      <link>https://wittchen.io/posts/introducing-reactive-network/</link>
      <pubDate>Mon, 10 Aug 2015 21:52:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/introducing-reactive-network/</guid>
      <description>I&amp;rsquo;ve recently released ReactiveNetwork. It is an open-source Android library listening network connection state and change of the WiFi signal strength with RxJava Observables. It&amp;rsquo;s a successor of Network Events library rewritten with Reactive Programming approach.
Library is compatible with RxJava 1.0.+ and RxAndroid 1.0.+ and uses them under the hood. Min Android SDK version is 9. JavaDoc can be found at: http://pwittchen.github.io/ReactiveNetwork. Repository is available at: https://github.com/pwittchen/ReactiveNetwork.
This library is much simpler and easier to use than NetworkEvents.</description>
    </item>
    
  </channel>
</rss>