<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Rxjava on Piotr Wittchen</title>
    <link>https://wittchen.io/tags/rxjava/</link>
    <description>Recent content in Rxjava on Piotr Wittchen</description>
    <generator>Hugo -- 0.140.2</generator>
    <language>en</language>
    <lastBuildDate>Sun, 11 Mar 2018 20:02:45 +0000</lastBuildDate>
    <atom:link href="https://wittchen.io/tags/rxjava/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introducing ReactiveBus</title>
      <link>https://wittchen.io/posts/introducing-reactive-bus/</link>
      <pubDate>Sun, 11 Mar 2018 20:02:45 +0000</pubDate>
      <guid>https://wittchen.io/posts/introducing-reactive-bus/</guid>
      <description>&lt;p&gt;Today, I&amp;rsquo;ve released my another tiny project. It&amp;rsquo;s a very simple implementation of Event Bus with RxJava 2 under the hood. This library is compatible with Java 1.7 or higher. I didn&amp;rsquo;t use Java 1.8 or 1.9 because I wanted to make it compatible with Android apps.&lt;/p&gt;
&lt;p&gt;You can use it as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Bus&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bus&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReactiveBus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Disposable&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;observer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;receive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;subscribe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Consumer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Event&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;accept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Event&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// handle event here&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once, we created Event Bus object and our observer (or more precisely: disposable subscriber), we can start sending events:&lt;/p&gt;</description>
    </item>
    <item>
      <title>DroidCon Poland 2017 - Is your app really connected?</title>
      <link>https://wittchen.io/posts/droidcon-poland-2017-is-your-app-really-connected/</link>
      <pubDate>Sat, 02 Dec 2017 01:39:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/droidcon-poland-2017-is-your-app-really-connected/</guid>
      <description>&lt;p&gt;Yesterday, I gave a presentation about connectivity in the Android apps during the &lt;a href=&#34;http://droidcon.pl&#34;&gt;DroidCon Poland 2017&lt;/a&gt; Conference in Kraków.&lt;/p&gt;
&lt;p&gt;Below, you can see slides from this presentation.&lt;/p&gt;


&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;2a3a400c94c1497d8a2343e269c7d1ce&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;http://speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/pwittchen/is-your-app-really-connected-1&#34;&gt;View slides on SpeakerDeck&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s also tweet related to this presentation from &lt;a href=&#34;https://twitter.com/droidconkr&#34;&gt;DroidCon Kraków&lt;/a&gt;:&lt;/p&gt;


&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Piotr Wittchen tells us about how we can we keep the track of network &amp;#x1f30e; or Internet connectivity changes in our app &amp;#x1f4f1;&amp;#x1f198;&amp;#x1f642; &lt;a href=&#34;https://t.co/7YGGzNJeb2&#34;&gt;pic.twitter.com/7YGGzNJeb2&lt;/a&gt;&lt;/p&gt;&amp;mdash; droidcon Kraków (@droidconkr) &lt;a href=&#34;https://twitter.com/droidconkr/status/936889529566347265?ref_src=twsrc%5Etfw&#34;&gt;December 2, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;


&lt;p&gt;I hope, you enjoyed it. Any kind of feedback is welcome (in the comments below this article or via e-mail). Don&amp;rsquo;t forget to check &lt;a href=&#34;https://github.com/pwittchen/ReactiveNetwork&#34;&gt;ReactiveNetwork&lt;/a&gt; library I mentioned during the presentation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Simple reactive HTTP client and server with RxJava, Vert.x and Android</title>
      <link>https://wittchen.io/posts/simple-reactive-http-client-and-server-with-rxjava-vertx-and-android/</link>
      <pubDate>Thu, 09 Nov 2017 22:30:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/simple-reactive-http-client-and-server-with-rxjava-vertx-and-android/</guid>
      <description>&lt;p&gt;During &lt;a href=&#34;https://www.facebook.com/Hack.your.Career/&#34;&gt;Hack Your Career&lt;/a&gt; event at the Silesian University of Technology, I&amp;rsquo;ve prepared a presentation titled &lt;a href=&#34;https://speakerdeck.com/pwittchen/reactive-programming-efficient-server-applications&#34;&gt;Reactive Programming - Efficient Server Applications&lt;/a&gt; with a colleague from work. Arek told about theory of Reactive Programming, shown basic concepts, data types and a few examples in the code. During my part of the presentation, I&amp;rsquo;ve wrote a very simple server and client in Java (9 on the server, 7 on the client) with &lt;a href=&#34;http://vertx.io/&#34;&gt;Vert.x&lt;/a&gt; (&lt;a href=&#34;http://vertx.io/docs/vertx-core/java/&#34;&gt;Core&lt;/a&gt; and &lt;a href=&#34;http://vertx.io/docs/vertx-rx/java2/&#34;&gt;Rx&lt;/a&gt;), &lt;a href=&#34;https://github.com/ReactiveX/RxJava&#34;&gt;RxJava 2&lt;/a&gt;, &lt;a href=&#34;https://github.com/square/okhttp&#34;&gt;OkHttp 3&lt;/a&gt;, &lt;a href=&#34;https://www.android.com/&#34;&gt;Android&lt;/a&gt; and &lt;a href=&#34;https://github.com/ReactiveX/RxAndroid/&#34;&gt;RxAndroid&lt;/a&gt;. Presentation was targeted mainly to the university students with no experience with reactive programming, but it was an open event and anyone could attend it. Below, we can see a very simple code snippet showing how to create a reactive HTTP server with Vert.x. We can create a stream of requests, make &lt;code&gt;Flowable&lt;/code&gt; out of it, apply any kind of RxJava 2 operator including backpressure handling and subscribe the stream. Moreover, we can also reactively start the server with &lt;code&gt;rxListen(int port)&lt;/code&gt; method. This is just a basic example, where will be sending request to the only one endpoint. In the case, when we want to handle more endpoints, we can use &lt;a href=&#34;http://vertx.io/docs/vertx-web/java/&#34;&gt;vertx-web&lt;/a&gt; library and design REST API.&lt;/p&gt;</description>
    </item>
    <item>
      <title>JDD 2017 - Get ready for java.util.concurrent.Flow! - summary</title>
      <link>https://wittchen.io/posts/jdd-2017-juc-flow-presentation-summary/</link>
      <pubDate>Thu, 05 Oct 2017 16:19:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/jdd-2017-juc-flow-presentation-summary/</guid>
      <description>&lt;p&gt;Recently on the &lt;a href=&#34;http://jdd.org.pl&#34;&gt;JDD 2017&lt;/a&gt; conference, I gave a presentation regarding introduction to Reactive Streams standard in Java 9. I also talked about existing implementations of this standard with the strongest focus on RxJava2 and created simple Reactive Streams implementation in pure Java 9 during the presentation. Below, you can find slides from this talk.&lt;/p&gt;



&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;93c73ed4eaae4201a41d85bb381d1bb4&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;



&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/pwittchen/get-ready-for-java-dot-util-dot-concurrent-dot-flow&#34;&gt;View presentation on SpeakerDeck&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Code snippets shown during this presentation are available at &lt;a href=&#34;https://github.com/pwittchen/java-flow-experiments&#34;&gt;https://github.com/pwittchen/java-flow-experiments&lt;/a&gt;. I have done a tiny live coding session during this talk. Luckily, everything went fine, the code was compiled and executed without errors. Everything I&amp;rsquo;ve done during this presentation and additional exploratory unit tests could be found in this repository so you can check it out if you&amp;rsquo;re interested.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introducing ReactiveAirplaneMode</title>
      <link>https://wittchen.io/posts/introducing-reactive-airplane-mode/</link>
      <pubDate>Tue, 15 Aug 2017 19:28:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/introducing-reactive-airplane-mode/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m continuing &lt;em&gt;Rxfication&lt;/em&gt; of the Android. Recently I released brand new library called &lt;a href=&#34;https://github.com/pwittchen/ReactiveAirplaneMode&#34;&gt;&lt;strong&gt;ReactiveAirplaneMode&lt;/strong&gt;&lt;/a&gt;. As you may guess, it allows listening Airplane mode on Android device with RxJava observables. A usual I&amp;rsquo;ve hidden all implementation details, BroadcastReceivers and rest of the Android related stuff behind RxJava abstraction layer, so API is really simple. Just take a look on that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;ReactiveAirplaneMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;observe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;subscribeOn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Schedulers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;observeOn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AndroidSchedulers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;mainThread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;subscribe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isOn&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;textView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Airplane mode on: %s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isOn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the code above &lt;strong&gt;subscriber will be notified only when airplane mode changes&lt;/strong&gt;. If you want to &lt;strong&gt;read airplane mode and then listen to it&lt;/strong&gt;, you can use the following method:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Releasing ReactiveNetwork v. 0.10.0</title>
      <link>https://wittchen.io/posts/releasing-reactivenetwork-v-0100/</link>
      <pubDate>Thu, 20 Jul 2017 20:02:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/releasing-reactivenetwork-v-0100/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve recently released &lt;a href=&#34;https://github.com/pwittchen/ReactiveNetwork&#34;&gt;&lt;strong&gt;ReactiveNetwork&lt;/strong&gt;&lt;/a&gt; library v. &lt;strong&gt;0.10.0&lt;/strong&gt; for RxJava1.x and RxJava2.x. ReactiveNetwork is an Android library listening network connection state and Internet connectivity with RxJava Observables, which I&amp;rsquo;m developing for approximately 2 years now. In this version, I&amp;rsquo;ve done a few bug fixes and added new features for RxJava2.x version. Below, you can find the release notes: &lt;a href=&#34;https://github.com/pwittchen/ReactiveNetwork/releases/tag/v0.10.0&#34;&gt;&lt;strong&gt;Release for RxJava1.x&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bumped RxJava1 version to 1.3.0&lt;/li&gt;
&lt;li&gt;bumped test dependencies&lt;/li&gt;
&lt;li&gt;created Code of Conduct&lt;/li&gt;
&lt;li&gt;updated Kotlin version in sample apps&lt;/li&gt;
&lt;li&gt;added retrolambda to the sample Java app - issue &lt;a href=&#34;https://github.com/pwittchen/ReactiveNetwork/issues/163&#34;&gt;#163&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;fixed behavior of network observing in disconnected state - issue &lt;a href=&#34;https://github.com/pwittchen/ReactiveNetwork/issues/159&#34;&gt;#159&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/pwittchen/ReactiveNetwork/releases/tag/v0.10.0-rx2&#34;&gt;&lt;strong&gt;Release for RxJava2.x&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Release of prefser v. 2.1.0 with RxJava2 support</title>
      <link>https://wittchen.io/posts/release-of-prefser-210-with-rxjava2/</link>
      <pubDate>Mon, 19 Jun 2017 16:56:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/release-of-prefser-210-with-rxjava2/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve recently released new version of &lt;a href=&#34;https://github.com/pwittchen/prefser&#34;&gt;prefser&lt;/a&gt; library for Android. In case you don&amp;rsquo;t know, it&amp;rsquo;s a wrapper for Android SharedPreferences with object serialization and RxJava Observables. This version has the new artifact, which has codebase migrated to RxJava2.x. As usual, I kept backward compatibility with RxJava1.x. You can find more details about the project at &lt;a href=&#34;https://github.com/pwittchen/prefser&#34;&gt;https://github.com/pwittchen/prefser&lt;/a&gt;. If you want to use it in your mobile project, you need the following dependencies in the &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt;</description>
    </item>
    <item>
      <title>New reactive data types in RxJava2</title>
      <link>https://wittchen.io/posts/new-reactive-data-types-in-rxjava2/</link>
      <pubDate>Wed, 31 May 2017 17:49:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/new-reactive-data-types-in-rxjava2/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m still exploring reactive programming world and RxJava library. Recently, I&amp;rsquo;ve migrated a few of my open-source libraries from RxJava1 to RxJava2 and written yet another project in RxJava2 from the beginning. Nevertheless, I&amp;rsquo;m still learning this library and its concept. It&amp;rsquo;s very wide topic. In RxJava1 we simply had one reactive data type called &lt;code&gt;Observable&lt;/code&gt;. In RxJava2, we have more data types like &lt;code&gt;Observable&lt;/code&gt;, &lt;code&gt;Flowable&lt;/code&gt;, &lt;code&gt;Single&lt;/code&gt;, &lt;code&gt;Maybe&lt;/code&gt; &amp;amp; &lt;code&gt;Completable&lt;/code&gt;. In this article, I&amp;rsquo;ll briefly explain their purpose and tell you when to use which. The general idea behind these types is code semantics. We should tell consumer of our code, what he or she can expect from our API. Introducing more reactive data types can increase readability and stability of our code base.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introducing YaaS Java SDK</title>
      <link>https://wittchen.io/posts/introducing-yaas-java-sdk/</link>
      <pubDate>Sun, 28 May 2017 21:24:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/introducing-yaas-java-sdk/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In my company, there&amp;rsquo;s a concept of so-called &amp;ldquo;innovation day&amp;rdquo;. I have the possibility to &amp;ldquo;use&amp;rdquo; 1 innovation day per 2 development sprints. Last year, I used only 1 day due to the tight release schedule and a lot of work. Now, we are right after release, so I had time to take innovation day once again. I&amp;rsquo;ve decided to create &lt;a href=&#34;https://github.com/pwittchen/yaas-java-sdk&#34;&gt;&lt;strong&gt;YaaS Java SDK&lt;/strong&gt;&lt;/a&gt;. If you don&amp;rsquo;t know what the &lt;a href=&#34;http://yaas.io&#34;&gt;YaaS&lt;/a&gt; is, check out my previous article about basic usage of YaaS proxy for the microservice. In a few words, it&amp;rsquo;s a proxy for the microservices with authorization &amp;amp; monitoring capabilities, which allows using other services available on the YaaS market. SDK created by me is really simple, was created in a short period of time and does not cover all features of the YaaS. This SDK allows performing authorized requests to the microservices hidden behind YaaS proxy. Tech stack used for this project is as follows:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Joining lists of RxJava Observables</title>
      <link>https://wittchen.io/posts/joining-lists-of-rxjava-observables/</link>
      <pubDate>Mon, 15 May 2017 20:37:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/joining-lists-of-rxjava-observables/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;https://github.com/ReactiveX/RxJava&#34;&gt;RxJava&lt;/a&gt; we have a few operators for joining Observables. The most common are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://reactivex.io/documentation/operators/concat.html&#34;&gt;concat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://reactivex.io/documentation/operators/merge.html&#34;&gt;merge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://reactivex.io/documentation/operators/zip.html&#34;&gt;zip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Take a look at the documentation in these links. It has &lt;strong&gt;interactive marble diagrams&lt;/strong&gt; showing how the operators work on the streams. You can move marbles along the lines and see how the output stream changes. It really helps to understand how it works. Code snippets in this article are based on RxJava 2.1.0 with JUnit 4.12 and Google Truth 0.32 for unit tests. Let&amp;rsquo;s say, we have the following Observables:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Emitting different observables conditionally</title>
      <link>https://wittchen.io/posts/emitting-different-rxjava-observables-depending-on-the-condition-with-flatmap/</link>
      <pubDate>Sun, 14 May 2017 21:44:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/emitting-different-rxjava-observables-depending-on-the-condition-with-flatmap/</guid>
      <description>&lt;p&gt;Sometimes, we may need to emit different RxJava Observables depending on the specific condition dynamically. Moreover, it&amp;rsquo;s good to do it right without breaking a chain (stream of Observables). We want to combine different Observables together and do not want to nest one subscription inside another subscription because this will lead us to &amp;ldquo;subscription hell&amp;rdquo; similar to &amp;ldquo;callback hell&amp;rdquo;. Luckily RxJava has mechanisms to deal with such problems. In this article, I&amp;rsquo;m basing my examples on RxJava 2.1.0. Let&amp;rsquo;s say we have two Observables:&lt;/p&gt;</description>
    </item>
    <item>
      <title>ReactiveNetwork - release v. 0.9.0 with RxJava2.x support</title>
      <link>https://wittchen.io/posts/reactivenetwork-090-rxjava2/</link>
      <pubDate>Tue, 11 Apr 2017 06:04:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/reactivenetwork-090-rxjava2/</guid>
      <description>&lt;p&gt;This time, I upgraded my another reactive Android open-source project called &lt;a href=&#34;https://github.com/pwittchen/ReactiveNetwork&#34;&gt;ReactiveNetwork&lt;/a&gt; to RxJava2.x. Many thanks goes to &lt;a href=&#34;https://github.com/tushar-acharya&#34;&gt;@tushar-acharya&lt;/a&gt; who performed initial migration to the newer version of RxJava. During migration, I&amp;rsquo;ve also created new package &lt;code&gt;rx2&lt;/code&gt; to avoid potential import conflicts during migration inside Android apps. Besides migration, I&amp;rsquo;ve updated sample apps, documentation &amp;amp; JavaDocs on Github pages. You can still use RxJava1.x version and it&amp;rsquo;s available on the branch with that name. To use brand new ReactiveNetwork compatible with RxJava2.x, add the following dependency to your &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Reactive Live Coding during GDG DevFest 2015 in Poland</title>
      <link>https://wittchen.io/posts/reactive-live-coding-gdg-devfest-pl-2015/</link>
      <pubDate>Sun, 29 Nov 2015 20:16:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/reactive-live-coding-gdg-devfest-pl-2015/</guid>
      <description>&lt;p&gt;I was asked to be a speaker during &lt;a href=&#34;http://devfest.pl&#34;&gt;GDG DevFest&lt;/a&gt; 2015 conference in Warsaw, Poland. Of course, I accepted this invitation and prepared presentation titled &amp;ldquo;Reactive Live Coding&amp;rdquo;. Presentation covered basics of Reactive Programming, RxJava and RxAndroid. Besides my talk I&amp;rsquo;ve done live coding to show how to use mentioned libraries and basics principles of Reactive Programming in real life. I had only 20 minutes for all of that, so my time-box was very limited. Being a speaker at conference was really interesting and challenging experience, which I haven&amp;rsquo;t had before. Moreover, I could meet a lot of interesting people and hear very inspiring talks covering different topics. You can check activity from conference by browsing &lt;a href=&#34;https://twitter.com/search?q=%23devfest15pl&#34;&gt;#devfest15pl&lt;/a&gt; hashtag on Twitter and &lt;a href=&#34;https://www.facebook.com/events/595578613913819/&#34;&gt;Facebook event&lt;/a&gt;. You can also check official website of the conference at &lt;a href=&#34;http://devfest.pl&#34;&gt;devfest.pl&lt;/a&gt;. Slides from my presentation are available below.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introducing ReactiveNetwork</title>
      <link>https://wittchen.io/posts/introducing-reactive-network/</link>
      <pubDate>Mon, 10 Aug 2015 21:52:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/introducing-reactive-network/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve recently released &lt;a href=&#34;https://github.com/pwittchen/ReactiveNetwork&#34;&gt;ReactiveNetwork&lt;/a&gt;. It is an open-source Android library listening network connection state and change of the WiFi signal strength with &lt;a href=&#34;https://github.com/ReactiveX/RxJava&#34;&gt;RxJava&lt;/a&gt; Observables. It&amp;rsquo;s a successor of &lt;a href=&#34;https://github.com/pwittchen/NetworkEvents&#34;&gt;Network Events&lt;/a&gt; library rewritten with Reactive Programming approach.&lt;/p&gt;
&lt;p&gt;Library is compatible with RxJava 1.0.+ and RxAndroid 1.0.+ and uses them under the hood. Min Android SDK version is 9.
JavaDoc can be found at: &lt;a href=&#34;http://pwittchen.github.io/ReactiveNetwork&#34;&gt;http://pwittchen.github.io/ReactiveNetwork&lt;/a&gt;.
Repository is available at: &lt;a href=&#34;https://github.com/pwittchen/ReactiveNetwork&#34;&gt;https://github.com/pwittchen/ReactiveNetwork&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This library is much simpler and easier to use than NetworkEvents. Even code-base is much smaller, but we have to remember that it utilizes powerful RxJava and RxAndroid. RxJava hase huge API and gives a lot of possibilities. That&amp;rsquo;s why I was able to obtain desired result with fewer lines of code.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
