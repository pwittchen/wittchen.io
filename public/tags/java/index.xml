<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on Piotr Wittchen</title>
    <link>https://wittchen.io/tags/java/</link>
    <description>Recent content in java on Piotr Wittchen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Aug 2019 18:27:30 +0000</lastBuildDate>
    
	<atom:link href="https://wittchen.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Modifying mehtod&#39;s input parameters</title>
      <link>https://wittchen.io/posts/modifying-methods-input-parameters/</link>
      <pubDate>Mon, 05 Aug 2019 18:27:30 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/modifying-methods-input-parameters/</guid>
      <description>During maintenance of the legacy projects, I sometimes see constructions like:
void appendFooter(Report report); or
void populate(Data data); I even saw something like this:
void populate(Source source, Target target); What is wrong with these statements?
They&amp;rsquo;re using so called output argument. In the examples above, we&amp;rsquo;re passing a report or data variable, which usually are going to be global variables available in the scope of the whole class. These methods takes them as an argument and modify them.</description>
    </item>
    
    <item>
      <title>Get rid of the list null-checks</title>
      <link>https://wittchen.io/posts/get-rid-of-the-list-null-checks/</link>
      <pubDate>Sun, 28 Jul 2019 23:18:43 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/get-rid-of-the-list-null-checks/</guid>
      <description>During development of the legacy Java applications, we still have to deal with null. It&amp;rsquo;s possible to avoid it completly when we&amp;rsquo;re designing application from the scratch, applying proper code constructions, static code analysis and we&amp;rsquo;re consistent during code reviews. Nevertheless in majority of the cases we will encounter null in daily projects. We may even expect them in the method inputs and we have to be prepared for it. With the functional programming in Java we can deal with them in quite elegant way, but I often see people are not using features available nowadays.</description>
    </item>
    
    <item>
      <title>Zen of the Java library release process</title>
      <link>https://wittchen.io/posts/zen-of-java-library-release-process/</link>
      <pubDate>Sat, 08 Jun 2019 10:58:10 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/zen-of-java-library-release-process/</guid>
      <description>In my previous article I published information about publishing JAR/AAR library to the Maven Central Repository. A few steps of that process were automated, but a few of them were still manual. I mean closing and release process which had to be done by manual clicking on the Sonatype website. Fortunately, it&amp;rsquo;s possible to automate it. In order to do that, I used gradle-nexus-staging-plugin developed by Codearte. Thanks to this plugin I could get rid of the remaining manual steps left in the release process.</description>
    </item>
    
    <item>
      <title>Publishing a JAR/AAR to the Maven Central</title>
      <link>https://wittchen.io/posts/publishing-jar-aar-to-maven-central/</link>
      <pubDate>Fri, 24 May 2019 19:18:27 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/publishing-jar-aar-to-maven-central/</guid>
      <description>Introduction #  As a Java/JVM/Android developers we rely on the work of other people through frameworks and libraries. Many of them are open-source. Most of the developers are consumers of such projects. What if we would like to create our own library and distribute it to other developers? We can always create it and share a *.jar or *.aar file with others. Drawback of such solution is the fact that source of distribution may not be trusted.</description>
    </item>
    
    <item>
      <title>Creating a fat AAR</title>
      <link>https://wittchen.io/posts/creating-fat-aar/</link>
      <pubDate>Tue, 02 Oct 2018 00:01:31 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/creating-fat-aar/</guid>
      <description>I recently wrote a new library called NeuroSky Android SDK. It&amp;rsquo;s used for writing Android apps using signals of the brain waves received from the NeuroSky MindWave Mobile headsets. Probably I&amp;rsquo;ll write a separate article about it because it&amp;rsquo;s quite interesting topic. This library uses ThinkGear library, which is distributed by the NeuroSky as a *.jar file, so I couldn&amp;rsquo;t use it as a Gradle or Maven dependency in my project and I had to put this *.</description>
    </item>
    
    <item>
      <title>Separate execution of unit and integration tests in Gradle</title>
      <link>https://wittchen.io/posts/separate-execution-of-unit-and-integration-tests-in-gradle/</link>
      <pubDate>Sat, 22 Sep 2018 16:51:47 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/separate-execution-of-unit-and-integration-tests-in-gradle/</guid>
      <description>During development process, we often write unit and integration tests. While unit tests verify corectness of the small pieces of code, integration tests verify software as a whole project and sometimes can treat it as a black box where concrete results are expected. During development of the REST API, we can write integration tests for such API with REST Assured. Integration tests are usually slower, because they need to start the server and sometimes do other stuff.</description>
    </item>
    
    <item>
      <title>Excluding generated code from JaCoCo report</title>
      <link>https://wittchen.io/posts/excluding-generated-code-from-jacoco-report/</link>
      <pubDate>Tue, 18 Sep 2018 20:07:30 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/excluding-generated-code-from-jacoco-report/</guid>
      <description>I recently wrote a simple java app with Dagger 2 as a DI container and Gradle as a build system. I wanted to generate unit test coverage report for this app, so I used Jacoco.
In my build.gradle file I configured JaCoCo as follows:
plugins { id &amp;#39;jacoco&amp;#39; } jacocoTestReport { reports { xml.enabled = true html.enabled = true } } Now, I could type:
./gradlew test jacocoTestReport Report was generated in build/reports/jacoco/ directory.</description>
    </item>
    
    <item>
      <title>Testing exceptions</title>
      <link>https://wittchen.io/posts/testing-exceptions/</link>
      <pubDate>Tue, 04 Sep 2018 19:49:26 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/testing-exceptions/</guid>
      <description>In Java, we can test exceptions via unit tests in a few different ways. In this article, I&amp;rsquo;ll present common methods of doing that. Nevertheless, I suppose we there are different methods as well.
First method is basically wrapping a method call with try-catch block, assigning an exception to a variable and performing appropriate assertion. In these examples, I&amp;rsquo;m using JUnit for unit tests and Truth for assertions.
@Test public void shouldTestExceptionWithTryCatch() { Exception caughtException = null; try { throw new RuntimeExcetpion(&amp;#34;message&amp;#34;); } catch (final Exception e) { caughtException = e; } assertThat(caughtException).</description>
    </item>
    
    <item>
      <title>Writing my first library in Kotlin</title>
      <link>https://wittchen.io/posts/writing-my-first-library-in-kotlin/</link>
      <pubDate>Sun, 19 Aug 2018 10:24:19 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/writing-my-first-library-in-kotlin/</guid>
      <description>Introduction #  Recently, I decided to create a tiny Android library called RxBattery, which is monitoring battery state of the device with RxJava and RxKotlin. I created a few Java and Android libraries already and this time I decided to use Kotlin programming language instead of Java to learn something new and write something more complicated than &amp;ldquo;Hello World&amp;rdquo; app. Here are my observations.
Build System #  I used Gradle to build the project.</description>
    </item>
    
    <item>
      <title>Releasing ReactiveNetwork v. 1.0.0 (paying the technical debt)</title>
      <link>https://wittchen.io/posts/releasing-reactive-network-1/</link>
      <pubDate>Sun, 24 Jun 2018 23:39:18 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/releasing-reactive-network-1/</guid>
      <description>Today, I&amp;rsquo;ve released next version of my most popular open-source project - ReactiveNetwork. I&amp;rsquo;ve released version 0.12.4 for RxJava1.x and version 1.0.0 for RxJava2.x. Please note, RxJava1.x is no longer officially supported and I&amp;rsquo;m going to follow the same approach in my RxJava-based projects. It&amp;rsquo;s not the first release of this project, but I&amp;rsquo;m breaking the API and removing existing methods, so I decided to stick to proper versioning standard. I didn&amp;rsquo;t always do it properly in the past, but it&amp;rsquo;s never too late.</description>
    </item>
    
    <item>
      <title>Deployment of the Java code to AWS Lambda</title>
      <link>https://wittchen.io/posts/deployment-of-the-java-code-to-aws-lambda/</link>
      <pubDate>Sun, 18 Mar 2018 16:50:02 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/deployment-of-the-java-code-to-aws-lambda/</guid>
      <description>Introduction #  In the cloud computing era, companies start using services like Google Cloud Platform, Amazon Web Services or Microsoft Azure. We can hear about the term &amp;ldquo;Serverless&amp;rdquo;. It doesn&amp;rsquo;t mean that we don&amp;rsquo;t have any servers. It means that third-party services provide us server infsrastrucutre, monitoring and scaling capabilities, so we don&amp;rsquo;t have to care about that stuff by ourselves and we can focus on writing code. We have concepts like Backend as a Service (BaaS) and Funtion as a Service (FaaS).</description>
    </item>
    
    <item>
      <title>Introducing ReactiveBus</title>
      <link>https://wittchen.io/posts/introducing-reactive-bus/</link>
      <pubDate>Sun, 11 Mar 2018 20:02:45 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/introducing-reactive-bus/</guid>
      <description>Today, I&amp;rsquo;ve released my another tiny project. It&amp;rsquo;s a very simple implementation of Event Bus with RxJava 2 under the hood. This library is compatible with Java 1.7 or higher. I didn&amp;rsquo;t use Java 1.8 or 1.9 because I wanted to make it compatible with Android apps.
You can use it as follows:
Bus bus = ReactiveBus.create(); Disposable observer = bus.receive().subscribe(new Consumer&amp;lt;Event&amp;gt;() { @Override public void accept(Event event) { // handle event here  } }); Once, we created Event Bus object and our observer (or more precisely: disposable subscriber), we can start sending events:</description>
    </item>
    
    <item>
      <title>Automating generation of the on-line documentation for Java library</title>
      <link>https://wittchen.io/posts/automating-generation-of-the-on-line-documentation-for-java-library/</link>
      <pubDate>Sun, 11 Feb 2018 10:22:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/automating-generation-of-the-on-line-documentation-for-java-library/</guid>
      <description>Introduction #  In one of my open-source projects - ReactiveNetwork I have a documentation in README.md file and I have JavaDocs as well. This project is an Android library written in Java and built with Gradle. Moreover, I develop this project on two separate Git branches - one for RxJava1.x and another one for RxJava2.x. Similar convention is in the RxJava repository, so I followed it. After each release I publish documentation and JavaDocs on GitHub pages for both versions.</description>
    </item>
    
    <item>
      <title>Quality Meetup no. 15 - Fixing a billion dollar mistake</title>
      <link>https://wittchen.io/posts/quality-meetup-15-fixing-a-billion-dollar-mistake/</link>
      <pubDate>Fri, 09 Feb 2018 00:46:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/quality-meetup-15-fixing-a-billion-dollar-mistake/</guid>
      <description>On the 8th of February 2018, during Quality Meetup #15, I gave a presentation titled &amp;ldquo;Fixing a billion dollar mistake&amp;rdquo;. Tony Hoare introduced Null Reference w in ALGOL language in 1965. He calls this decision a &amp;ldquo;billion dollar mistake&amp;rdquo;. It was so easy to implement and probably it caused a loss of millions of dollars due to the mistakes done in the software over the 40 years. During the time, people came up with different ideas of solving that problem with software libraries, good programming practices, static code analysis and compile time code analysis.</description>
    </item>
    
    <item>
      <title>Creating a Docker container with Alpine Linux including Java 8 and 9</title>
      <link>https://wittchen.io/posts/creating-a-docker-container-with-alpine-linux-including-java-8-and-9/</link>
      <pubDate>Wed, 27 Dec 2017 14:43:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/creating-a-docker-container-with-alpine-linux-including-java-8-and-9/</guid>
      <description>Recently, I&amp;rsquo;ve decided to refresh my knowledge regarding Docker and created an image with Alpine Linux and Java 9, which can be a useful base for the future projects. I used Alpine as a base image because it became quite popular in the Docker world due to its simplicity and the fact that it&amp;rsquo;s pretty lightweight when we compare it to containers based on other Linux distributions. Pure Alpine Docker container has about 4.</description>
    </item>
    
    <item>
      <title>DroidCon Poland 2017 - Is your app really connected?</title>
      <link>https://wittchen.io/posts/droidcon-poland-2017-is-your-app-really-connected/</link>
      <pubDate>Sat, 02 Dec 2017 01:39:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/droidcon-poland-2017-is-your-app-really-connected/</guid>
      <description>Yesterday, I gave a presentation about connectivity in the Android apps during the DroidCon Poland 2017 Conference in Kraków.
Below, you can see slides from this presentation.
 View slides on SpeakerDeck
There&amp;rsquo;s also tweet related to this presentation from DroidCon Kraków:
Piotr Wittchen tells us about how we can we keep the track of network &amp;#x1f30e; or Internet connectivity changes in our app &amp;#x1f4f1;&amp;#x1f198;&amp;#x1f642; pic.twitter.com/7YGGzNJeb2
&amp;mdash; droidcon Kraków (@droidconkr) December 2, 2017  I hope, you enjoyed it.</description>
    </item>
    
    <item>
      <title>Simple reactive HTTP client and server with RxJava, Vert.x and Android</title>
      <link>https://wittchen.io/posts/simple-reactive-http-client-and-server-with-rxjava-vertx-and-android/</link>
      <pubDate>Thu, 09 Nov 2017 22:30:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/simple-reactive-http-client-and-server-with-rxjava-vertx-and-android/</guid>
      <description>During Hack Your Career event at the Silesian University of Technology, I&amp;rsquo;ve prepared a presentation titled Reactive Programming - Efficient Server Applications with a colleague from work. Arek told about theory of Reactive Programming, shown basic concepts, data types and a few examples in the code. During my part of the presentation, I&amp;rsquo;ve wrote a very simple server and client in Java (9 on the server, 7 on the client) with Vert.</description>
    </item>
    
    <item>
      <title>JDD 2017 - Get ready for java.util.concurrent.Flow! - summary</title>
      <link>https://wittchen.io/posts/jdd-2017-juc-flow-presentation-summary/</link>
      <pubDate>Thu, 05 Oct 2017 16:19:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/jdd-2017-juc-flow-presentation-summary/</guid>
      <description>Recently on the JDD 2017 conference, I gave a presentation regarding introduction to Reactive Streams standard in Java 9. I also talked about existing implementations of this standard with the strongest focus on RxJava2 and created simple Reactive Streams implementation in pure Java 9 during the presentation. Below, you can find slides from this talk.
 View presentation on SpeakerDeck
Code snippets shown during this presentation are available at https://github.com/pwittchen/java-flow-experiments. I have done a tiny live coding session during this talk.</description>
    </item>
    
    <item>
      <title>Integrating ErrorProne and NullAway with an Android project</title>
      <link>https://wittchen.io/posts/integrating-nullaway-with-an-android-project/</link>
      <pubDate>Fri, 15 Sep 2017 18:39:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/integrating-nullaway-with-an-android-project/</guid>
      <description>Recently, with the remote help of guys from Uber in California, I integrated NullAway and ErrorProne with the one of my open-source Android projects.
What is NullAway? #  Basically, it&amp;rsquo;s a tool to help eliminate NullPointerExceptions (NPEs) in your Java code. It detects situations where NPE could occur at the compile time. Let&amp;rsquo;s have a look at the following code:
static void log(Object x) { System.out.println(x.toString()); } static void foo() { log(null); } NullAway will find out that we&amp;rsquo;re passing null and we&amp;rsquo;ll get appropriate error message:</description>
    </item>
    
    <item>
      <title>Introducing ReactiveAirplaneMode</title>
      <link>https://wittchen.io/posts/introducing-reactive-airplane-mode/</link>
      <pubDate>Tue, 15 Aug 2017 19:28:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/introducing-reactive-airplane-mode/</guid>
      <description>I&amp;rsquo;m continuing Rxfication of the Android. Recently I released brand new library called ReactiveAirplaneMode. As you may guess, it allows listening Airplane mode on Android device with RxJava observables. A usual I&amp;rsquo;ve hidden all implementation details, BroadcastReceivers and rest of the Android related stuff behind RxJava abstraction layer, so API is really simple. Just take a look on that:
ReactiveAirplaneMode.create() .observe(context) .subscribeOn(Schedulers.io()) .observeOn(AndroidSchedulers.mainThread()) .subscribe(isOn -&amp;gt; textView.setText(String.format(&amp;#34;Airplane mode on: %s&amp;#34;, isOn.toString()))); In the code above subscriber will be notified only when airplane mode changes.</description>
    </item>
    
    <item>
      <title>Releasing ReactiveNetwork v. 0.11.0</title>
      <link>https://wittchen.io/posts/reactivenetwork-v-0110-walled-garden/</link>
      <pubDate>Sun, 06 Aug 2017 06:38:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/reactivenetwork-v-0110-walled-garden/</guid>
      <description>In the latest release of ReactiveNetwork library, I focused on Walled Garden AKA Great Firewall support during checking Internet connectivity. There are countries with limited Internet access like China and in such cases, pinging commonly known host like www.google.com may have different results than in other countries because it may be blocked. We may get false positive results because users will generally have an access to the Internet, but they don&amp;rsquo;t have access only to several websites.</description>
    </item>
    
    <item>
      <title>Releasing ReactiveNetwork v. 0.10.0</title>
      <link>https://wittchen.io/posts/releasing-reactivenetwork-v-0100/</link>
      <pubDate>Thu, 20 Jul 2017 20:02:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/releasing-reactivenetwork-v-0100/</guid>
      <description>I&amp;rsquo;ve recently released ReactiveNetwork library v. 0.10.0 for RxJava1.x and RxJava2.x. ReactiveNetwork is an Android library listening network connection state and Internet connectivity with RxJava Observables, which I&amp;rsquo;m developing for approximately 2 years now. In this version, I&amp;rsquo;ve done a few bug fixes and added new features for RxJava2.x version. Below, you can find the release notes: Release for RxJava1.x
 bumped RxJava1 version to 1.3.0 bumped test dependencies created Code of Conduct updated Kotlin version in sample apps added retrolambda to the sample Java app - issue #163 fixed behavior of network observing in disconnected state - issue #159  Release for RxJava2.</description>
    </item>
    
    <item>
      <title>Release of prefser v. 2.1.0 with RxJava2 support</title>
      <link>https://wittchen.io/posts/release-of-prefser-210-with-rxjava2/</link>
      <pubDate>Mon, 19 Jun 2017 16:56:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/release-of-prefser-210-with-rxjava2/</guid>
      <description>I&amp;rsquo;ve recently released new version of prefser library for Android. In case you don&amp;rsquo;t know, it&amp;rsquo;s a wrapper for Android SharedPreferences with object serialization and RxJava Observables. This version has the new artifact, which has codebase migrated to RxJava2.x. As usual, I kept backward compatibility with RxJava1.x. You can find more details about the project at https://github.com/pwittchen/prefser. If you want to use it in your mobile project, you need the following dependencies in the build.</description>
    </item>
    
    <item>
      <title>New reactive data types in RxJava2</title>
      <link>https://wittchen.io/posts/new-reactive-data-types-in-rxjava2/</link>
      <pubDate>Wed, 31 May 2017 17:49:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/new-reactive-data-types-in-rxjava2/</guid>
      <description>Introduction #  I&amp;rsquo;m still exploring reactive programming world and RxJava library. Recently, I&amp;rsquo;ve migrated a few of my open-source libraries from RxJava1 to RxJava2 and written yet another project in RxJava2 from the beginning. Nevertheless, I&amp;rsquo;m still learning this library and its concept. It&amp;rsquo;s very wide topic. In RxJava1 we simply had one reactive data type called Observable. In RxJava2, we have more data types like Observable, Flowable, Single, Maybe &amp;amp; Completable.</description>
    </item>
    
    <item>
      <title>Introducing YaaS Java SDK</title>
      <link>https://wittchen.io/posts/introducing-yaas-java-sdk/</link>
      <pubDate>Sun, 28 May 2017 21:24:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/introducing-yaas-java-sdk/</guid>
      <description>Introduction #  In my company, there&amp;rsquo;s a concept of so-called &amp;ldquo;innovation day&amp;rdquo;. I have the possibility to &amp;ldquo;use&amp;rdquo; 1 innovation day per 2 development sprints. Last year, I used only 1 day due to the tight release schedule and a lot of work. Now, we are right after release, so I had time to take innovation day once again. I&amp;rsquo;ve decided to create YaaS Java SDK. If you don&amp;rsquo;t know what the YaaS is, check out my previous article about basic usage of YaaS proxy for the microservice.</description>
    </item>
    
    <item>
      <title>Releasing Prefser v. 2.0.7</title>
      <link>https://wittchen.io/posts/prefser-207/</link>
      <pubDate>Sun, 28 May 2017 20:48:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/prefser-207/</guid>
      <description>I&amp;rsquo;ve recently released new version of Prefser. It&amp;rsquo;s a wrapper for Android SharedPreferences with object serialization and RxJava Observables. The new version number is 2.0.7. In this release, I performed mostly internal work not related to the external library API. Nevertheless, it&amp;rsquo;s important for the library development in the future. The following things were done:
 updated dependencies updated Gradle configuration migrated unit tests to Robolectric started executing unit tests on Travis CI added integration with codecov.</description>
    </item>
    
    <item>
      <title>Joining lists of RxJava Observables</title>
      <link>https://wittchen.io/posts/joining-lists-of-rxjava-observables/</link>
      <pubDate>Mon, 15 May 2017 20:37:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/joining-lists-of-rxjava-observables/</guid>
      <description>In RxJava we have a few operators for joining Observables. The most common are:
 concat merge zip  Take a look at the documentation in these links. It has interactive marble diagrams showing how the operators work on the streams. You can move marbles along the lines and see how the output stream changes. It really helps to understand how it works. Code snippets in this article are based on RxJava 2.</description>
    </item>
    
    <item>
      <title>Emitting different observables conditionally</title>
      <link>https://wittchen.io/posts/emitting-different-rxjava-observables-depending-on-the-condition-with-flatmap/</link>
      <pubDate>Sun, 14 May 2017 21:44:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/emitting-different-rxjava-observables-depending-on-the-condition-with-flatmap/</guid>
      <description>Sometimes, we may need to emit different RxJava Observables depending on the specific condition dynamically. Moreover, it&amp;rsquo;s good to do it right without breaking a chain (stream of Observables). We want to combine different Observables together and do not want to nest one subscription inside another subscription because this will lead us to &amp;ldquo;subscription hell&amp;rdquo; similar to &amp;ldquo;callback hell&amp;rdquo;. Luckily RxJava has mechanisms to deal with such problems. In this article, I&amp;rsquo;m basing my examples on RxJava 2.</description>
    </item>
    
    <item>
      <title>ReactiveNetwork - release of v. 0.2.0</title>
      <link>https://wittchen.io/posts/reactive-network-2/</link>
      <pubDate>Thu, 11 Feb 2016 19:19:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/reactive-network-2/</guid>
      <description>I&amp;rsquo;ve recently released new version of ReactiveNetwork library for Android. Here are the fresh release notes for version 0.2.0:
 added possibility to observe WiFi signal level with observeWifiSignalLevel(context, numLevels) and observeWifiSignalLevel(context) method created WifiSignalLevel enum added internet check to parameters of getConnectivityStatus(context, checkInternet) method made getConnectivityStatus(context, checkInternet) method public changed String variable status in ConnectivityStatus enum to description and made it public changed output of the toString() method in ConnectivityStatus to keep consistency with another enum made ReactiveNetwork class non-final bumped Kotlin version in sample app to 1.</description>
    </item>
    
    <item>
      <title>Reactive Live Coding during GDG DevFest 2015 in Poland</title>
      <link>https://wittchen.io/posts/reactive-live-coding-gdg-devfest-pl-2015/</link>
      <pubDate>Sun, 29 Nov 2015 20:16:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/reactive-live-coding-gdg-devfest-pl-2015/</guid>
      <description>I was asked to be a speaker during GDG DevFest 2015 conference in Warsaw, Poland. Of course, I accepted this invitation and prepared presentation titled &amp;ldquo;Reactive Live Coding&amp;rdquo;. Presentation covered basics of Reactive Programming, RxJava and RxAndroid. Besides my talk I&amp;rsquo;ve done live coding to show how to use mentioned libraries and basics principles of Reactive Programming in real life. I had only 20 minutes for all of that, so my time-box was very limited.</description>
    </item>
    
    <item>
      <title>New release of Kirai - elegant string formatting library for Java</title>
      <link>https://wittchen.io/posts/new-release-of-kirai-140/</link>
      <pubDate>Sun, 22 Nov 2015 20:34:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/new-release-of-kirai-140/</guid>
      <description>I&amp;rsquo;ve recently released version 1.4.0 of Kirai library. Kirai means phrase in Swahili language. It&amp;rsquo;s string formatting library written in Java. It originally started as an Android library, but it evolved to pure Java library. It&amp;rsquo;s first possibilities were basic string formatting and text formatting for Android TextViews. Now, it allows to format strings for Java, Web, Android and even Unix Terminal! Have you ever wanted to have colorful and styled text in your mobile app, website or terminal app?</description>
    </item>
    
    <item>
      <title>An Opinionated Guide to Modern Java by Parallel Universe</title>
      <link>https://wittchen.io/posts/an-opinionated-guide-to-modern-java-by-parallel-universe/</link>
      <pubDate>Thu, 05 Nov 2015 08:27:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/an-opinionated-guide-to-modern-java-by-parallel-universe/</guid>
      <description>Introduction #  I recently read series of three articles titled An Opinionated Guide to Modern Java by Parallel Universe. It presents really interesting point of view and can be read even by non-Java developers due to its form. Non-Java developers can learn that Java can be fast, elegant and lightweight as much as other hipster technologies like Ruby, Go or Node.js. The main difference is the fact that Java is quite old and widely used technology what means it&amp;rsquo;s well tested, stable, solid, has great development and monitoring tools.</description>
    </item>
    
    <item>
      <title>Searching word in a string with KMP algorithm</title>
      <link>https://wittchen.io/posts/searching-word-in-a-string-with-kmp-algorithm/</link>
      <pubDate>Wed, 22 Jul 2015 13:03:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/searching-word-in-a-string-with-kmp-algorithm/</guid>
      <description>Sometimes it&amp;rsquo;s good to revise some algorithms and try to implement them in order to get to know, how the built-in functions of high level programming languages actually works. One of the popular problems is string searching. We have many approaches to solve this problem. For example:
 Naive string search algorithm Rabin-Karp string search algorithm Finite-state automaton based search Knuth-Morris-Pratt algorithm Boyer-Moore string search algorithm Bitap algorithm  This time, I&amp;rsquo;ve decided to focus on Knuth-Morris-Pratt (KMP) algorithm.</description>
    </item>
    
    <item>
      <title>Get past the syntax - the real scare is in the semantics</title>
      <link>https://wittchen.io/posts/get-past-the-syntax/</link>
      <pubDate>Mon, 06 Jul 2015 15:37:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/get-past-the-syntax/</guid>
      <description>Dr. Venkat Subramaniam presented an interesting point of view during his talk at Devoxx conference. Programmers, who start learning a new language, often complain about syntax. They focus on using available keywords and constructions instead of trying to understand their meaning and purpose. Programmers also have their own habits. That’s why Java has similar syntax to C and C++. Creators of Java designed new language with syntax, which was familiar to them, with significant improvements.</description>
    </item>
    
    <item>
      <title>Introducing prefser</title>
      <link>https://wittchen.io/posts/introducing-prefser/</link>
      <pubDate>Sun, 22 Feb 2015 22:39:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/introducing-prefser/</guid>
      <description>I&amp;rsquo;ve recently released Prefser, which is a wrapper for Android SharedPreferences with object serialization and RxJava Observables. Prefser wraps SharedPreferences and thanks to Java Generics provides you simpler API than classic SharedPreferences with only two methods:
void put(String key, Object value); &amp;lt;T&amp;gt; T get(String key, Class classOfT, T defaultValue); Classic SharedPreferences allows you to store only primitive data types and set of strings. Thanks to Gson serialization, Prefser allows you to store:</description>
    </item>
    
    <item>
      <title>Introducing NetworkEvents</title>
      <link>https://wittchen.io/posts/introducing-network-events/</link>
      <pubDate>Sat, 31 Jan 2015 20:35:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/introducing-network-events/</guid>
      <description>I have released NetworkEvents library for Android. It&amp;rsquo;s a wrapper for system Broadcast Receivers built with Otto library. It allows you to listen change of connectivity status (connected to WiFi network with or without Internet access, mobile network, off-line) and change of the WiFi signal strength very easily with @Subscribe annotation. The only thing you need to do, is to create Bus and NetworkEvents objects, register them in onResume() method and unregister them in onPause() method in your activity.</description>
    </item>
    
    <item>
      <title>Kirai - flavored Android string formatting library</title>
      <link>https://wittchen.io/posts/kirai-flavored-android-string-formatting-library/</link>
      <pubDate>Tue, 13 Jan 2015 19:12:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/kirai-flavored-android-string-formatting-library/</guid>
      <description>Overview #  Recently I&amp;rsquo;ve developed and realased to Maven Central Repository Kirai, which is flavored Android string formatting library. Kirai means phrase in Swahili language. Project is inspired by phrase, TaggerString and BabushkaText. Kirai has fluent API similar to phrase with additional formatting similar to TaggerString and allows to add formatted pieces of text like BabushkaText. Development including writing Unit Tests took me about 2 days. Deployment and release to Maven Central Repository took me about 2 days as well.</description>
    </item>
    
    <item>
      <title>How to switch java version on Linux</title>
      <link>https://wittchen.io/posts/how-to-switch-java-version-on-linux/</link>
      <pubDate>Sun, 02 Nov 2014 12:33:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/how-to-switch-java-version-on-linux/</guid>
      <description>Sometimes we need to run specific program with a concrete version of JVM. We can also work with Java 7, but we want to try Java 8. In such cases, we can have installed both Java 7 and 8 on our system and easily switch between them. In order to show current java version, we can simply type: java -version in terminal. On my computer I received the following response:</description>
    </item>
    
    <item>
      <title>Java Gradle Template</title>
      <link>https://wittchen.io/posts/java-gradle-template/</link>
      <pubDate>Fri, 17 Oct 2014 23:11:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/java-gradle-template/</guid>
      <description>Some time ago, I had some troubles with configuring Java project with Gradle in IntelliJ IDEA CE. There is possibility to create new Gradle project in mentioned IDE, but for some reason it didn&amp;rsquo;t worked out-of-the box in my case on Ubuntu. I wanted to have pure, clean Java project with Gradle build system ready to open in IntelliJ IDEA. I found well configured simple project at: https://github.com/quinnliu/SampleGradleProject. Basing on that project, I created my simple template.</description>
    </item>
    
    <item>
      <title>Micro-location based on WiFi Access Points</title>
      <link>https://wittchen.io/posts/micro-location-based-on-wifi-access-points/</link>
      <pubDate>Sun, 21 Sep 2014 13:16:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/micro-location-based-on-wifi-access-points/</guid>
      <description>Introduction #  Recently, I started working on quite interesting project. One of its elements is micro-location inside the building based on WiFi Access Points. Company&amp;rsquo;s buildings have a lot of Access Points in different locations like regular rooms, conference rooms, corridors, sports building and restaurant. Having pool of Access Points with their names, locations and MAC addresses (or more precisely: BSSID) it&amp;rsquo;s possible to create micro-location for Android mobile devices.</description>
    </item>
    
    <item>
      <title>Reading/writing generic Java objects to JSON files and vice versa</title>
      <link>https://wittchen.io/posts/reading-writing-generic-java-objects-to-json-files-and-vice-versa/</link>
      <pubDate>Wed, 27 Aug 2014 21:19:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/reading-writing-generic-java-objects-to-json-files-and-vice-versa/</guid>
      <description>Overview #  Recently, I have written small set of methods for a FileHelper using Jackson library in Android application, which allows to save generic Java objects and list of generic objects in JSON format to a file and read them back in the original form. In the beginning I had some problems with saving and reading data properly. I could save and read data (e.g. list of the objects), but their type was LinkedHashMap, which wasn&amp;rsquo;t the list of desired generic objects.</description>
    </item>
    
    <item>
      <title>How to highlight and click on ListView item in Android programmatically?</title>
      <link>https://wittchen.io/posts/how-to-highlight-and-click-on-listview-item-in-android-programmatically/</link>
      <pubDate>Thu, 06 Mar 2014 21:43:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/how-to-highlight-and-click-on-listview-item-in-android-programmatically/</guid>
      <description>There are many approaches concerning selecting items on Android&amp;rsquo;s ListView. Unfortunately most of them don&amp;rsquo;t work. I was struggling with this problem for some time and decided to publish my solution, which is actually quite easy.
The problem #  I want to highlight item on a ListView programmatically (in a source code - without touching item on the screen). I also want to click on item of the ListView programmatically.</description>
    </item>
    
    <item>
      <title>How to read contacts in Android device using ContentResolver?</title>
      <link>https://wittchen.io/posts/how-to-read-contacts-in-android-device-using-contentresolver/</link>
      <pubDate>Sun, 02 Mar 2014 22:23:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/how-to-read-contacts-in-android-device-using-contentresolver/</guid>
      <description>With Content Providers we can access data stored by Android system applications. Popular example of using Content Provider is retrieving contact list from the smartphone. We can also access Calendar or create our own Content Provider. More information about that can be found in documentation of Android. If we want to access Content Provider, we can use Content Resolver in our application&amp;rsquo;s context.
In this example, we will access contact list.</description>
    </item>
    
    <item>
      <title>Avoiding OutOfMemory Error while loading large Bitmaps in Android UI</title>
      <link>https://wittchen.io/posts/avoiding-outofmemory-error-while-loading-large-bitmaps-in-android-ui/</link>
      <pubDate>Sun, 23 Feb 2014 13:34:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/avoiding-outofmemory-error-while-loading-large-bitmaps-in-android-ui/</guid>
      <description>Sometimes we may encounter an error connected with loading too large Bitmaps into Android UI. In such cases, we may receive OutOfMemoryError in stack trace. In Android, we are working with limited memory and we shouldn&amp;rsquo;t load images with full resolution into UI. These images should be scaled down in order to save memory and increase performance of the application. It&amp;rsquo;s very well described in official Android documentation in section Loading Large Bitmaps Efficiently.</description>
    </item>
    
    <item>
      <title>Asynchronous loading and caching bitmaps with Volley</title>
      <link>https://wittchen.io/posts/asynchronous-loading-and-caching-bitmaps-with-volley/</link>
      <pubDate>Mon, 26 Aug 2013 23:37:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/asynchronous-loading-and-caching-bitmaps-with-volley/</guid>
      <description>We can use Volley library from Google for very clean, simple and easy loading of the images from Internet. Volley uses LRU cache, so first of all, we need to create BitmapLruCache class extending LruCache class.
package com.github.volley.example.toolbox; import com.android.volley.toolbox.ImageLoader.ImageCache; import android.graphics.Bitmap; import android.support.v4.util.LruCache; public class BitmapLruCache extends LruCache&amp;lt;String, Bitmap&amp;gt; implements ImageCache { public BitmapLruCache(int maxSize) { super(maxSize); } // Fix thanks to Steven&amp;#39;s comment: sizeOf method should not be overriden, // when we are passing max image cache entries in another place of the code // @Override // protected int sizeOf(String key, Bitmap value) { // return value.</description>
    </item>
    
    <item>
      <title>How to change Fragment layout on orientation change?</title>
      <link>https://wittchen.io/posts/how-to-change-fragment-layout-on-orientation-change/</link>
      <pubDate>Thu, 15 Aug 2013 22:50:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/how-to-change-fragment-layout-on-orientation-change/</guid>
      <description>When we work with Activities in Android, defining different layouts for different screen orientations is easy. The only thing we need to do, is to create two *.xml files with the same name for layouts in two separate directories (res/layout/ and res/layout-land/). In Fragments it&amp;rsquo;s not that easy. In such case, we need to perform additional operations in order to achieve our goal. Fragment in Android is not re-inflated on configuration change, but we can recreate layout and repopulate view manually.</description>
    </item>
    
    <item>
      <title>Fixing bug with dissappearing map overlay after zoom in Android</title>
      <link>https://wittchen.io/posts/fixing-bug-with-dissappearing-map-overlay-after-zoom-in-android/</link>
      <pubDate>Mon, 21 Jan 2013 22:16:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/fixing-bug-with-dissappearing-map-overlay-after-zoom-in-android/</guid>
      <description>In Android 3.0 – HoneyComb (API 11) or higher occurs specific bug connected with map overlay. When we draw overlay on the map (e.g. routes, directions or polylines) after zooming to particular level, overlay disappear unexpectedly. We can fix this bug very easily by disabling hardware acceleration for drawing overlays. Below, you can see exemplary code snippet with map injected by RoboGuice and disabled hardware acceleration. Changing way of drawing overlays should fix the bug.</description>
    </item>
    
  </channel>
</rss>