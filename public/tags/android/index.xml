<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>android on Piotr Wittchen</title>
    <link>https://wittchen.io/tags/android/</link>
    <description>Recent content in android on Piotr Wittchen</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 02 Oct 2018 00:01:31 +0000</lastBuildDate><atom:link href="https://wittchen.io/tags/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Creating a fat AAR</title>
      <link>https://wittchen.io/posts/creating-fat-aar/</link>
      <pubDate>Tue, 02 Oct 2018 00:01:31 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/creating-fat-aar/</guid>
      <description>I recently wrote a new library called NeuroSky Android SDK. It&amp;rsquo;s used for writing Android apps using signals of the brain waves received from the NeuroSky MindWave Mobile headsets. Probably I&amp;rsquo;ll write a separate article about it because it&amp;rsquo;s quite interesting topic. This library uses ThinkGear library, which is distributed by the NeuroSky as a *.jar file, so I couldn&amp;rsquo;t use it as a Gradle or Maven dependency in my project and I had to put this *.</description>
    </item>
    
    <item>
      <title>Writing my first library in Kotlin</title>
      <link>https://wittchen.io/posts/writing-my-first-library-in-kotlin/</link>
      <pubDate>Sun, 19 Aug 2018 10:24:19 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/writing-my-first-library-in-kotlin/</guid>
      <description>Introduction Recently, I decided to create a tiny Android library called RxBattery, which is monitoring battery state of the device with RxJava and RxKotlin. I created a few Java and Android libraries already and this time I decided to use Kotlin programming language instead of Java to learn something new and write something more complicated than &amp;ldquo;Hello World&amp;rdquo; app. Here are my observations.
Build System I used Gradle to build the project.</description>
    </item>
    
    <item>
      <title>Solving problems with AVD and KVM on Linux</title>
      <link>https://wittchen.io/posts/solving-problems-with-avd-and-kvm-on-linux/</link>
      <pubDate>Thu, 16 Aug 2018 22:01:06 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/solving-problems-with-avd-and-kvm-on-linux/</guid>
      <description>I installed Android SDK and Android Studio on my new ThinkPad T470s with Ubuntu Linux 18.04.1 LTS. As usual, I wanted to create a new Android phone emulator called AVD (Android Virtual Device). I was able to create a new device, but unfortunately I encoutered problems. After opening AVD window, I saw the error message&amp;hellip;
/dev/kvm is not found KVM (Kernel-based Virtual Machine) is a full virtualization solution for Linux on x86 hardware containing virtualization extensions (Intel VT or AMD-V).</description>
    </item>
    
    <item>
      <title>Releasing ReactiveNetwork v. 1.0.0 (paying the technical debt)</title>
      <link>https://wittchen.io/posts/releasing-reactive-network-1/</link>
      <pubDate>Sun, 24 Jun 2018 23:39:18 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/releasing-reactive-network-1/</guid>
      <description>Today, I&amp;rsquo;ve released next version of my most popular open-source project - ReactiveNetwork. I&amp;rsquo;ve released version 0.12.4 for RxJava1.x and version 1.0.0 for RxJava2.x. Please note, RxJava1.x is no longer officially supported and I&amp;rsquo;m going to follow the same approach in my RxJava-based projects. It&amp;rsquo;s not the first release of this project, but I&amp;rsquo;m breaking the API and removing existing methods, so I decided to stick to proper versioning standard. I didn&amp;rsquo;t always do it properly in the past, but it&amp;rsquo;s never too late.</description>
    </item>
    
    <item>
      <title>Debugging Google Pixel 2</title>
      <link>https://wittchen.io/posts/debugging-pixel2/</link>
      <pubDate>Wed, 20 Jun 2018 23:05:56 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/debugging-pixel2/</guid>
      <description>I recently destroyed my good old Nexus 6 phone. It&amp;rsquo;s still working, but display screen is broken. Due to this fact, I&amp;rsquo;ve had an excuse to buy new Pixel 2 phone. It&amp;rsquo;s pretty expansive, but its quality is really good. As usual, I wanted to debug an app on this device and encountered problem related to device permissions.
Once I connected the phone, to my laptop and typed adb devices, I&amp;rsquo;ve seen the following message:</description>
    </item>
    
    <item>
      <title>Introducing ReactiveBus</title>
      <link>https://wittchen.io/posts/introducing-reactive-bus/</link>
      <pubDate>Sun, 11 Mar 2018 20:02:45 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/introducing-reactive-bus/</guid>
      <description>Today, I&amp;rsquo;ve released my another tiny project. It&amp;rsquo;s a very simple implementation of Event Bus with RxJava 2 under the hood. This library is compatible with Java 1.7 or higher. I didn&amp;rsquo;t use Java 1.8 or 1.9 because I wanted to make it compatible with Android apps.
You can use it as follows:
Bus bus = ReactiveBus.create(); Disposable observer = bus.receive().subscribe(new Consumer&amp;lt;Event&amp;gt;() { @Override public void accept(Event event) { // handle event here  } }); Once, we created Event Bus object and our observer (or more precisely: disposable subscriber), we can start sending events:</description>
    </item>
    
    <item>
      <title>DroidCon Poland 2017 - Is your app really connected?</title>
      <link>https://wittchen.io/posts/droidcon-poland-2017-is-your-app-really-connected/</link>
      <pubDate>Sat, 02 Dec 2017 01:39:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/droidcon-poland-2017-is-your-app-really-connected/</guid>
      <description>Yesterday, I gave a presentation about connectivity in the Android apps during the DroidCon Poland 2017 Conference in Kraków.
Below, you can see slides from this presentation.
 View slides on SpeakerDeck
There&amp;rsquo;s also tweet related to this presentation from DroidCon Kraków:
Piotr Wittchen tells us about how we can we keep the track of network &amp;#x1f30e; or Internet connectivity changes in our app &amp;#x1f4f1;&amp;#x1f198;&amp;#x1f642; pic.twitter.com/7YGGzNJeb2
&amp;mdash; droidcon Kraków (@droidconkr) December 2, 2017  I hope, you enjoyed it.</description>
    </item>
    
    <item>
      <title>Simple reactive HTTP client and server with RxJava, Vert.x and Android</title>
      <link>https://wittchen.io/posts/simple-reactive-http-client-and-server-with-rxjava-vertx-and-android/</link>
      <pubDate>Thu, 09 Nov 2017 22:30:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/simple-reactive-http-client-and-server-with-rxjava-vertx-and-android/</guid>
      <description>During Hack Your Career event at the Silesian University of Technology, I&amp;rsquo;ve prepared a presentation titled Reactive Programming - Efficient Server Applications with a colleague from work. Arek told about theory of Reactive Programming, shown basic concepts, data types and a few examples in the code. During my part of the presentation, I&amp;rsquo;ve wrote a very simple server and client in Java (9 on the server, 7 on the client) with Vert.</description>
    </item>
    
    <item>
      <title>Integrating ErrorProne and NullAway with an Android project</title>
      <link>https://wittchen.io/posts/integrating-nullaway-with-an-android-project/</link>
      <pubDate>Fri, 15 Sep 2017 18:39:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/integrating-nullaway-with-an-android-project/</guid>
      <description>Recently, with the remote help of guys from Uber in California, I integrated NullAway and ErrorProne with the one of my open-source Android projects.
What is NullAway? Basically, it&amp;rsquo;s a tool to help eliminate NullPointerExceptions (NPEs) in your Java code. It detects situations where NPE could occur at the compile time. Let&amp;rsquo;s have a look at the following code:
static void log(Object x) { System.out.println(x.toString()); } static void foo() { log(null); } NullAway will find out that we&amp;rsquo;re passing null and we&amp;rsquo;ll get appropriate error message:</description>
    </item>
    
    <item>
      <title>Introducing ReactiveAirplaneMode</title>
      <link>https://wittchen.io/posts/introducing-reactive-airplane-mode/</link>
      <pubDate>Tue, 15 Aug 2017 19:28:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/introducing-reactive-airplane-mode/</guid>
      <description>I&amp;rsquo;m continuing Rxfication of the Android. Recently I released brand new library called ReactiveAirplaneMode. As you may guess, it allows listening Airplane mode on Android device with RxJava observables. A usual I&amp;rsquo;ve hidden all implementation details, BroadcastReceivers and rest of the Android related stuff behind RxJava abstraction layer, so API is really simple. Just take a look on that:
ReactiveAirplaneMode.create() .observe(context) .subscribeOn(Schedulers.io()) .observeOn(AndroidSchedulers.mainThread()) .subscribe(isOn -&amp;gt; textView.setText(String.format(&amp;#34;Airplane mode on: %s&amp;#34;, isOn.toString()))); In the code above subscriber will be notified only when airplane mode changes.</description>
    </item>
    
    <item>
      <title>Releasing ReactiveNetwork v. 0.11.0</title>
      <link>https://wittchen.io/posts/reactivenetwork-v-0110-walled-garden/</link>
      <pubDate>Sun, 06 Aug 2017 06:38:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/reactivenetwork-v-0110-walled-garden/</guid>
      <description>In the latest release of ReactiveNetwork library, I focused on Walled Garden AKA Great Firewall support during checking Internet connectivity. There are countries with limited Internet access like China and in such cases, pinging commonly known host like www.google.com may have different results than in other countries because it may be blocked. We may get false positive results because users will generally have an access to the Internet, but they don&amp;rsquo;t have access only to several websites.</description>
    </item>
    
    <item>
      <title>Releasing ReactiveNetwork v. 0.10.0</title>
      <link>https://wittchen.io/posts/releasing-reactivenetwork-v-0100/</link>
      <pubDate>Thu, 20 Jul 2017 20:02:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/releasing-reactivenetwork-v-0100/</guid>
      <description>I&amp;rsquo;ve recently released ReactiveNetwork library v. 0.10.0 for RxJava1.x and RxJava2.x. ReactiveNetwork is an Android library listening network connection state and Internet connectivity with RxJava Observables, which I&amp;rsquo;m developing for approximately 2 years now. In this version, I&amp;rsquo;ve done a few bug fixes and added new features for RxJava2.x version. Below, you can find the release notes: Release for RxJava1.x
 bumped RxJava1 version to 1.3.0 bumped test dependencies created Code of Conduct updated Kotlin version in sample apps added retrolambda to the sample Java app - issue #163 fixed behavior of network observing in disconnected state - issue #159  Release for RxJava2.</description>
    </item>
    
    <item>
      <title>Release of prefser v. 2.1.0 with RxJava2 support</title>
      <link>https://wittchen.io/posts/release-of-prefser-210-with-rxjava2/</link>
      <pubDate>Mon, 19 Jun 2017 16:56:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/release-of-prefser-210-with-rxjava2/</guid>
      <description>I&amp;rsquo;ve recently released new version of prefser library for Android. In case you don&amp;rsquo;t know, it&amp;rsquo;s a wrapper for Android SharedPreferences with object serialization and RxJava Observables. This version has the new artifact, which has codebase migrated to RxJava2.x. As usual, I kept backward compatibility with RxJava1.x. You can find more details about the project at https://github.com/pwittchen/prefser. If you want to use it in your mobile project, you need the following dependencies in the build.</description>
    </item>
    
    <item>
      <title>Releasing Prefser v. 2.0.7</title>
      <link>https://wittchen.io/posts/prefser-207/</link>
      <pubDate>Sun, 28 May 2017 20:48:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/prefser-207/</guid>
      <description>I&amp;rsquo;ve recently released new version of Prefser. It&amp;rsquo;s a wrapper for Android SharedPreferences with object serialization and RxJava Observables. The new version number is 2.0.7. In this release, I performed mostly internal work not related to the external library API. Nevertheless, it&amp;rsquo;s important for the library development in the future. The following things were done:
 updated dependencies updated Gradle configuration migrated unit tests to Robolectric started executing unit tests on Travis CI added integration with codecov.</description>
    </item>
    
    <item>
      <title>ReactiveNetwork - release v. 0.9.0 with RxJava2.x support</title>
      <link>https://wittchen.io/posts/reactivenetwork-090-rxjava2/</link>
      <pubDate>Tue, 11 Apr 2017 06:04:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/reactivenetwork-090-rxjava2/</guid>
      <description>This time, I upgraded my another reactive Android open-source project called ReactiveNetwork to RxJava2.x. Many thanks goes to @tushar-acharya who performed initial migration to the newer version of RxJava. During migration, I&amp;rsquo;ve also created new package rx2 to avoid potential import conflicts during migration inside Android apps. Besides migration, I&amp;rsquo;ve updated sample apps, documentation &amp;amp; JavaDocs on Github pages. You can still use RxJava1.x version and it&amp;rsquo;s available on the branch with that name.</description>
    </item>
    
    <item>
      <title>ReactiveBeacons - release of v. 0.6.0 with support for RxJava2</title>
      <link>https://wittchen.io/posts/reactivebeacons-060-rxjava2/</link>
      <pubDate>Mon, 03 Apr 2017 18:20:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/reactivebeacons-060-rxjava2/</guid>
      <description>Thanks to @BugsBunnyBR I released new version of ReactiveBeacons library with the RxJava2.x support. It&amp;rsquo;s an Android library scanning BLE (Bluetooth Low Energy) beacons nearby with RxJava Observables. I also kept backward compatibility with RxJava1.x. Different versions of the libraries are located on the separate git branches. It&amp;rsquo;s a similar approach to original RxJava project. I have separate builds on Travis CI, separate artifacts and JavaDocs. Such approach generates more overhead, but in such case, RxJava1.</description>
    </item>
    
    <item>
      <title>Handling different Android versions with strategy pattern</title>
      <link>https://wittchen.io/posts/handling-different-android-versions-with-strategy-pattern/</link>
      <pubDate>Sun, 26 Mar 2017 22:39:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/handling-different-android-versions-with-strategy-pattern/</guid>
      <description>When we&amp;rsquo;re developing Android apps, we have to remember that different users have different versions of the Android OS. Unfortunately, not all of them has the newest version of the system and some of them have older devices with older systems. Some of these devices may be even unsupported because e.g. Google supports their devices like Nexus and Pixel for only 2 years. When we want to reach as many users as possible and make the app available for almost everyone, we have to handle different Android versions.</description>
    </item>
    
    <item>
      <title>Android design inspirations</title>
      <link>https://wittchen.io/posts/android-design-inspirations/</link>
      <pubDate>Sun, 19 Mar 2017 19:51:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/android-design-inspirations/</guid>
      <description>When we are planning to create our next Android app, besides the codebase, it&amp;rsquo;s also good to plan its design, UI, and UX. Before doing that, we can take a look at some inspirations and work of other people to gather a few UI design patterns, inspirations, and ideas. Good resource of such inspirations is Android Niceties website. As the authors write, this website is a collection of screenshots encompassing some of the most beautiful looking Android apps.</description>
    </item>
    
    <item>
      <title>Unit test coverage report with Travis CI for Robolectric on Android</title>
      <link>https://wittchen.io/posts/unit-test-coverage-report-with-travis-ci-for-robolectric-on-android/</link>
      <pubDate>Sun, 19 Mar 2017 19:32:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/unit-test-coverage-report-with-travis-ci-for-robolectric-on-android/</guid>
      <description>Introduction Some time ago, I&amp;rsquo;ve written an article about Test coverage report for Android application. It got some interest (many comments below article and many visits according to Google Analytics), so I decided to refresh this topic. Previously, I&amp;rsquo;ve written instrumentation unit tests, which needed to be executed on a real device or an emulator. It&amp;rsquo;s a good approach when you want to test functionalities strongly connected with the device. E.</description>
    </item>
    
    <item>
      <title>ReactiveNetwork - release of v. 0.2.0</title>
      <link>https://wittchen.io/posts/reactive-network-2/</link>
      <pubDate>Thu, 11 Feb 2016 19:19:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/reactive-network-2/</guid>
      <description>I&amp;rsquo;ve recently released new version of ReactiveNetwork library for Android. Here are the fresh release notes for version 0.2.0:
 added possibility to observe WiFi signal level with observeWifiSignalLevel(context, numLevels) and observeWifiSignalLevel(context) method created WifiSignalLevel enum added internet check to parameters of getConnectivityStatus(context, checkInternet) method made getConnectivityStatus(context, checkInternet) method public changed String variable status in ConnectivityStatus enum to description and made it public changed output of the toString() method in ConnectivityStatus to keep consistency with another enum made ReactiveNetwork class non-final bumped Kotlin version in sample app to 1.</description>
    </item>
    
    <item>
      <title>Reactive Live Coding during GDG DevFest 2015 in Poland</title>
      <link>https://wittchen.io/posts/reactive-live-coding-gdg-devfest-pl-2015/</link>
      <pubDate>Sun, 29 Nov 2015 20:16:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/reactive-live-coding-gdg-devfest-pl-2015/</guid>
      <description>I was asked to be a speaker during GDG DevFest 2015 conference in Warsaw, Poland. Of course, I accepted this invitation and prepared presentation titled &amp;ldquo;Reactive Live Coding&amp;rdquo;. Presentation covered basics of Reactive Programming, RxJava and RxAndroid. Besides my talk I&amp;rsquo;ve done live coding to show how to use mentioned libraries and basics principles of Reactive Programming in real life. I had only 20 minutes for all of that, so my time-box was very limited.</description>
    </item>
    
    <item>
      <title>New release of Kirai - elegant string formatting library for Java</title>
      <link>https://wittchen.io/posts/new-release-of-kirai-140/</link>
      <pubDate>Sun, 22 Nov 2015 20:34:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/new-release-of-kirai-140/</guid>
      <description>I&amp;rsquo;ve recently released version 1.4.0 of Kirai library. Kirai means phrase in Swahili language. It&amp;rsquo;s string formatting library written in Java. It originally started as an Android library, but it evolved to pure Java library. It&amp;rsquo;s first possibilities were basic string formatting and text formatting for Android TextViews. Now, it allows to format strings for Java, Web, Android and even Unix Terminal! Have you ever wanted to have colorful and styled text in your mobile app, website or terminal app?</description>
    </item>
    
    <item>
      <title>Bunch of updates in my OSS for Android</title>
      <link>https://wittchen.io/posts/bunch-of-updates-in-my-android-oss/</link>
      <pubDate>Sun, 08 Nov 2015 16:53:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/bunch-of-updates-in-my-android-oss/</guid>
      <description>Introduction In the last days I prepared a bunch of updates in my open-source software for Android. Most of them are bug fixes and are related to increasing robustness of the projects as well as their overall quality. I also decided to play a little with Kotlin language from JetBrains, which seems to be reasonable choice for mobile applications running on Android. Nevertheless, writing an app in Kotlin requires some additional configuration and we should remember, it&amp;rsquo;s still in beta version.</description>
    </item>
    
    <item>
      <title>Introducing ReactiveBeacons</title>
      <link>https://wittchen.io/posts/introducing-reactive-beacons/</link>
      <pubDate>Wed, 30 Sep 2015 19:49:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/introducing-reactive-beacons/</guid>
      <description>Recently, I&amp;rsquo;ve created yet another reactive library for Android. It&amp;rsquo;s called ReactiveBeacons and it&amp;rsquo;s responsible for observing BLE (Bluetooth Low Energy) beacons. Beacons are small devices, which became quite popular in the last years. They can be utilized in creating Contextual Awareness, Contextual Computing and Internet of Things. Beacons have lithium battery, are constantly turned on and emit signals via Bluetooth all the time. ReactiveBeacons library allows to transform these signals into Observable stream compatible with RxJava.</description>
    </item>
    
    <item>
      <title>Introducing ReactiveSensors</title>
      <link>https://wittchen.io/posts/introducing-reactive-sensors/</link>
      <pubDate>Sat, 05 Sep 2015 20:03:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/introducing-reactive-sensors/</guid>
      <description>Another month, another library. Recently, I&amp;rsquo;ve released yet another reactive library called ReactiveSensors. It&amp;rsquo;s an open-source Android library monitoring hardware sensors with RxJava Observables. Library is compatible with RxJava 1.0.+ and RxAndroid 1.0.+ and uses them under the hood.
Library is available at: https://github.com/pwittchen/ReactiveSensors.
In my opinion, hardware sensors are perfect case for applying RxJava, because in fact we&amp;rsquo;re constantly receiving a stream of events emitted by many sensors. With Reactive Programming approach we have plenty of possibilities and easy API for manipulating received sensor&amp;rsquo;s data.</description>
    </item>
    
    <item>
      <title>Learning Android and being up to date</title>
      <link>https://wittchen.io/posts/learning-android/</link>
      <pubDate>Sat, 22 Aug 2015 18:09:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/learning-android/</guid>
      <description>Recently a few people asked me, what are my methods for gathering knowledge and being up to date with all news connected with Android. I didn&amp;rsquo;t really think about that. I just grabbed all knowledge from a various places and then tried to use it in practice. I decided to sum everything up and create a collection of my knowledge resources. Of course, we are not able to use all of that every day, because it&amp;rsquo;s too much, but it&amp;rsquo;s good to know where we can find something interesting.</description>
    </item>
    
    <item>
      <title>Introducing ReactiveNetwork</title>
      <link>https://wittchen.io/posts/introducing-reactive-network/</link>
      <pubDate>Mon, 10 Aug 2015 21:52:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/introducing-reactive-network/</guid>
      <description>I&amp;rsquo;ve recently released ReactiveNetwork. It is an open-source Android library listening network connection state and change of the WiFi signal strength with RxJava Observables. It&amp;rsquo;s a successor of Network Events library rewritten with Reactive Programming approach.
Library is compatible with RxJava 1.0.+ and RxAndroid 1.0.+ and uses them under the hood. Min Android SDK version is 9. JavaDoc can be found at: http://pwittchen.github.io/ReactiveNetwork. Repository is available at: https://github.com/pwittchen/ReactiveNetwork.
This library is much simpler and easier to use than NetworkEvents.</description>
    </item>
    
    <item>
      <title>Releasing prefser 2.0.0</title>
      <link>https://wittchen.io/posts/releasing-prefser-2/</link>
      <pubDate>Thu, 06 Aug 2015 22:34:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/releasing-prefser-2/</guid>
      <description>I&amp;rsquo;ve recently released Prefser library v. 2.0.0. Prefser is a wrapper for Android SharedPreferences with object serialization and RxJava Observables. This update couldn&amp;rsquo;t be done without help of awesome open-source community and people who reported new issues and created pull requests. Thanks for that! A lot of issues related to RxJava was fixed. Moreover, now we can store and retrieve lists of objects of any type with Prefser. Examples of library usage can be found in README.</description>
    </item>
    
    <item>
      <title>Releasing NetworkEvents 2.0.0</title>
      <link>https://wittchen.io/posts/releasing-network-events-2/</link>
      <pubDate>Fri, 31 Jul 2015 09:28:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/releasing-network-events-2/</guid>
      <description>I&amp;rsquo;ve recently released NetworkEvents library v. 2.0.0. It&amp;rsquo;s an Android library listening network connection state and change of the Wifi signal strength. It has a few significant changes in the API and new features, which people were requesting on GitHub. Moreover, codebase was slightly refactored and updated. I&amp;rsquo;m going to keep major.minor.patch convention AKA semantic versioning now:
 major - new feature or update - backward incompatible minor - new feature - backward compatible patch - bug-fix - backward compatible  A few changes are backward incompatible, so I&amp;rsquo;ve increased major number.</description>
    </item>
    
    <item>
      <title>Releasing Weather Icon View v. 1.0.0 for Android</title>
      <link>https://wittchen.io/posts/releasing-weather-icon-view-1-for-android/</link>
      <pubDate>Tue, 21 Jul 2015 17:34:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/releasing-weather-icon-view-1-for-android/</guid>
      <description>Today I released Weather Icon View library v. 1.0.0 It&amp;rsquo;s very simple and easy to use Android library, which allows you to use Weather Icons created by Erik Flowers in your mobile applications. This library was already available on GitHub as I wrote in one of my previous posts, but today it was released to Maven Central Repository and you can use it as Maven or Gradle dependency. I was encouraged to make this project more available by the open-source community and people who find it useful as I could read in the issue reported on the repository website.</description>
    </item>
    
    <item>
      <title>Releasing prefser v. 1.0.5</title>
      <link>https://wittchen.io/posts/releasing-prefser-v-105/</link>
      <pubDate>Thu, 18 Jun 2015 20:46:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/releasing-prefser-v-105/</guid>
      <description>I am happy to announce that I released version 1.0.5 of Prefser Android library. Prefser is a wrapper for Android SharedPreferences with object serialization and RxJava Observables. What has been done in this version:
 Removed final keyword from Prefser class in order to allow class mocking thanks to @plackemacher Removed unused imports from Prefser class Added test coverage report generation Increased test coverage to 100% Added abstraction for JsonConverter and default GsonConverter Added getAndObserve(.</description>
    </item>
    
    <item>
      <title>Test coverage report for Android application</title>
      <link>https://wittchen.io/posts/test-coverage-in-android-applications/</link>
      <pubDate>Wed, 03 Jun 2015 18:22:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/test-coverage-in-android-applications/</guid>
      <description>Update: see newer article about Unit test coverage report with Travis CI for Robolectric on Android. For a long time, I wasn&amp;rsquo;t able to find the right way to generate test coverage reports for Android instrumentation unit tests created with AndroidJUnit4 runner. In the past I&amp;rsquo;ve found many solutions, but none of them was working or they were compatible only with Robolectric, which I currently don&amp;rsquo;t use. Other developers also stopped using it for the new projects.</description>
    </item>
    
    <item>
      <title>Static code analysis in Android project</title>
      <link>https://wittchen.io/posts/static-code-analysis-in-android-project/</link>
      <pubDate>Thu, 26 Mar 2015 00:23:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/static-code-analysis-in-android-project/</guid>
      <description>Overview I&amp;rsquo;ve recently read great article telling how to improve quality and syntax of your Android code by Vincent Brison. It presents how to use tools like Checkstyle, Findbugs, PMD, and Android Lint for Static Code Analysis in Android project. Static Code Analysis allows us to keep consistency of the source code style and helps us to find errors, warnings, possible bugs, bottlenecks and ways to improve the projects. I highly recommend to use tools like those mentioned.</description>
    </item>
    
    <item>
      <title>Mockito on Android</title>
      <link>https://wittchen.io/posts/mockito-on-android/</link>
      <pubDate>Sun, 15 Mar 2015 15:44:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/mockito-on-android/</guid>
      <description>Overview When we write unit tests for an Android application, sometimes there&amp;rsquo;s a necessity to mock some classes or interfaces. Instead of writing implementations dedicated for unit tests by hand, we can use Mockito library. We can read article about Mockito on Android on Square&amp;rsquo;s blog. Mockito can make our tests cleaner and better. It can be used both in classic Java projects and Android projects. It&amp;rsquo;s one of the most popular mocking framework in Java and if you&amp;rsquo;re a Java developer who writes unit tests and tries to apply TDD approach, you should be familiar with it.</description>
    </item>
    
    <item>
      <title>Introducing prefser</title>
      <link>https://wittchen.io/posts/introducing-prefser/</link>
      <pubDate>Sun, 22 Feb 2015 22:39:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/introducing-prefser/</guid>
      <description>I&amp;rsquo;ve recently released Prefser, which is a wrapper for Android SharedPreferences with object serialization and RxJava Observables. Prefser wraps SharedPreferences and thanks to Java Generics provides you simpler API than classic SharedPreferences with only two methods:
void put(String key, Object value); &amp;lt;T&amp;gt; T get(String key, Class classOfT, T defaultValue); Classic SharedPreferences allows you to store only primitive data types and set of strings. Thanks to Gson serialization, Prefser allows you to store:</description>
    </item>
    
    <item>
      <title>Unit Testing Support for Android Studio 1.1</title>
      <link>https://wittchen.io/posts/unit-testing-support-for-android-studio-11/</link>
      <pubDate>Sun, 15 Feb 2015 12:53:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/unit-testing-support-for-android-studio-11/</guid>
      <description>As official Android website says:
 Version 1.1 of Android Studio and the Android gradle plugin brings support for unit testing your code. This feature is still considered experimental, we encourage you to try it and file any bugs you find in our bug tracker.
 It&amp;rsquo;s great news, because now we can write Unit Tests with JUnit 4.12 without any &amp;ldquo;hacks&amp;rdquo; or tricky configuration, which had to be done earlier.</description>
    </item>
    
    <item>
      <title>NetworkEvents v. 1.0.2</title>
      <link>https://wittchen.io/posts/network-events-v102/</link>
      <pubDate>Sun, 15 Feb 2015 00:16:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/network-events-v102/</guid>
      <description>I&amp;rsquo;ve recently released NetworkEvents v. 1.0.2. In case, you don&amp;rsquo;t know it, it&amp;rsquo;s an Android library listening network connection state and change of the Wifi signal strength. This version has small improvements:
 Updated ping method in NetworkHelper class. Detection of Internet access in WiFi network works faster and is more reliable. Added example of usage of NetworkEvents with Dagger in example-dagger directory in the repository of the project.  Right now, we check Internet connection in a different way.</description>
    </item>
    
    <item>
      <title>Hello Kotlin!</title>
      <link>https://wittchen.io/posts/hello-kotlin/</link>
      <pubDate>Sat, 07 Feb 2015 18:59:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/hello-kotlin/</guid>
      <description>I&amp;rsquo;ve recently played with Kotlin in order to create simple &amp;ldquo;Hello World&amp;rdquo; Android app using this new, fancy language from JetBrains. Kotlin is another programming language based on JVM, which can work with Java. It&amp;rsquo;s aim is to reduce code boilerplate and create projects faster. In my simple Android project, I&amp;rsquo;ve also used KotterKnife for injecting views. I&amp;rsquo;ve also added one simple ActivityUnitTestCase. Unfortunately, I couldn&amp;rsquo;t convert it into Kotlin, because I wasn&amp;rsquo;t allowed to call constructor of inherited class using super() method.</description>
    </item>
    
    <item>
      <title>Introducing NetworkEvents</title>
      <link>https://wittchen.io/posts/introducing-network-events/</link>
      <pubDate>Sat, 31 Jan 2015 20:35:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/introducing-network-events/</guid>
      <description>I have released NetworkEvents library for Android. It&amp;rsquo;s a wrapper for system Broadcast Receivers built with Otto library. It allows you to listen change of connectivity status (connected to WiFi network with or without Internet access, mobile network, off-line) and change of the WiFi signal strength very easily with @Subscribe annotation. The only thing you need to do, is to create Bus and NetworkEvents objects, register them in onResume() method and unregister them in onPause() method in your activity.</description>
    </item>
    
    <item>
      <title>Android resource converter</title>
      <link>https://wittchen.io/posts/android-resource-converter/</link>
      <pubDate>Sat, 17 Jan 2015 00:19:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/android-resource-converter/</guid>
      <description>In international projects sometimes there&amp;rsquo;s a need to send resource files to the client in order to have translated strings. Client doesn&amp;rsquo;t have to understand XML notation and editing two or more files at the same time is inconvenient. It&amp;rsquo;s easier to send file which can be edited in MS Excel or Libre Office Calc. I&amp;rsquo;ve created Python scripts, which are able to convert Android xml resources with translations to a single *.</description>
    </item>
    
    <item>
      <title>Kirai - flavored Android string formatting library</title>
      <link>https://wittchen.io/posts/kirai-flavored-android-string-formatting-library/</link>
      <pubDate>Tue, 13 Jan 2015 19:12:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/kirai-flavored-android-string-formatting-library/</guid>
      <description>Overview Recently I&amp;rsquo;ve developed and realased to Maven Central Repository Kirai, which is flavored Android string formatting library. Kirai means phrase in Swahili language. Project is inspired by phrase, TaggerString and BabushkaText. Kirai has fluent API similar to phrase with additional formatting similar to TaggerString and allows to add formatted pieces of text like BabushkaText. Development including writing Unit Tests took me about 2 days. Deployment and release to Maven Central Repository took me about 2 days as well.</description>
    </item>
    
    <item>
      <title>Detecting swipe gesture in mobile application</title>
      <link>https://wittchen.io/posts/detecting-swipe-gesture-in-mobile-application/</link>
      <pubDate>Thu, 25 Dec 2014 15:59:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/detecting-swipe-gesture-in-mobile-application/</guid>
      <description>Introduction Update: Swipe Detector project is now called swipe.
Some time ago, I needed to detect moment when user is swiping finger on the screen horizontally (from left to right or opposite) or when user swiped horizontally. I&amp;rsquo;ve decided to spend some time for analyzing [onTouch(MotionEvent event)](http://developer.android.com/reference/android/view/View.OnTouchListener.html#onTouch(android.view.View, android.view.MotionEvent)) and dispatchTouchEvent(MotionEvent event) method. We can read more about differences between triggering onTouch eventes on StackOverflow thread. Method like onTouch(MotionEvent event) allows to trigger any touch event, but it doesn&amp;rsquo;t allow to detect type of that event.</description>
    </item>
    
    <item>
      <title>Installing release and debug version of app on a single device</title>
      <link>https://wittchen.io/posts/installing-release-and-debug-version-of-app-on-a-single-device/</link>
      <pubDate>Thu, 25 Dec 2014 15:15:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/installing-release-and-debug-version-of-app-on-a-single-device/</guid>
      <description>Introduction During software development process developers and QAs may want to have installed release and debug version of the app on a single device, what can be very helpful when they want to develop and use application at the same time. Another advantage is the fact that debug and release version of the app may need different configuration. It this post I will show you an example in which we are changing application name and launcher icon, but we can also change different values during compilation in the same way (e.</description>
    </item>
    
    <item>
      <title>Square is advocating against fragments</title>
      <link>https://wittchen.io/posts/square-is-advocating-against-fragments/</link>
      <pubDate>Sun, 12 Oct 2014 18:58:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/square-is-advocating-against-fragments/</guid>
      <description>Recently, Square engineers confirmed my doubts I always had about fragments. I definitely knew that something was wrong with them, but Google introduced fragments into Android API, so I thought it must be okay for some reason and I tried to live with them feeling pain. Finally, concrete company have written an article criticizing Android Fragments and I totally agree with them. Read the article at: http://corner.squareup.com/2014/10/advocating-against-android-fragments.html.</description>
    </item>
    
    <item>
      <title>Different build config for debug and release version of the Android app</title>
      <link>https://wittchen.io/posts/different-build-config-for-debug-and-release-version-of-the-android-app/</link>
      <pubDate>Wed, 08 Oct 2014 17:52:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/different-build-config-for-debug-and-release-version-of-the-android-app/</guid>
      <description>Sometimes we may want to set different address of the back-end web service for debuggable and release version of our Android app. E.g. predefined static host and port for release version of the application and our local IP address and predefined port for debuggable version of the application. In second case, we can deploy back-end webservice on our local machine for testing purposes. We can customize all of that in build.</description>
    </item>
    
    <item>
      <title>Weather Icons for Android applications</title>
      <link>https://wittchen.io/posts/weather-icons-for-android-applications/</link>
      <pubDate>Thu, 02 Oct 2014 21:18:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/weather-icons-for-android-applications/</guid>
      <description>Some time ago I found Weather Icons project by Erik Flowers. It&amp;rsquo;s customized font with appropriate CSS, which allows you to use weather icons on the website. In addition, those icons can be customized. They can have different size or color. Moreover, they are compatible with the Bootstrap. I thought, that it would be nice, if I had something like that for Android applications. That&amp;rsquo;s why I created simple open-source project called Weather Icon View.</description>
    </item>
    
    <item>
      <title>Micro-location based on WiFi Access Points</title>
      <link>https://wittchen.io/posts/micro-location-based-on-wifi-access-points/</link>
      <pubDate>Sun, 21 Sep 2014 13:16:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/micro-location-based-on-wifi-access-points/</guid>
      <description>Introduction Recently, I started working on quite interesting project. One of its elements is micro-location inside the building based on WiFi Access Points. Company&amp;rsquo;s buildings have a lot of Access Points in different locations like regular rooms, conference rooms, corridors, sports building and restaurant. Having pool of Access Points with their names, locations and MAC addresses (or more precisely: BSSID) it&amp;rsquo;s possible to create micro-location for Android mobile devices.
Overview On the image below, you can see approximate location of WiFi Access Points in the F3 building of Future Processing company.</description>
    </item>
    
    <item>
      <title>Versioning Android applications</title>
      <link>https://wittchen.io/posts/versioning-android-applications/</link>
      <pubDate>Sat, 13 Sep 2014 12:49:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/versioning-android-applications/</guid>
      <description>When we work in a team projects, our code constantly changes and being tested. Often some bugs occur in a specific version of application and no longer exists in next version of the project, because one programmer might fixed the bug according to the Boy Scout Rule and this is good. Nevertheless, sometimes we need to write documentation and check in which version bug occurred to be sure, that it was really fixed.</description>
    </item>
    
    <item>
      <title>Updating Android XML resources before compilation via Gradle</title>
      <link>https://wittchen.io/posts/updating-android-xml-resources-before-compilation-via-gradle/</link>
      <pubDate>Wed, 10 Sep 2014 21:22:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/updating-android-xml-resources-before-compilation-via-gradle/</guid>
      <description>Problem In a team project, we encountered one of the common problems connected with mobile applications. Android application sends requests to backend web service and we don&amp;rsquo;t have backend web service deployed right now on a separate server, so every mobile developer is compiling and running backend web service on the local machine for testing purposes. In the beginning, url of backend url looked as follows:
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;resources&amp;gt; &amp;lt;string name=&amp;#34;backend_url&amp;#34;&amp;gt;192.</description>
    </item>
    
    <item>
      <title>EEG Analyzer - Android app</title>
      <link>https://wittchen.io/posts/eeg-analyzer-android-app/</link>
      <pubDate>Mon, 01 Sep 2014 11:38:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/eeg-analyzer-android-app/</guid>
      <description>I recently published my side project connected with BCI and EEG technology in Google Play Store.  EEG Analyzer reads electrical activity of the brain with EEG technology and blink strength with EMG sensor from NeuroSky MindWave Mobile device connected via Bluetooth to Android device. In order to use this application, you need to have NeuroSky MindWave Mobile device, which can be ordered from http://neurosky.com/ website. Direct link to the mentioned product: http://store.</description>
    </item>
    
    <item>
      <title>Publishing Android application in Google Play store</title>
      <link>https://wittchen.io/posts/publishing-android-application-in-google-play-store/</link>
      <pubDate>Sun, 31 Aug 2014 14:44:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/publishing-android-application-in-google-play-store/</guid>
      <description>Introduction When you want to publish your Android application in Google Play Store, first you need to go to https://play.google.com/apps/publish/ website and create a Developer account. Its cost is $25. You can read more about that at: https://support.google.com/googleplay/android-developer/answer/113468?hl=en.
Problems with payments during registration Remember that you need to have appropriate debit card in order to proceed with payments. E.g. I have debit card in PKO BP (Polish bank), which has two-stage authorization.</description>
    </item>
    
    <item>
      <title>Stuff you should know about Android</title>
      <link>https://wittchen.io/posts/stuff-you-should-know-about-android/</link>
      <pubDate>Fri, 29 Aug 2014 16:29:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/stuff-you-should-know-about-android/</guid>
      <description>Today I had talk at Future Processing about Android. It was part of company&amp;rsquo;s Java show &amp;amp; tell series. I wanted to make it interesting both for people without any experience with Android development and for people who already know something about this platform. Presentation was divided into three main parts:
 Basics Challenges Techniques  Below, you can browse slides from the presentation.
View the presentation
Of course, slides does not show everything I prepared, but they are good summary of the talk.</description>
    </item>
    
    <item>
      <title>NetworkEvents - Android library</title>
      <link>https://wittchen.io/posts/network-events-android-library/</link>
      <pubDate>Tue, 19 Aug 2014 14:59:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/network-events-android-library/</guid>
      <description>Please note: This post is outdated. Check newest API on the GitHub.
Introduction NetworkEvents is an Android library, which I&amp;rsquo;ve created recently for one of the projects. It uses Otto Event Bus to support event driven programming. We can use appropriate annotations and perform any action, when connectivity status changes. E.g. when device will go offline, connects to the mobile network, connects to the WiFi network, connects to the WiFi network with Internet access or connects to WiFi network without Internet access.</description>
    </item>
    
    <item>
      <title>Brain-Computer Interface for mobile devices - Master Thesis presentation</title>
      <link>https://wittchen.io/posts/bci-for-mobile-devices-master-thesis-presentation/</link>
      <pubDate>Tue, 08 Jul 2014 20:03:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/bci-for-mobile-devices-master-thesis-presentation/</guid>
      <description>Recently, I graduated from my university. Below, you can browse my Master Thesis presentation about Brain-Computer Interface for mobile devices. If you are interested in writing mobile Android applications communicating with NeuroSky MindWave Mobile device, you can check my EEG Reader project on GitHub, which can be treated as a basis for more advanced projects. During writing my Master Thesis, I created two another projects using similar concepts. Mentioned code may be a little bit outdated comparing to the newest Android trends, but feel free to fork and upgrade it.</description>
    </item>
    
    <item>
      <title>Selected aspects of creating mobile Android applications</title>
      <link>https://wittchen.io/posts/selected-aspects-of-creating-mobile-android-applications/</link>
      <pubDate>Mon, 07 Apr 2014 17:04:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/selected-aspects-of-creating-mobile-android-applications/</guid>
      <description>During the development of mobile applications, we should adjust our point of view to the specific projects we are working with. Applications for mobile devices are different than desktop or web applications. They have their own lifecycle, work on various devices with different screen resolutions. They have to work on devices with limited memory, clock rate of the CPU and battery life. In addition, these applications often have to be able to work without an Internet connection and their user interface has to be simple and well-designed due to smaller screen of a typical smartphone.</description>
    </item>
    
    <item>
      <title>How to highlight and click on ListView item in Android programmatically?</title>
      <link>https://wittchen.io/posts/how-to-highlight-and-click-on-listview-item-in-android-programmatically/</link>
      <pubDate>Thu, 06 Mar 2014 21:43:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/how-to-highlight-and-click-on-listview-item-in-android-programmatically/</guid>
      <description>There are many approaches concerning selecting items on Android&amp;rsquo;s ListView. Unfortunately most of them don&amp;rsquo;t work. I was struggling with this problem for some time and decided to publish my solution, which is actually quite easy.
The problem I want to highlight item on a ListView programmatically (in a source code - without touching item on the screen). I also want to click on item of the ListView programmatically.
Solution We have to create our own adapter.</description>
    </item>
    
    <item>
      <title>How to read contacts in Android device using ContentResolver?</title>
      <link>https://wittchen.io/posts/how-to-read-contacts-in-android-device-using-contentresolver/</link>
      <pubDate>Sun, 02 Mar 2014 22:23:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/how-to-read-contacts-in-android-device-using-contentresolver/</guid>
      <description>With Content Providers we can access data stored by Android system applications. Popular example of using Content Provider is retrieving contact list from the smartphone. We can also access Calendar or create our own Content Provider. More information about that can be found in documentation of Android. If we want to access Content Provider, we can use Content Resolver in our application&amp;rsquo;s context.
In this example, we will access contact list.</description>
    </item>
    
    <item>
      <title>Avoiding OutOfMemory Error while loading large Bitmaps in Android UI</title>
      <link>https://wittchen.io/posts/avoiding-outofmemory-error-while-loading-large-bitmaps-in-android-ui/</link>
      <pubDate>Sun, 23 Feb 2014 13:34:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/avoiding-outofmemory-error-while-loading-large-bitmaps-in-android-ui/</guid>
      <description>Sometimes we may encounter an error connected with loading too large Bitmaps into Android UI. In such cases, we may receive OutOfMemoryError in stack trace. In Android, we are working with limited memory and we shouldn&amp;rsquo;t load images with full resolution into UI. These images should be scaled down in order to save memory and increase performance of the application. It&amp;rsquo;s very well described in official Android documentation in section Loading Large Bitmaps Efficiently.</description>
    </item>
    
    <item>
      <title>How to connect to Android device via TCP/IP?</title>
      <link>https://wittchen.io/posts/how-to-connect-to-android-device-via-tcp-ip/</link>
      <pubDate>Sat, 12 Oct 2013 12:48:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/how-to-connect-to-android-device-via-tcp-ip/</guid>
      <description>While developing Android applications, we need to debug them on real devices. We also should be able to access debug output and execute Unix shell commands. In Android device (mobile phone or tablet), we can go to Settings and then to Developer options. Afterwards, we can enable USB Debugging. Now, we can connect our device via USB cable to the computer and we will be able to access it via Android Debug Bridge (ADB).</description>
    </item>
    
    <item>
      <title>Justifying block of text inside TextView in Android</title>
      <link>https://wittchen.io/posts/justifying-block-of-text-inside-textview-in-android/</link>
      <pubDate>Sat, 31 Aug 2013 22:14:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/justifying-block-of-text-inside-textview-in-android/</guid>
      <description>Justifying text inside TextView in Android is not that simple as we may expect it to be. Unfortunately, Android does not have attribute for TextView, which supports justifying text. We can set alignment to the right or to the left, but we cannot simply justify text with generic attributes. In order to do that, we need to perform a few tricks. First of all, we need to create file named justified_textview.</description>
    </item>
    
    <item>
      <title>Asynchronous loading and caching bitmaps with Volley</title>
      <link>https://wittchen.io/posts/asynchronous-loading-and-caching-bitmaps-with-volley/</link>
      <pubDate>Mon, 26 Aug 2013 23:37:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/asynchronous-loading-and-caching-bitmaps-with-volley/</guid>
      <description>We can use Volley library from Google for very clean, simple and easy loading of the images from Internet. Volley uses LRU cache, so first of all, we need to create BitmapLruCache class extending LruCache class.
package com.github.volley.example.toolbox; import com.android.volley.toolbox.ImageLoader.ImageCache; import android.graphics.Bitmap; import android.support.v4.util.LruCache; public class BitmapLruCache extends LruCache&amp;lt;String, Bitmap&amp;gt; implements ImageCache { public BitmapLruCache(int maxSize) { super(maxSize); } // Fix thanks to Steven&amp;#39;s comment: sizeOf method should not be overriden, // when we are passing max image cache entries in another place of the code // @Override // protected int sizeOf(String key, Bitmap value) { // return value.</description>
    </item>
    
    <item>
      <title>How to change Fragment layout on orientation change?</title>
      <link>https://wittchen.io/posts/how-to-change-fragment-layout-on-orientation-change/</link>
      <pubDate>Thu, 15 Aug 2013 22:50:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/how-to-change-fragment-layout-on-orientation-change/</guid>
      <description>When we work with Activities in Android, defining different layouts for different screen orientations is easy. The only thing we need to do, is to create two *.xml files with the same name for layouts in two separate directories (res/layout/ and res/layout-land/). In Fragments it&amp;rsquo;s not that easy. In such case, we need to perform additional operations in order to achieve our goal. Fragment in Android is not re-inflated on configuration change, but we can recreate layout and repopulate view manually.</description>
    </item>
    
    <item>
      <title>First Google Glass Hackathon in Poland</title>
      <link>https://wittchen.io/posts/first-google-glass-hackathon-in-poland/</link>
      <pubDate>Tue, 30 Jul 2013 18:46:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/first-google-glass-hackathon-in-poland/</guid>
      <description>Some time ago I participated in first Google Glass Hackathon in Poland, where I had possibility to test Google Glass, try it and write applications, which can be run on this cutting-edge device. It was very interesting experience. In addition, I took 2nd place with my team, what made me happy after leaving Warsaw late night. In a few hours, we created simple native application for Android platform, which can be used as a city guide with augmented reality, geolocation and image recognition.</description>
    </item>
    
    <item>
      <title>Displaying image from the Internet inside the TextView</title>
      <link>https://wittchen.io/posts/displaying-image-from-the-internet-resource-inside-the-textview-in-android/</link>
      <pubDate>Tue, 19 Mar 2013 23:04:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/displaying-image-from-the-internet-resource-inside-the-textview-in-android/</guid>
      <description>Sometimes, we have to work with legacy code and we have to change application&amp;rsquo;s behavior without modifying layouts, structure of the application and core components. Such situations can force us to do some tricks during development or maintenance process. For example, at the beginning, our app had to download data from the web service or RSS channel. This data consisted of the text, so we could use TextView in order to display such information.</description>
    </item>
    
    <item>
      <title>Improper data type in Android TextView</title>
      <link>https://wittchen.io/posts/improper-data-type-in-android-textview/</link>
      <pubDate>Sun, 17 Mar 2013 18:57:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/improper-data-type-in-android-textview/</guid>
      <description>Identifying the problem One of the common mistakes done by Android programmers is using improper data type in TextView. Let&amp;rsquo;s have a look on a simple code snippet:
int area; TextView sampleTextView = (TextView) findViewById(R.id.myTextViewInXml); sampleTextView.setText(area + &amp;#34; km&amp;#34;); Here, we simply set a value of the text in an exemplary TextView and append string value &amp;quot; km&amp;quot; at the end. It can be used with SeekBar. For example, when we change value of the SeekBar, we can also update value of the text inside the TextView.</description>
    </item>
    
    <item>
      <title>Endless ListView in Android</title>
      <link>https://wittchen.io/posts/endless-listview-in-android/</link>
      <pubDate>Thu, 14 Feb 2013 15:34:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/endless-listview-in-android/</guid>
      <description>Some time ago, I had to implement Endless ListView in Android application. I checked different solutions, but some of them were overprogrammed or did not work well. Fortunately, I found simple solution, which solves the problem. Code snippet presenting mentioned approach, is placed below.
public class EndlessScrollListener implements OnScrollListener { private int visibleThreshold = 20; private int currentPage = 0; @Override public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) { } @Override public void onScrollStateChanged(AbsListView view, int scrollState) { if (scrollState == SCROLL_STATE_IDLE) { if (listView.</description>
    </item>
    
    <item>
      <title>Custom background for ActionBar and SherlockActionBar</title>
      <link>https://wittchen.io/posts/custom-background-for-actionbar-and-sherlockactionbar/</link>
      <pubDate>Fri, 01 Feb 2013 22:31:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/custom-background-for-actionbar-and-sherlockactionbar/</guid>
      <description>When you want to set custom background for Android ActionBar or SherlockActionBar instead of playing with your styles or views, you can use the following simple code snippet.
@InjectResource(R.drawable.actionbar_custom_background) private Drawable actionBarCustomBackground; public void onCreate() { getSupportActionBar().setBackgroundDrawable(actionBarCustomBackground); } In this case, Drawable object is injected using RoboGuice library and set as a background for the ActionBar. In particular cases, you can use also getActionBar() method. In Drawable object you can store an image of 1 px width and it will be stretched for 100% of width of the ActionBar.</description>
    </item>
    
    <item>
      <title>Custom fonts in Android</title>
      <link>https://wittchen.io/posts/custom-fonts-in-android/</link>
      <pubDate>Thu, 31 Jan 2013 23:45:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/custom-fonts-in-android/</guid>
      <description>Using custom fonts in Android is quite simple, but requires to do some things programmatically and cannot be done using only XML file defining the view. Let&amp;rsquo;s have a look on an example. Here we have a simple Android view file:
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;LinearLayout xmlns:android=&amp;#34;http://schemas.android.com/apk/res/android&amp;#34; android:orientation=&amp;#34;vertical&amp;#34; android:layout_width=&amp;#34;fill_parent&amp;#34; android:layout_height=&amp;#34;fill_parent&amp;#34; &amp;gt; &amp;lt;TextView android:id=&amp;#34;@+id/custom_font&amp;#34; android:layout_width=&amp;#34;fill_parent&amp;#34; android:layout_height=&amp;#34;wrap_content&amp;#34; android:text=&amp;#34;This is our custom font&amp;#34; /&amp;gt; &amp;lt;/LinearLayout&amp;gt; We want to use custom font for the TextView element with id: custom_font.</description>
    </item>
    
    <item>
      <title>Android and Maven</title>
      <link>https://wittchen.io/posts/android-and-maven/</link>
      <pubDate>Thu, 24 Jan 2013 23:50:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/android-and-maven/</guid>
      <description>Overview Etymology Maven, a Yiddish word meaning accumulator of knowledge.
What is Maven? Maven is a tool that can be used for building and managing any Java-based project with all its dependencies (libraries).
Maven&amp;rsquo;s objectives  Making build process easy Providing uniform build system (Project Object Model) Providing quality project information Providing guidelines for best practices development Allowing transparent migration to new features  Setting up Maven Android projects on MS Windows Configuring environment   You need Eclipse Indigo or Juno installed</description>
    </item>
    
    <item>
      <title>Fixing bug with dissappearing map overlay after zoom in Android</title>
      <link>https://wittchen.io/posts/fixing-bug-with-dissappearing-map-overlay-after-zoom-in-android/</link>
      <pubDate>Mon, 21 Jan 2013 22:16:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/fixing-bug-with-dissappearing-map-overlay-after-zoom-in-android/</guid>
      <description>In Android 3.0 – HoneyComb (API 11) or higher occurs specific bug connected with map overlay. When we draw overlay on the map (e.g. routes, directions or polylines) after zooming to particular level, overlay disappear unexpectedly. We can fix this bug very easily by disabling hardware acceleration for drawing overlays. Below, you can see exemplary code snippet with map injected by RoboGuice and disabled hardware acceleration. Changing way of drawing overlays should fix the bug.</description>
    </item>
    
  </channel>
</rss>
