<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gradle on Piotr Wittchen</title>
    <link>https://wittchen.io/tags/gradle/</link>
    <description>Recent content in gradle on Piotr Wittchen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 Jun 2019 10:58:10 +0000</lastBuildDate>
    
	<atom:link href="https://wittchen.io/tags/gradle/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Zen of the Java library release process</title>
      <link>https://wittchen.io/posts/zen-of-java-library-release-process/</link>
      <pubDate>Sat, 08 Jun 2019 10:58:10 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/zen-of-java-library-release-process/</guid>
      <description>In my previous article I published information about publishing JAR/AAR library to the Maven Central Repository. A few steps of that process were automated, but a few of them were still manual. I mean closing and release process which had to be done by manual clicking on the Sonatype website. Fortunately, it&amp;rsquo;s possible to automate it. In order to do that, I used gradle-nexus-staging-plugin developed by Codearte. Thanks to this plugin I could get rid of the remaining manual steps left in the release process.</description>
    </item>
    
    <item>
      <title>Publishing a JAR/AAR to the Maven Central</title>
      <link>https://wittchen.io/posts/publishing-jar-aar-to-maven-central/</link>
      <pubDate>Fri, 24 May 2019 19:18:27 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/publishing-jar-aar-to-maven-central/</guid>
      <description>Introduction #  As a Java/JVM/Android developers we rely on the work of other people through frameworks and libraries. Many of them are open-source. Most of the developers are consumers of such projects. What if we would like to create our own library and distribute it to other developers? We can always create it and share a *.jar or *.aar file with others. Drawback of such solution is the fact that source of distribution may not be trusted.</description>
    </item>
    
    <item>
      <title>Creating a fat AAR</title>
      <link>https://wittchen.io/posts/creating-fat-aar/</link>
      <pubDate>Tue, 02 Oct 2018 00:01:31 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/creating-fat-aar/</guid>
      <description>I recently wrote a new library called NeuroSky Android SDK. It&amp;rsquo;s used for writing Android apps using signals of the brain waves received from the NeuroSky MindWave Mobile headsets. Probably I&amp;rsquo;ll write a separate article about it because it&amp;rsquo;s quite interesting topic. This library uses ThinkGear library, which is distributed by the NeuroSky as a *.jar file, so I couldn&amp;rsquo;t use it as a Gradle or Maven dependency in my project and I had to put this *.</description>
    </item>
    
    <item>
      <title>Separate execution of unit and integration tests in Gradle</title>
      <link>https://wittchen.io/posts/separate-execution-of-unit-and-integration-tests-in-gradle/</link>
      <pubDate>Sat, 22 Sep 2018 16:51:47 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/separate-execution-of-unit-and-integration-tests-in-gradle/</guid>
      <description>During development process, we often write unit and integration tests. While unit tests verify corectness of the small pieces of code, integration tests verify software as a whole project and sometimes can treat it as a black box where concrete results are expected. During development of the REST API, we can write integration tests for such API with REST Assured. Integration tests are usually slower, because they need to start the server and sometimes do other stuff.</description>
    </item>
    
    <item>
      <title>Excluding generated code from JaCoCo report</title>
      <link>https://wittchen.io/posts/excluding-generated-code-from-jacoco-report/</link>
      <pubDate>Tue, 18 Sep 2018 20:07:30 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/excluding-generated-code-from-jacoco-report/</guid>
      <description>I recently wrote a simple java app with Dagger 2 as a DI container and Gradle as a build system. I wanted to generate unit test coverage report for this app, so I used Jacoco.
In my build.gradle file I configured JaCoCo as follows:
plugins { id &amp;#39;jacoco&amp;#39; } jacocoTestReport { reports { xml.enabled = true html.enabled = true } } Now, I could type:
./gradlew test jacocoTestReport Report was generated in build/reports/jacoco/ directory.</description>
    </item>
    
    <item>
      <title>Writing my first library in Kotlin</title>
      <link>https://wittchen.io/posts/writing-my-first-library-in-kotlin/</link>
      <pubDate>Sun, 19 Aug 2018 10:24:19 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/writing-my-first-library-in-kotlin/</guid>
      <description>Introduction #  Recently, I decided to create a tiny Android library called RxBattery, which is monitoring battery state of the device with RxJava and RxKotlin. I created a few Java and Android libraries already and this time I decided to use Kotlin programming language instead of Java to learn something new and write something more complicated than &amp;ldquo;Hello World&amp;rdquo; app. Here are my observations.
Build System #  I used Gradle to build the project.</description>
    </item>
    
    <item>
      <title>Building and running SAP Hybris Commerce Platform via Gradle</title>
      <link>https://wittchen.io/posts/building-sap-hybris-commerce-suite-via-gradle/</link>
      <pubDate>Fri, 01 Sep 2017 18:25:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/building-sap-hybris-commerce-suite-via-gradle/</guid>
      <description>Introduction #  I really like Gradle build system for JVM apps. It has flexibility like Ant and great dependency management capabilities like Maven. It addition, it doesn&amp;rsquo;t use XML notation, but Groovy programming language, so builds configurations are simple, concise, easier to read and easier to create. In my opinion, Gradle is truly modern build system for JVM apps. Nevertheless, there are projects, which are pretty old and use older systems like Ant.</description>
    </item>
    
    <item>
      <title>Static code analysis in Android project</title>
      <link>https://wittchen.io/posts/static-code-analysis-in-android-project/</link>
      <pubDate>Thu, 26 Mar 2015 00:23:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/static-code-analysis-in-android-project/</guid>
      <description>Overview #  I&amp;rsquo;ve recently read great article telling how to improve quality and syntax of your Android code by Vincent Brison. It presents how to use tools like Checkstyle, Findbugs, PMD, and Android Lint for Static Code Analysis in Android project. Static Code Analysis allows us to keep consistency of the source code style and helps us to find errors, warnings, possible bugs, bottlenecks and ways to improve the projects.</description>
    </item>
    
    <item>
      <title>Installing release and debug version of app on a single device</title>
      <link>https://wittchen.io/posts/installing-release-and-debug-version-of-app-on-a-single-device/</link>
      <pubDate>Thu, 25 Dec 2014 15:15:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/installing-release-and-debug-version-of-app-on-a-single-device/</guid>
      <description>Introduction #  During software development process developers and QAs may want to have installed release and debug version of the app on a single device, what can be very helpful when they want to develop and use application at the same time. Another advantage is the fact that debug and release version of the app may need different configuration. It this post I will show you an example in which we are changing application name and launcher icon, but we can also change different values during compilation in the same way (e.</description>
    </item>
    
    <item>
      <title>Java Gradle Template</title>
      <link>https://wittchen.io/posts/java-gradle-template/</link>
      <pubDate>Fri, 17 Oct 2014 23:11:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/java-gradle-template/</guid>
      <description>Some time ago, I had some troubles with configuring Java project with Gradle in IntelliJ IDEA CE. There is possibility to create new Gradle project in mentioned IDE, but for some reason it didn&amp;rsquo;t worked out-of-the box in my case on Ubuntu. I wanted to have pure, clean Java project with Gradle build system ready to open in IntelliJ IDEA. I found well configured simple project at: https://github.com/quinnliu/SampleGradleProject. Basing on that project, I created my simple template.</description>
    </item>
    
    <item>
      <title>Different build config for debug and release version of the Android app</title>
      <link>https://wittchen.io/posts/different-build-config-for-debug-and-release-version-of-the-android-app/</link>
      <pubDate>Wed, 08 Oct 2014 17:52:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/different-build-config-for-debug-and-release-version-of-the-android-app/</guid>
      <description>Sometimes we may want to set different address of the back-end web service for debuggable and release version of our Android app. E.g. predefined static host and port for release version of the application and our local IP address and predefined port for debuggable version of the application. In second case, we can deploy back-end webservice on our local machine for testing purposes. We can customize all of that in build.</description>
    </item>
    
    <item>
      <title>Versioning Android applications</title>
      <link>https://wittchen.io/posts/versioning-android-applications/</link>
      <pubDate>Sat, 13 Sep 2014 12:49:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/versioning-android-applications/</guid>
      <description>When we work in a team projects, our code constantly changes and being tested. Often some bugs occur in a specific version of application and no longer exists in next version of the project, because one programmer might fixed the bug according to the Boy Scout Rule and this is good. Nevertheless, sometimes we need to write documentation and check in which version bug occurred to be sure, that it was really fixed.</description>
    </item>
    
    <item>
      <title>Updating Android XML resources before compilation via Gradle</title>
      <link>https://wittchen.io/posts/updating-android-xml-resources-before-compilation-via-gradle/</link>
      <pubDate>Wed, 10 Sep 2014 21:22:00 +0000</pubDate>
      
      <guid>https://wittchen.io/posts/updating-android-xml-resources-before-compilation-via-gradle/</guid>
      <description>Problem #  In a team project, we encountered one of the common problems connected with mobile applications. Android application sends requests to backend web service and we don&amp;rsquo;t have backend web service deployed right now on a separate server, so every mobile developer is compiling and running backend web service on the local machine for testing purposes. In the beginning, url of backend url looked as follows:
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?</description>
    </item>
    
  </channel>
</rss>