<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Gradle on Piotr Wittchen</title>
    <link>https://wittchen.io/tags/gradle/</link>
    <description>Recent content in Gradle on Piotr Wittchen</description>
    <generator>Hugo -- 0.140.2</generator>
    <language>en</language>
    <lastBuildDate>Sat, 08 Jun 2019 10:58:10 +0000</lastBuildDate>
    <atom:link href="https://wittchen.io/tags/gradle/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Zen of the Java library release process</title>
      <link>https://wittchen.io/posts/zen-of-java-library-release-process/</link>
      <pubDate>Sat, 08 Jun 2019 10:58:10 +0000</pubDate>
      <guid>https://wittchen.io/posts/zen-of-java-library-release-process/</guid>
      <description>&lt;p&gt;In my &lt;a href=&#34;https://wittchen.io/publishing-jar-aar-to-maven-central/&#34;&gt;previous article&lt;/a&gt; I published information about publishing JAR/AAR library to the Maven Central Repository. A few steps of that process were automated, but a few of them were still manual. I mean closing and release process which had to be done by manual clicking on the Sonatype website. Fortunately, it&amp;rsquo;s possible to automate it. In order to do that, I used &lt;a href=&#34;https://github.com/Codearte/gradle-nexus-staging-plugin&#34;&gt;gradle-nexus-staging-plugin&lt;/a&gt; developed by &lt;a href=&#34;https://github.com/Codearte&#34;&gt;Codearte&lt;/a&gt;. Thanks to this plugin I could get rid of the remaining manual steps left in the release process.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Publishing a JAR/AAR to the Maven Central</title>
      <link>https://wittchen.io/posts/publishing-jar-aar-to-maven-central/</link>
      <pubDate>Fri, 24 May 2019 19:18:27 +0000</pubDate>
      <guid>https://wittchen.io/posts/publishing-jar-aar-to-maven-central/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;As a Java/JVM/Android developers we rely on the work of other people through frameworks and libraries. Many of them are open-source. Most of the developers are consumers of such projects. What if we would like to create our own library and distribute it to other developers? We can always create it and share a &lt;code&gt;*.jar&lt;/code&gt; or &lt;code&gt;*.aar&lt;/code&gt; file with others. Drawback of such solution is the fact that source of distribution may not be trusted. We also have problems with versioning. Consumers of the library have to constantly download and update their files. It&amp;rsquo;s much better to publish our library to Maven Central Repository and allow others to easily and seamlessly add it as an external dependency to &lt;code&gt;pom.xml&lt;/code&gt; file (in case of Maven) or &lt;code&gt;build.gradle&lt;/code&gt; file (in case of Gradle). In such case, dependency is managed by the appropriate build system and distributed via trusted source. This may be not easy for the first time that&amp;rsquo;s why I decided to collect information related to this topic in a single article. Let&amp;rsquo;s see how to do this.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Creating a fat AAR</title>
      <link>https://wittchen.io/posts/creating-fat-aar/</link>
      <pubDate>Tue, 02 Oct 2018 00:01:31 +0000</pubDate>
      <guid>https://wittchen.io/posts/creating-fat-aar/</guid>
      <description>&lt;p&gt;I recently wrote a new library called &lt;a href=&#34;https://github.com/pwittchen/neurosky-android-sdk&#34;&gt;NeuroSky Android SDK&lt;/a&gt;. It&amp;rsquo;s used for writing Android apps using signals of the brain waves received from the NeuroSky MindWave Mobile headsets. Probably I&amp;rsquo;ll write a separate article about it because it&amp;rsquo;s quite interesting topic. This library uses ThinkGear library, which is distributed by the NeuroSky as a &lt;code&gt;*.jar&lt;/code&gt; file, so I couldn&amp;rsquo;t use it as a Gradle or Maven dependency in my project and I had to put this &lt;code&gt;*.jar&lt;/code&gt; file into the &lt;code&gt;lib&lt;/code&gt; directory and link it in the &lt;code&gt;build.gradle&lt;/code&gt; file. Moreover, I wanted to create a library, which can be added to the project as a single Gradle dependency without messing around with additional &lt;code&gt;*.jar&lt;/code&gt; files or custom configuration. Due to this fact, I decided to create a fat &lt;code&gt;*.aar&lt;/code&gt; file and deploy it to the Maven Central repository. For those who are not familar with Android, &lt;code&gt;*.aar&lt;/code&gt; is an Android version or &lt;code&gt;*.jar&lt;/code&gt; file, which can be used as library in the project. I didn&amp;rsquo;t want to reinvent the wheel, so I searched for the different solutions. Unfortunatey, a few of them didn&amp;rsquo;t work, but luckilly I&amp;rsquo;ve found what I wanted. It&amp;rsquo;s &lt;a href=&#34;https://github.com/Mobbeel/fataar-gradle-plugin&#34;&gt;fat AAR Gradle Plugin&lt;/a&gt; developed by &lt;a href=&#34;https://github.com/Mobbeel&#34;&gt;Mobbeel&lt;/a&gt; company.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Separate execution of unit and integration tests in Gradle</title>
      <link>https://wittchen.io/posts/separate-execution-of-unit-and-integration-tests-in-gradle/</link>
      <pubDate>Sat, 22 Sep 2018 16:51:47 +0000</pubDate>
      <guid>https://wittchen.io/posts/separate-execution-of-unit-and-integration-tests-in-gradle/</guid>
      <description>&lt;p&gt;During development process, we often write unit and integration tests. While unit tests verify corectness of the small pieces of code, integration tests verify software as a whole project and sometimes can treat it as a black box where concrete results are expected. During development of the REST API, we can write integration tests for such API with &lt;a href=&#34;https://github.com/rest-assured/rest-assured&#34;&gt;REST Assured&lt;/a&gt;. Integration tests are usually slower, because they need to start the server and sometimes do other stuff. That&amp;rsquo;s why it&amp;rsquo;s good to separate their execution from regular unit tests. On the CI server we can even have separate job for them.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Excluding generated code from JaCoCo report</title>
      <link>https://wittchen.io/posts/excluding-generated-code-from-jacoco-report/</link>
      <pubDate>Tue, 18 Sep 2018 20:07:30 +0000</pubDate>
      <guid>https://wittchen.io/posts/excluding-generated-code-from-jacoco-report/</guid>
      <description>&lt;p&gt;I recently wrote a simple java app with Dagger 2 as a DI container and Gradle as a build system. I wanted to generate unit test coverage report for this app, so I used Jacoco.&lt;/p&gt;
&lt;p&gt;In my &lt;code&gt;build.gradle&lt;/code&gt; file I configured JaCoCo as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-gradle&#34; data-lang=&#34;gradle&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;plugins&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;jacoco&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;jacocoTestReport&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;reports&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;xml&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;enabled&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;enabled&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, I could type:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./gradlew test jacocoTestReport
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Report was generated in &lt;code&gt;build/reports/jacoco/&lt;/code&gt; directory. I noticed that report includes Java code generated by Dagger during the compilation. I didn&amp;rsquo;t want to include it in the report because it doesn&amp;rsquo;t really make any sense to write unit tests for generated code.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Writing my first library in Kotlin</title>
      <link>https://wittchen.io/posts/writing-my-first-library-in-kotlin/</link>
      <pubDate>Sun, 19 Aug 2018 10:24:19 +0000</pubDate>
      <guid>https://wittchen.io/posts/writing-my-first-library-in-kotlin/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Recently, I decided to create a tiny Android library called &lt;a href=&#34;https://github.com/pwittchen/RxBattery&#34;&gt;RxBattery&lt;/a&gt;, which is monitoring battery state of the device with RxJava and RxKotlin. I created a few Java and Android libraries already and this time I decided to use &lt;a href=&#34;https://kotlinlang.org/&#34;&gt;Kotlin&lt;/a&gt; programming language instead of Java to learn something new and write something more complicated than &amp;ldquo;Hello World&amp;rdquo; app. Here are my observations.&lt;/p&gt;
&lt;h2 id=&#34;build-system&#34;&gt;Build System&lt;/h2&gt;
&lt;p&gt;I used &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt; to build the project. It&amp;rsquo;s popular for JVM and Android apps nowadays and works fine with Kotlin. I just needed to add Kotlin Gradle Plugin and Kotlin STD Lib to the &lt;code&gt;/library/build.gradle&lt;/code&gt; file to the &lt;code&gt;classpath&lt;/code&gt; dependencies in &lt;code&gt;buildscript&lt;/code&gt; section. I also needed to define &lt;code&gt;sourceSets&lt;/code&gt; to allow IntelliJ and Android Studio recognize directories with sources.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Building and running SAP Hybris Commerce Platform via Gradle</title>
      <link>https://wittchen.io/posts/building-sap-hybris-commerce-suite-via-gradle/</link>
      <pubDate>Fri, 01 Sep 2017 18:25:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/building-sap-hybris-commerce-suite-via-gradle/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I really like &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt; build system for JVM apps. It has flexibility like &lt;a href=&#34;http://ant.apache.org/&#34;&gt;Ant&lt;/a&gt; and great dependency management capabilities like &lt;a href=&#34;https://maven.apache.org/&#34;&gt;Maven&lt;/a&gt;. It addition, it doesn&amp;rsquo;t use XML notation, but Groovy programming language, so builds configurations are simple, concise, easier to read and easier to create. In my opinion, Gradle is truly modern build system for JVM apps. Nevertheless, there are projects, which are pretty old and use older systems like Ant. For example, all Hybris projects are based on Ant. Moreover, they have their custom setup and configurations, internal extensions system, etc. I was wondering if it&amp;rsquo;s possible to migrate Hybris Platform build from Ant to Gradle. That&amp;rsquo;s why I created a simple Proof of Concept.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Static code analysis in Android project</title>
      <link>https://wittchen.io/posts/static-code-analysis-in-android-project/</link>
      <pubDate>Thu, 26 Mar 2015 00:23:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/static-code-analysis-in-android-project/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve recently read great article telling &lt;a href=&#34;http://vincentbrison.com/2014/07/19/how-to-improve-quality-and-syntax-of-your-android-code/&#34;&gt;how to improve quality and syntax of your Android code&lt;/a&gt; by &lt;a href=&#34;http://vincentbrison.com/&#34;&gt;Vincent Brison&lt;/a&gt;. It presents how to use tools like &lt;a href=&#34;http://checkstyle.sourceforge.net/&#34;&gt;Checkstyle&lt;/a&gt;, &lt;a href=&#34;http://findbugs.sourceforge.net/&#34;&gt;Findbugs&lt;/a&gt;, &lt;a href=&#34;http://pmd.sourceforge.net/&#34;&gt;PMD&lt;/a&gt;, and &lt;a href=&#34;http://tools.android.com/tips/lint&#34;&gt;Android Lint&lt;/a&gt; for &lt;a href=&#34;http://en.wikipedia.org/wiki/Static_program_analysis&#34;&gt;Static Code Analysis&lt;/a&gt; in Android project. Static Code Analysis allows us to keep consistency of the source code style and helps us to find errors, warnings, possible bugs, bottlenecks and ways to improve the projects. I highly recommend to use tools like those mentioned.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Installing release and debug version of app on a single device</title>
      <link>https://wittchen.io/posts/installing-release-and-debug-version-of-app-on-a-single-device/</link>
      <pubDate>Thu, 25 Dec 2014 15:15:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/installing-release-and-debug-version-of-app-on-a-single-device/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;During software development process developers and QAs may want to have installed release and debug version of the app on a single device, what can be very helpful when they want to develop and use application at the same time. Another advantage is the fact that debug and release version of the app may need different configuration. It this post I will show you an example in which we are changing application name and launcher icon, but we can also change different values during compilation in the same way (e.g. address of the webservice). Some time ago, I&amp;rsquo;ve created &lt;a href=&#34;http://blog.wittchen.biz.pl/different-back-end-urls-for-debug-and-release-version-of-the-android-app/&#34;&gt;similar template&lt;/a&gt;, but it was using older version of Build Tools, Android SDK and Android Studio. I&amp;rsquo;ve created new template, with the newest version of Android Studio (1.0.2) and newest version of Build Tools (1.0.0), so in that case, build.gradle file is smaller and simpler, but does its work correctly.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java Gradle Template</title>
      <link>https://wittchen.io/posts/java-gradle-template/</link>
      <pubDate>Fri, 17 Oct 2014 23:11:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/java-gradle-template/</guid>
      <description>&lt;p&gt;Some time ago, I had some troubles with configuring Java project with Gradle in IntelliJ IDEA CE. There is possibility to create new Gradle project in mentioned IDE, but for some reason it didn&amp;rsquo;t worked out-of-the box in my case on Ubuntu. I wanted to have pure, clean Java project with Gradle build system ready to open in IntelliJ IDEA. I found well configured simple project at: &lt;a href=&#34;https://github.com/quinnliu/SampleGradleProject&#34;&gt;https://github.com/quinnliu/SampleGradleProject&lt;/a&gt;. Basing on that project, I created my simple template. I modified this project a little bit, added &lt;a href=&#34;https://github.com/alexruiz/fest-assert-2.x&#34;&gt;FEST assertions&lt;/a&gt; and wrote a few Unit Tests. In addition, I configured main class in &lt;code&gt;build.gradle&lt;/code&gt; file in order to execute it via &lt;code&gt;./gradlew run&lt;/code&gt; command. My project template also has gradle wrapper, which is very convenient practice.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Different build config for debug and release version of the Android app</title>
      <link>https://wittchen.io/posts/different-build-config-for-debug-and-release-version-of-the-android-app/</link>
      <pubDate>Wed, 08 Oct 2014 17:52:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/different-build-config-for-debug-and-release-version-of-the-android-app/</guid>
      <description>&lt;p&gt;Sometimes we may want to set different address of the back-end web service for debuggable and release version of our Android app. E.g. predefined static host and port for release version of the application and our local IP address and predefined port for debuggable version of the application. In second case, we can deploy back-end webservice on our local machine for testing purposes. We can customize all of that in build.gradle file. We can use &lt;code&gt;variant.buildType.isDebuggable()&lt;/code&gt; instruction to check build type of the app. I described way of &lt;a href=&#34;http://blog.wittchen.biz.pl/updating-android-xml-resources-dynamically-before-compilation-via-gradle/&#34;&gt;Updating Android XML resources before compilation via Gradle&lt;/a&gt; in &lt;a href=&#34;http://blog.wittchen.biz.pl/updating-android-xml-resources-dynamically-before-compilation-via-gradle/&#34;&gt;one of my previous posts&lt;/a&gt;, so you can check it if you don&amp;rsquo;t understand &lt;code&gt;replaceBackendAddressInResources(variant, host, port)&lt;/code&gt; method. After proper configuration, setting of the back-end url is straightforward. Please check the code between &lt;code&gt;// configuration of the back-end address - begin&lt;/code&gt; and &lt;code&gt;// configuration of the back-end address - end&lt;/code&gt; comments.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Versioning Android applications</title>
      <link>https://wittchen.io/posts/versioning-android-applications/</link>
      <pubDate>Sat, 13 Sep 2014 12:49:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/versioning-android-applications/</guid>
      <description>&lt;p&gt;When we work in a team projects, our code constantly changes and being tested. Often some bugs occur in a specific version of application and no longer exists in next version of the project, because one programmer might fixed the bug according to the &lt;a href=&#34;http://programmer.97things.oreilly.com/wiki/index.php/The_Boy_Scout_Rule&#34;&gt;Boy Scout Rule&lt;/a&gt; and this is good. Nevertheless, sometimes we need to write documentation and check in which version bug occurred to be sure, that it was really fixed. In addition, &lt;a href=&#34;http://en.wikipedia.org/wiki/Quality_assurance&#34;&gt;QA&lt;/a&gt; Engineer needs to know, which version of the project he or she should check. That&amp;rsquo;s why we should introduce versioning system to our project. In Android Manifest we have &lt;code&gt;versionCode&lt;/code&gt; and &lt;code&gt;versionName&lt;/code&gt;. The &lt;code&gt;versionCode&lt;/code&gt; is used for updates on Google Play Store and it has to be integer value. We should increment &lt;code&gt;versionCode&lt;/code&gt; before releasing new version of the application for the users. The &lt;code&gt;versionName&lt;/code&gt; available in Android Manifest is a string value and we can use it to store information, which we need in a current project. When we use Git as a Version Control System, we can put SHA value of a specific commit into our version name. In addition, we can add date and time of compilation to this variable. After that, our &lt;code&gt;versionName&lt;/code&gt; contains very detailed information about current version of our application. Exemplary &lt;code&gt;versionName&lt;/code&gt; will look in as follows: &lt;code&gt;f935ea7-20140913144001&lt;/code&gt;. We can obtain that with proper configuration of &lt;code&gt;build.gradle&lt;/code&gt; file containing &lt;code&gt;buildTime()&lt;/code&gt; method and &lt;code&gt;gitSha()&lt;/code&gt; method. Please, take a look at creation of &lt;code&gt;versionName&lt;/code&gt; in 35th line of the &lt;code&gt;build.gradle&lt;/code&gt; file presented below.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Updating Android XML resources before compilation via Gradle</title>
      <link>https://wittchen.io/posts/updating-android-xml-resources-before-compilation-via-gradle/</link>
      <pubDate>Wed, 10 Sep 2014 21:22:00 +0000</pubDate>
      <guid>https://wittchen.io/posts/updating-android-xml-resources-before-compilation-via-gradle/</guid>
      <description>&lt;h2 id=&#34;problem&#34;&gt;Problem&lt;/h2&gt;
&lt;p&gt;In a team project, we encountered one of the common problems connected with mobile applications. Android application sends requests to backend web service and we don&amp;rsquo;t have backend web service deployed right now on a separate server, so every mobile developer is compiling and running backend web service on the local machine for testing purposes. In the beginning, url of backend url looked as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;resources&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;string&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;backend_url&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;192.168.1.1&lt;span class=&#34;nt&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;/resources&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Of course address varies on different machines.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
