{"title":"Static code analysis in Android project","slug":"static-code-analysis-in-android-project","date":"2015-03-25T23:23:00.000Z","updated":"2019-07-03T22:51:02.816Z","comments":true,"path":"api/articles/static-code-analysis-in-android-project.json","excerpt":null,"covers":["/images/posts/2015/sca-android/lint_checkstyle_findbugs_pmd_trends.png","/images/posts/2015/sca-android/test_trend.png","/images/posts/2015/sca-android/android_build_report.png"],"content":"<h2 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h2><p>I’ve recently read great article telling <a href=\"http://vincentbrison.com/2014/07/19/how-to-improve-quality-and-syntax-of-your-android-code/\" target=\"_blank\" rel=\"noopener\">how to improve quality and syntax of your Android code</a> by <a href=\"http://vincentbrison.com/\" target=\"_blank\" rel=\"noopener\">Vincent Brison</a>. It presents how to use tools like <a href=\"http://checkstyle.sourceforge.net/\" target=\"_blank\" rel=\"noopener\">Checkstyle</a>, <a href=\"http://findbugs.sourceforge.net/\" target=\"_blank\" rel=\"noopener\">Findbugs</a>, <a href=\"http://pmd.sourceforge.net/\" target=\"_blank\" rel=\"noopener\">PMD</a>, and <a href=\"http://tools.android.com/tips/lint\" target=\"_blank\" rel=\"noopener\">Android Lint</a> for <a href=\"http://en.wikipedia.org/wiki/Static_program_analysis\" target=\"_blank\" rel=\"noopener\">Static Code Analysis</a> in Android project. Static Code Analysis allows us to keep consistency of the source code style and helps us to find errors, warnings, possible bugs, bottlenecks and ways to improve the projects. I highly recommend to use tools like those mentioned.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Visit repository at: <a href=\"https://github.com/vincentbrison/vb-android-app-quality\" target=\"_blank\" rel=\"noopener\">https://github.com/vincentbrison/vb-android-app-quality</a>. The most important files are:</p>\n<ul>\n<li><a href=\"https://github.com/vincentbrison/vb-android-app-quality/blob/master/app/build.gradle\" target=\"_blank\" rel=\"noopener\">app/build.gradle</a></li>\n<li><a href=\"https://github.com/vincentbrison/vb-android-app-quality/blob/master/config/quality.gradle\" target=\"_blank\" rel=\"noopener\">config/quality.gradle</a></li>\n</ul>\n<p>We can run analysis by executing the following command: <code>./gradlew check</code> Besides that, we can run each command like <code>checkstyle</code>, <code>findbugs</code>, <code>pmd</code> or <code>lint</code> separately if we want to. In addition, when we build the project with command: </p>\n<p><code>./gradlew build</code> </p>\n<p><code>check</code> command will be executed as well, because of the following line in <code>quality.gradle</code> file: <code>check.dependsOn &#39;checkstyle&#39;, &#39;findbugs&#39;, &#39;pmd&#39;, &#39;lint&#39;</code> After that, we can find output with our reports in directory: <code>app/build/reports/</code>. Of course, we can customize output directory and names of the report files. In default configuration, <code>check</code> command with generate reports in HTML format. Only output from the <code>checkstyle</code> operation will be generated in XML format. We can customize <code>findbugs</code>, <code>pmd</code> and <code>lint</code>, to generate XML reports instead of HTML reports in <code>quality.gradle</code> file.</p>\n<h2 id=\"Sensitivity-of-the-build\"><a href=\"#Sensitivity-of-the-build\" class=\"headerlink\" title=\"Sensitivity of the build\"></a>Sensitivity of the build</h2><p>We can customize rules of the Static Code Analysis tools in restrictive and non-restrictive way. In <code>findbugs</code> and <code>pmd</code> task, we can set <code>ignoreFailures</code> attribute as follows: <code>ignoreFailures = false</code> When it’s set to <code>false</code>, tasks will only generate reports, but when we set it to <code>true</code>, build will fail, when at least one error will be found. In <code>lint</code> task, we can customize attribute <code>abortOnError</code> as follows: <code>abortOnError true</code> It will literally abort the build, when any lint error occur. Warnings will be ignored. When we want to ignore errors, we can set this attribute to <code>false</code>.</p>\n<h2 id=\"Static-Code-Analysis-on-CI-server\"><a href=\"#Static-Code-Analysis-on-CI-server\" class=\"headerlink\" title=\"Static Code Analysis on CI server\"></a>Static Code Analysis on CI server</h2><p>When we want to perform Static Code Analysis on CI server, we can do it easily from the command line interface. If we want to automatically collect and analyze reports generated by mentioned tools, we should generate them in XML format instead of HTML, so they can be parsed by appropriate plugins. Mentioned tools can be easily integrated with <a href=\"https://jenkins-ci.org/\" target=\"_blank\" rel=\"noopener\">Jenkins CI server</a>. We need the following plugins:</p>\n<ul>\n<li><a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Checkstyle+Plugin\" target=\"_blank\" rel=\"noopener\">Checkstyle</a></li>\n<li><a href=\"https://wiki.jenkins-ci.org/display/JENKINS/FindBugs+Plugin\" target=\"_blank\" rel=\"noopener\">FindBugs</a></li>\n<li><a href=\"https://wiki.jenkins-ci.org/display/JENKINS/PMD+Plugin\" target=\"_blank\" rel=\"noopener\">PMD</a></li>\n<li><a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Android+Lint+Plugin\" target=\"_blank\" rel=\"noopener\">Android Lint</a></li>\n</ul>\n<p>After installing those plugins, we can define post-build actions in our Jenkins Job, provide paths to the appropriate XML reports and then we can view results of the reports and trend graphs directly from web panel of our Jenkins server. Exemplary trend graphs looks as follows: </p>\n<p><img src=\"/images/posts/2015/sca-android/lint_checkstyle_findbugs_pmd_trends.png\" alt=\"lint_checkstyle_findbugs_pmd_trends\"> </p>\n<p>If we have unit tests in our project, we can also generate test reports and monitor test trend. In the chart below, failed build don’t have generated test reports that’s why chart may look strange. In addition, number of tests was decreased, because they were migrated from JUnit3 to JUnit4. In JUnit3 for some reason each test case is treated as an additional unit test. JUnit4 report shows real number of tests. </p>\n<p><img src=\"/images/posts/2015/sca-android/test_trend.png\" alt=\"test_trend\"></p>\n<p>In every build, we can browse generated reports and their details. </p>\n<p><img src=\"/images/posts/2015/sca-android/android_build_report.png\" alt=\"android_build_report\"></p>\n<p>I really recommend to use Static Code Analysis tools and reporting plugins on CI in the projects, because they will increase quality of the code really fast and will allow to eliminate many errors before shipping the application.</p>\n","more":"<h2 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h2><p>I’ve recently read great article telling <a href=\"http://vincentbrison.com/2014/07/19/how-to-improve-quality-and-syntax-of-your-android-code/\" target=\"_blank\" rel=\"noopener\">how to improve quality and syntax of your Android code</a> by <a href=\"http://vincentbrison.com/\" target=\"_blank\" rel=\"noopener\">Vincent Brison</a>. It presents how to use tools like <a href=\"http://checkstyle.sourceforge.net/\" target=\"_blank\" rel=\"noopener\">Checkstyle</a>, <a href=\"http://findbugs.sourceforge.net/\" target=\"_blank\" rel=\"noopener\">Findbugs</a>, <a href=\"http://pmd.sourceforge.net/\" target=\"_blank\" rel=\"noopener\">PMD</a>, and <a href=\"http://tools.android.com/tips/lint\" target=\"_blank\" rel=\"noopener\">Android Lint</a> for <a href=\"http://en.wikipedia.org/wiki/Static_program_analysis\" target=\"_blank\" rel=\"noopener\">Static Code Analysis</a> in Android project. Static Code Analysis allows us to keep consistency of the source code style and helps us to find errors, warnings, possible bugs, bottlenecks and ways to improve the projects. I highly recommend to use tools like those mentioned.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Visit repository at: <a href=\"https://github.com/vincentbrison/vb-android-app-quality\" target=\"_blank\" rel=\"noopener\">https://github.com/vincentbrison/vb-android-app-quality</a>. The most important files are:</p>\n<ul>\n<li><a href=\"https://github.com/vincentbrison/vb-android-app-quality/blob/master/app/build.gradle\" target=\"_blank\" rel=\"noopener\">app/build.gradle</a></li>\n<li><a href=\"https://github.com/vincentbrison/vb-android-app-quality/blob/master/config/quality.gradle\" target=\"_blank\" rel=\"noopener\">config/quality.gradle</a></li>\n</ul>\n<p>We can run analysis by executing the following command: <code>./gradlew check</code> Besides that, we can run each command like <code>checkstyle</code>, <code>findbugs</code>, <code>pmd</code> or <code>lint</code> separately if we want to. In addition, when we build the project with command: </p>\n<p><code>./gradlew build</code> </p>\n<p><code>check</code> command will be executed as well, because of the following line in <code>quality.gradle</code> file: <code>check.dependsOn &#39;checkstyle&#39;, &#39;findbugs&#39;, &#39;pmd&#39;, &#39;lint&#39;</code> After that, we can find output with our reports in directory: <code>app/build/reports/</code>. Of course, we can customize output directory and names of the report files. In default configuration, <code>check</code> command with generate reports in HTML format. Only output from the <code>checkstyle</code> operation will be generated in XML format. We can customize <code>findbugs</code>, <code>pmd</code> and <code>lint</code>, to generate XML reports instead of HTML reports in <code>quality.gradle</code> file.</p>\n<h2 id=\"Sensitivity-of-the-build\"><a href=\"#Sensitivity-of-the-build\" class=\"headerlink\" title=\"Sensitivity of the build\"></a>Sensitivity of the build</h2><p>We can customize rules of the Static Code Analysis tools in restrictive and non-restrictive way. In <code>findbugs</code> and <code>pmd</code> task, we can set <code>ignoreFailures</code> attribute as follows: <code>ignoreFailures = false</code> When it’s set to <code>false</code>, tasks will only generate reports, but when we set it to <code>true</code>, build will fail, when at least one error will be found. In <code>lint</code> task, we can customize attribute <code>abortOnError</code> as follows: <code>abortOnError true</code> It will literally abort the build, when any lint error occur. Warnings will be ignored. When we want to ignore errors, we can set this attribute to <code>false</code>.</p>\n<h2 id=\"Static-Code-Analysis-on-CI-server\"><a href=\"#Static-Code-Analysis-on-CI-server\" class=\"headerlink\" title=\"Static Code Analysis on CI server\"></a>Static Code Analysis on CI server</h2><p>When we want to perform Static Code Analysis on CI server, we can do it easily from the command line interface. If we want to automatically collect and analyze reports generated by mentioned tools, we should generate them in XML format instead of HTML, so they can be parsed by appropriate plugins. Mentioned tools can be easily integrated with <a href=\"https://jenkins-ci.org/\" target=\"_blank\" rel=\"noopener\">Jenkins CI server</a>. We need the following plugins:</p>\n<ul>\n<li><a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Checkstyle+Plugin\" target=\"_blank\" rel=\"noopener\">Checkstyle</a></li>\n<li><a href=\"https://wiki.jenkins-ci.org/display/JENKINS/FindBugs+Plugin\" target=\"_blank\" rel=\"noopener\">FindBugs</a></li>\n<li><a href=\"https://wiki.jenkins-ci.org/display/JENKINS/PMD+Plugin\" target=\"_blank\" rel=\"noopener\">PMD</a></li>\n<li><a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Android+Lint+Plugin\" target=\"_blank\" rel=\"noopener\">Android Lint</a></li>\n</ul>\n<p>After installing those plugins, we can define post-build actions in our Jenkins Job, provide paths to the appropriate XML reports and then we can view results of the reports and trend graphs directly from web panel of our Jenkins server. Exemplary trend graphs looks as follows: </p>\n<p><img src=\"/images/posts/2015/sca-android/lint_checkstyle_findbugs_pmd_trends.png\" alt=\"lint_checkstyle_findbugs_pmd_trends\"> </p>\n<p>If we have unit tests in our project, we can also generate test reports and monitor test trend. In the chart below, failed build don’t have generated test reports that’s why chart may look strange. In addition, number of tests was decreased, because they were migrated from JUnit3 to JUnit4. In JUnit3 for some reason each test case is treated as an additional unit test. JUnit4 report shows real number of tests. </p>\n<p><img src=\"/images/posts/2015/sca-android/test_trend.png\" alt=\"test_trend\"></p>\n<p>In every build, we can browse generated reports and their details. </p>\n<p><img src=\"/images/posts/2015/sca-android/android_build_report.png\" alt=\"android_build_report\"></p>\n<p>I really recommend to use Static Code Analysis tools and reporting plugins on CI in the projects, because they will increase quality of the code really fast and will allow to eliminate many errors before shipping the application.</p>\n","categories":[],"tags":[{"name":"android","path":"api/tags/android.json"},{"name":"gradle","path":"api/tags/gradle.json"},{"name":"static-code-analysis","path":"api/tags/static-code-analysis.json"},{"name":"jenkins","path":"api/tags/jenkins.json"}]}