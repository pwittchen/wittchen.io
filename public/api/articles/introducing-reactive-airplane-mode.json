{"title":"Introducing ReactiveAirplaneMode","slug":"introducing-reactive-airplane-mode","date":"2017-08-15T17:28:00.000Z","updated":"2019-07-03T22:51:02.813Z","comments":true,"path":"api/articles/introducing-reactive-airplane-mode.json","excerpt":null,"covers":null,"content":"<p>I’m continuing <em>Rxfication</em> of the Android. Recently I released brand new library called <a href=\"https://github.com/pwittchen/ReactiveAirplaneMode\" target=\"_blank\" rel=\"noopener\"><strong>ReactiveAirplaneMode</strong></a>. As you may guess, it allows listening Airplane mode on Android device with RxJava observables. A usual I’ve hidden all implementation details, BroadcastReceivers and rest of the Android related stuff behind RxJava abstraction layer, so API is really simple. Just take a look on that:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactiveAirplaneMode.create()</span><br><span class=\"line\">    .observe(context)</span><br><span class=\"line\">    .subscribeOn(Schedulers.io())</span><br><span class=\"line\">    .observeOn(AndroidSchedulers.mainThread())</span><br><span class=\"line\">    .subscribe(isOn -&gt; textView.setText(String.format(<span class=\"string\">\"Airplane mode on: %s\"</span>, isOn.toString())));</span><br></pre></td></tr></table></figure>\n\n<p>In the code above <strong>subscriber will be notified only when airplane mode changes</strong>. If you want to <strong>read airplane mode and then listen to it</strong>, you can use the following method:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactiveAirplaneMode.create()</span><br><span class=\"line\">    .getAndObserve(context)</span><br><span class=\"line\">    .subscribeOn(Schedulers.io())</span><br><span class=\"line\">    .observeOn(AndroidSchedulers.mainThread())</span><br><span class=\"line\">    .subscribe(isOn -&gt; textView.setText(String.format(<span class=\"string\">\"Airplane mode on: %s\"</span>, isOn.toString())));</span><br></pre></td></tr></table></figure>\n\n<p>If you want to <strong>check airplane mode only once</strong>,<br>you can use <code>get(context)</code> method, which returns <code>Single&lt;Boolean&gt;</code> value:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactiveAirplaneMode.create()</span><br><span class=\"line\">    .get(context)</span><br><span class=\"line\">    .subscribeOn(Schedulers.io())</span><br><span class=\"line\">    .observeOn(AndroidSchedulers.mainThread())</span><br><span class=\"line\">    .subscribe(isOn -&gt; textView.setText(String.format(<span class=\"string\">\"Airplane mode on: %s\"</span>, isOn.toString())));</span><br></pre></td></tr></table></figure>\n\n<p>If you want to <strong>check airplane mode only once without using Reactive Streams</strong>, just call <code>isAirplaneModeOn(context)</code> method:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">boolean</span> isOn = ReactiveAirplaneMode.create().isAirplaneModeOn(context);</span><br></pre></td></tr></table></figure>\n\n<p>You can add this library to your project via Gradle:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">compile</span> <span class=\"string\">'com.github.pwittchen:reactiveairplanemode:0.0.1'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If you want to know more details, see sample app, documentation &amp; tests, check repository with the source code at: <a href=\"https://github.com/pwittchen/ReactiveAirplaneMode\" target=\"_blank\" rel=\"noopener\"><strong>https://github.com/pwittchen/ReactiveAirplaneMode</strong></a>.</p>\n","more":"<p>I’m continuing <em>Rxfication</em> of the Android. Recently I released brand new library called <a href=\"https://github.com/pwittchen/ReactiveAirplaneMode\" target=\"_blank\" rel=\"noopener\"><strong>ReactiveAirplaneMode</strong></a>. As you may guess, it allows listening Airplane mode on Android device with RxJava observables. A usual I’ve hidden all implementation details, BroadcastReceivers and rest of the Android related stuff behind RxJava abstraction layer, so API is really simple. Just take a look on that:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactiveAirplaneMode.create()</span><br><span class=\"line\">    .observe(context)</span><br><span class=\"line\">    .subscribeOn(Schedulers.io())</span><br><span class=\"line\">    .observeOn(AndroidSchedulers.mainThread())</span><br><span class=\"line\">    .subscribe(isOn -&gt; textView.setText(String.format(<span class=\"string\">\"Airplane mode on: %s\"</span>, isOn.toString())));</span><br></pre></td></tr></table></figure>\n\n<p>In the code above <strong>subscriber will be notified only when airplane mode changes</strong>. If you want to <strong>read airplane mode and then listen to it</strong>, you can use the following method:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactiveAirplaneMode.create()</span><br><span class=\"line\">    .getAndObserve(context)</span><br><span class=\"line\">    .subscribeOn(Schedulers.io())</span><br><span class=\"line\">    .observeOn(AndroidSchedulers.mainThread())</span><br><span class=\"line\">    .subscribe(isOn -&gt; textView.setText(String.format(<span class=\"string\">\"Airplane mode on: %s\"</span>, isOn.toString())));</span><br></pre></td></tr></table></figure>\n\n<p>If you want to <strong>check airplane mode only once</strong>,<br>you can use <code>get(context)</code> method, which returns <code>Single&lt;Boolean&gt;</code> value:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactiveAirplaneMode.create()</span><br><span class=\"line\">    .get(context)</span><br><span class=\"line\">    .subscribeOn(Schedulers.io())</span><br><span class=\"line\">    .observeOn(AndroidSchedulers.mainThread())</span><br><span class=\"line\">    .subscribe(isOn -&gt; textView.setText(String.format(<span class=\"string\">\"Airplane mode on: %s\"</span>, isOn.toString())));</span><br></pre></td></tr></table></figure>\n\n<p>If you want to <strong>check airplane mode only once without using Reactive Streams</strong>, just call <code>isAirplaneModeOn(context)</code> method:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">boolean</span> isOn = ReactiveAirplaneMode.create().isAirplaneModeOn(context);</span><br></pre></td></tr></table></figure>\n\n<p>You can add this library to your project via Gradle:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">compile</span> <span class=\"string\">'com.github.pwittchen:reactiveairplanemode:0.0.1'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If you want to know more details, see sample app, documentation &amp; tests, check repository with the source code at: <a href=\"https://github.com/pwittchen/ReactiveAirplaneMode\" target=\"_blank\" rel=\"noopener\"><strong>https://github.com/pwittchen/ReactiveAirplaneMode</strong></a>.</p>\n","categories":[],"tags":[{"name":"android","path":"api/tags/android.json"},{"name":"java","path":"api/tags/java.json"},{"name":"open-source","path":"api/tags/open-source.json"},{"name":"rxjava","path":"api/tags/rxjava.json"}]}