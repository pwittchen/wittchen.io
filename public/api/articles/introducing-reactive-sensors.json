{"title":"Introducing ReactiveSensors","slug":"introducing-reactive-sensors","date":"2015-09-05T18:03:00.000Z","updated":"2019-07-03T22:51:02.813Z","comments":true,"path":"api/articles/introducing-reactive-sensors.json","excerpt":null,"covers":null,"content":"<p>Another month, another library. Recently, I’ve released yet another reactive library called <a href=\"https://github.com/pwittchen/ReactiveSensors\" target=\"_blank\" rel=\"noopener\">ReactiveSensors</a>. It’s an open-source Android library monitoring hardware sensors with RxJava Observables. Library is compatible with RxJava 1.0.+ and RxAndroid 1.0.+ and uses them under the hood. </p>\n<p>Library is available at: <a href=\"https://github.com/pwittchen/ReactiveSensors\" target=\"_blank\" rel=\"noopener\">https://github.com/pwittchen/ReactiveSensors</a>. </p>\n<p>In my opinion, hardware sensors are perfect case for applying RxJava, because in fact we’re constantly receiving a stream of events emitted by many sensors. With Reactive Programming approach we have plenty of possibilities and easy API for manipulating received sensor’s data. </p>\n<p>Usage of the library is really simple. You just need to subscribe an Observable with RxJava in the same way like in any other reactive library. </p>\n<p>Code sample below demonstrates how to observe Gyroscope sensor: </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> ReactiveSensors(context).observeSensor(Sensor.TYPE_GYROSCOPE)</span><br><span class=\"line\">    .subscribeOn(Schedulers.io())</span><br><span class=\"line\">    .filter(ReactiveSensorEvent.filterSensorChanged())</span><br><span class=\"line\">    .observeOn(AndroidSchedulers.mainThread())</span><br><span class=\"line\">    .subscribe(<span class=\"keyword\">new</span> Action1&lt;ReactiveSensorEvent&gt;() &#123;</span><br><span class=\"line\">      <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(ReactiveSensorEvent reactiveSensorEvent)</span> </span>&#123;</span><br><span class=\"line\">        SensorEvent event = reactiveSensorEvent.getSensorEvent();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">float</span> x = event.values[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">float</span> y = event.values[<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">float</span> z = event.values[<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        String message = String.format(<span class=\"string\">\"x = %f, y = %f, z = %f\"</span>, x, y, z);</span><br><span class=\"line\"></span><br><span class=\"line\">        Log.d(<span class=\"string\">\"gyroscope readings\"</span>, message);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Please note that we are filtering events occuring when sensors reading change with <code>ReactiveSensorEvent.filterSensorChanged()</code> method. There’s also event describing change of sensor’s accuracy, which can be filtered with <code>ReactiveSensorEvent.filterAccuracyChanged()</code> method. When we don’t apply any filter, we will be notified both about sensor readings and accuracy changes. </p>\n<p>We can observe <strong>any hardware sensor</strong> in the same way. You can check <a href=\"http://developer.android.com/guide/topics/sensors/sensors_overview.html#sensors-intro\" target=\"_blank\" rel=\"noopener\">list of all sensors in official Android documentation</a>. </p>\n<p>I’ve created <a href=\"https://github.com/pwittchen/ReactiveSensors#good-practices\" target=\"_blank\" rel=\"noopener\">section about Good Practices</a> regarding working with hardware sensors on Android in <code>README.md</code> file in the GitHub repository.You should also read an article about <a href=\"http://developer.android.com/guide/topics/sensors/sensors_overview.html#sensors-practices\" target=\"_blank\" rel=\"noopener\">Best Practices for Accessing and Using Sensors in official Android documentation</a>. </p>\n<p>Read more in the <code>README.md</code> file located in the repository of the library at: <a href=\"https://github.com/pwittchen/ReactiveSensors\" target=\"_blank\" rel=\"noopener\">https://github.com/pwittchen/ReactiveSensors</a>. </p>\n<p>You can also find JavaDoc at: <a href=\"http://pwittchen.github.io/ReactiveSensors/\" target=\"_blank\" rel=\"noopener\">http://pwittchen.github.io/ReactiveSensors/</a>. </p>\n<p>If you want to use ReactiveSensors in your project, add the following dependency to your <code>build.gradle</code> file:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">compile</span> <span class=\"string\">'com.github.pwittchen:reactivesensors:0.0.1'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Feel free to send me feedback, report an issue or fork the library!</p>\n","more":"<p>Another month, another library. Recently, I’ve released yet another reactive library called <a href=\"https://github.com/pwittchen/ReactiveSensors\" target=\"_blank\" rel=\"noopener\">ReactiveSensors</a>. It’s an open-source Android library monitoring hardware sensors with RxJava Observables. Library is compatible with RxJava 1.0.+ and RxAndroid 1.0.+ and uses them under the hood. </p>\n<p>Library is available at: <a href=\"https://github.com/pwittchen/ReactiveSensors\" target=\"_blank\" rel=\"noopener\">https://github.com/pwittchen/ReactiveSensors</a>. </p>\n<p>In my opinion, hardware sensors are perfect case for applying RxJava, because in fact we’re constantly receiving a stream of events emitted by many sensors. With Reactive Programming approach we have plenty of possibilities and easy API for manipulating received sensor’s data. </p>\n<p>Usage of the library is really simple. You just need to subscribe an Observable with RxJava in the same way like in any other reactive library. </p>\n<p>Code sample below demonstrates how to observe Gyroscope sensor: </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> ReactiveSensors(context).observeSensor(Sensor.TYPE_GYROSCOPE)</span><br><span class=\"line\">    .subscribeOn(Schedulers.io())</span><br><span class=\"line\">    .filter(ReactiveSensorEvent.filterSensorChanged())</span><br><span class=\"line\">    .observeOn(AndroidSchedulers.mainThread())</span><br><span class=\"line\">    .subscribe(<span class=\"keyword\">new</span> Action1&lt;ReactiveSensorEvent&gt;() &#123;</span><br><span class=\"line\">      <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(ReactiveSensorEvent reactiveSensorEvent)</span> </span>&#123;</span><br><span class=\"line\">        SensorEvent event = reactiveSensorEvent.getSensorEvent();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">float</span> x = event.values[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">float</span> y = event.values[<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">float</span> z = event.values[<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        String message = String.format(<span class=\"string\">\"x = %f, y = %f, z = %f\"</span>, x, y, z);</span><br><span class=\"line\"></span><br><span class=\"line\">        Log.d(<span class=\"string\">\"gyroscope readings\"</span>, message);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Please note that we are filtering events occuring when sensors reading change with <code>ReactiveSensorEvent.filterSensorChanged()</code> method. There’s also event describing change of sensor’s accuracy, which can be filtered with <code>ReactiveSensorEvent.filterAccuracyChanged()</code> method. When we don’t apply any filter, we will be notified both about sensor readings and accuracy changes. </p>\n<p>We can observe <strong>any hardware sensor</strong> in the same way. You can check <a href=\"http://developer.android.com/guide/topics/sensors/sensors_overview.html#sensors-intro\" target=\"_blank\" rel=\"noopener\">list of all sensors in official Android documentation</a>. </p>\n<p>I’ve created <a href=\"https://github.com/pwittchen/ReactiveSensors#good-practices\" target=\"_blank\" rel=\"noopener\">section about Good Practices</a> regarding working with hardware sensors on Android in <code>README.md</code> file in the GitHub repository.You should also read an article about <a href=\"http://developer.android.com/guide/topics/sensors/sensors_overview.html#sensors-practices\" target=\"_blank\" rel=\"noopener\">Best Practices for Accessing and Using Sensors in official Android documentation</a>. </p>\n<p>Read more in the <code>README.md</code> file located in the repository of the library at: <a href=\"https://github.com/pwittchen/ReactiveSensors\" target=\"_blank\" rel=\"noopener\">https://github.com/pwittchen/ReactiveSensors</a>. </p>\n<p>You can also find JavaDoc at: <a href=\"http://pwittchen.github.io/ReactiveSensors/\" target=\"_blank\" rel=\"noopener\">http://pwittchen.github.io/ReactiveSensors/</a>. </p>\n<p>If you want to use ReactiveSensors in your project, add the following dependency to your <code>build.gradle</code> file:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">compile</span> <span class=\"string\">'com.github.pwittchen:reactivesensors:0.0.1'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Feel free to send me feedback, report an issue or fork the library!</p>\n","categories":[],"tags":[{"name":"android","path":"api/tags/android.json"},{"name":"open-source","path":"api/tags/open-source.json"},{"name":"sensors","path":"api/tags/sensors.json"}]}