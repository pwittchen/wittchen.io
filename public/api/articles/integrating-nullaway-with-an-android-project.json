{"title":"Integrating ErrorProne and NullAway with an Android project","slug":"integrating-nullaway-with-an-android-project","date":"2017-09-15T16:39:00.000Z","updated":"2019-07-03T22:51:02.810Z","comments":true,"path":"api/articles/integrating-nullaway-with-an-android-project.json","excerpt":null,"covers":null,"content":"<p>Recently, with the <a href=\"https://github.com/pwittchen/ReactiveNetwork/pull/226\" target=\"_blank\" rel=\"noopener\">remote help of guys from Uber in California</a>, I integrated <a href=\"https://github.com/uber/NullAway/\" target=\"_blank\" rel=\"noopener\">NullAway</a> and <a href=\"https://github.com/google/error-prone\" target=\"_blank\" rel=\"noopener\">ErrorProne</a> with the <a href=\"https://github.com/pwittchen/ReactiveNetwork\" target=\"_blank\" rel=\"noopener\">one of my open-source Android projects</a>.</p>\n<h2 id=\"What-is-NullAway\"><a href=\"#What-is-NullAway\" class=\"headerlink\" title=\"What is NullAway?\"></a>What is NullAway?</h2><p>Basically, it’s <em>a tool to help eliminate NullPointerExceptions (NPEs) in your Java code</em>. It detects situations where NPE could occur at the compile time. Let’s have a look at the following code:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">log</span><span class=\"params\">(Object x)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(x.toString());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    log(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>NullAway will find out that we’re passing <code>null</code> and we’ll get appropriate error message:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">warning: [NullAway] passing @Nullable parameter &apos;null&apos; where @NonNull is required</span><br><span class=\"line\">    log(null);</span><br><span class=\"line\">        ^</span><br></pre></td></tr></table></figure>\n\n<p>It’s good to have checks like that because they eliminate possible bugs in advance and follows Clean Code principles.</p>\n<h2 id=\"A-few-words-about-ErrorProne\"><a href=\"#A-few-words-about-ErrorProne\" class=\"headerlink\" title=\"A few words about ErrorProne\"></a>A few words about ErrorProne</h2><p>NullAway is built as a plugin to <a href=\"http://errorprone.info/\" target=\"_blank\" rel=\"noopener\">ErrorProne</a> and can run on every single build of our code. Moreover, ErrorProne can perform other checks on our code, which can find out commonly people mistakes. E.g. it can detect a situation, where programmer forgot to add <code>@Test</code> annotation in the unit test method in a test suite and other things. It has built-in <a href=\"http://errorprone.info/bugpatterns\" target=\"_blank\" rel=\"noopener\">bug patterns</a>, which are used during code analysis.</p>\n<h2 id=\"Integration-with-the-Android-project\"><a href=\"#Integration-with-the-Android-project\" class=\"headerlink\" title=\"Integration with the Android project\"></a>Integration with the Android project</h2><p>I’ve integrated ErrorProne and NullAway with <a href=\"https://github.com/pwittchen/ReactiveNetwork\" target=\"_blank\" rel=\"noopener\">ReactiveNetwork</a> Android library. First, in the main <code>build.gradle</code> file, I’ve added the following lines:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ext.deps =  [</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            nullaway          : <span class=\"string\">'com.uber.nullaway:nullaway:0.1.2'</span>,</span><br><span class=\"line\">            errorprone        : <span class=\"string\">'com.google.errorprone:error_prone_core:2.1.1'</span>,</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">buildscript</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">repositories</span> &#123;</span><br><span class=\"line\">    jcenter()</span><br><span class=\"line\">    maven &#123;</span><br><span class=\"line\">      url <span class=\"string\">'https://plugins.gradle.org/m2/'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">classpath</span> <span class=\"string\">'net.ltgt.gradle:gradle-errorprone-plugin:0.0.11'</span></span><br><span class=\"line\">    <span class=\"keyword\">classpath</span> <span class=\"string\">'net.ltgt.gradle:gradle-apt-plugin:0.11'</span></span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class=\"line\">    <span class=\"comment\">// in the individual module build.gradle files</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Next, in the <code>library/build.gradle</code> file, I’ve added appropriate plugins in the top:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: <span class=\"string\">'net.ltgt.errorprone'</span></span><br><span class=\"line\">apply plugin: <span class=\"string\">'net.ltgt.apt'</span></span><br></pre></td></tr></table></figure>\n\n<p>Afterwards, I could add dependencies:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">  annotationProcessor deps.nullaway</span><br><span class=\"line\">  errorprone deps.errorprone</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The last thing to do, is the task responsible for running analysis during project compilation:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tasks.withType(JavaCompile) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!name.toLowerCase().contains(<span class=\"string\">\"test\"</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">options</span>.compilerArgs += [<span class=\"string\">\"-Xep:NullAway:ERROR\"</span>, <span class=\"string\">\"-XepOpt:NullAway:AnnotatedPackages=com.github.pwittchen.reactivenetwork\"</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>That’s it! Now, I could run analysis by typing:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./gradlew check</span><br></pre></td></tr></table></figure>\n\n<p>and fix the issues. I think, a quite similar approach and configuration could be applied to a regular, pure Java project built with Gradle. If you’re interested in the complete configurations, check it out in my project at: <a href=\"https://github.com/pwittchen/ReactiveNetwork\" target=\"_blank\" rel=\"noopener\">https://github.com/pwittchen/ReactiveNetwork</a>. You can also view <a href=\"https://github.com/pwittchen/ReactiveNetwork/pull/226\" target=\"_blank\" rel=\"noopener\">Pull Request #226</a> made by <a href=\"https://github.com/msridhar\" target=\"_blank\" rel=\"noopener\">@msridhar</a> (kudos for him!).</p>\n","more":"<p>Recently, with the <a href=\"https://github.com/pwittchen/ReactiveNetwork/pull/226\" target=\"_blank\" rel=\"noopener\">remote help of guys from Uber in California</a>, I integrated <a href=\"https://github.com/uber/NullAway/\" target=\"_blank\" rel=\"noopener\">NullAway</a> and <a href=\"https://github.com/google/error-prone\" target=\"_blank\" rel=\"noopener\">ErrorProne</a> with the <a href=\"https://github.com/pwittchen/ReactiveNetwork\" target=\"_blank\" rel=\"noopener\">one of my open-source Android projects</a>.</p>\n<h2 id=\"What-is-NullAway\"><a href=\"#What-is-NullAway\" class=\"headerlink\" title=\"What is NullAway?\"></a>What is NullAway?</h2><p>Basically, it’s <em>a tool to help eliminate NullPointerExceptions (NPEs) in your Java code</em>. It detects situations where NPE could occur at the compile time. Let’s have a look at the following code:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">log</span><span class=\"params\">(Object x)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(x.toString());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    log(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>NullAway will find out that we’re passing <code>null</code> and we’ll get appropriate error message:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">warning: [NullAway] passing @Nullable parameter &apos;null&apos; where @NonNull is required</span><br><span class=\"line\">    log(null);</span><br><span class=\"line\">        ^</span><br></pre></td></tr></table></figure>\n\n<p>It’s good to have checks like that because they eliminate possible bugs in advance and follows Clean Code principles.</p>\n<h2 id=\"A-few-words-about-ErrorProne\"><a href=\"#A-few-words-about-ErrorProne\" class=\"headerlink\" title=\"A few words about ErrorProne\"></a>A few words about ErrorProne</h2><p>NullAway is built as a plugin to <a href=\"http://errorprone.info/\" target=\"_blank\" rel=\"noopener\">ErrorProne</a> and can run on every single build of our code. Moreover, ErrorProne can perform other checks on our code, which can find out commonly people mistakes. E.g. it can detect a situation, where programmer forgot to add <code>@Test</code> annotation in the unit test method in a test suite and other things. It has built-in <a href=\"http://errorprone.info/bugpatterns\" target=\"_blank\" rel=\"noopener\">bug patterns</a>, which are used during code analysis.</p>\n<h2 id=\"Integration-with-the-Android-project\"><a href=\"#Integration-with-the-Android-project\" class=\"headerlink\" title=\"Integration with the Android project\"></a>Integration with the Android project</h2><p>I’ve integrated ErrorProne and NullAway with <a href=\"https://github.com/pwittchen/ReactiveNetwork\" target=\"_blank\" rel=\"noopener\">ReactiveNetwork</a> Android library. First, in the main <code>build.gradle</code> file, I’ve added the following lines:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ext.deps =  [</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            nullaway          : <span class=\"string\">'com.uber.nullaway:nullaway:0.1.2'</span>,</span><br><span class=\"line\">            errorprone        : <span class=\"string\">'com.google.errorprone:error_prone_core:2.1.1'</span>,</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">buildscript</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">repositories</span> &#123;</span><br><span class=\"line\">    jcenter()</span><br><span class=\"line\">    maven &#123;</span><br><span class=\"line\">      url <span class=\"string\">'https://plugins.gradle.org/m2/'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">classpath</span> <span class=\"string\">'net.ltgt.gradle:gradle-errorprone-plugin:0.0.11'</span></span><br><span class=\"line\">    <span class=\"keyword\">classpath</span> <span class=\"string\">'net.ltgt.gradle:gradle-apt-plugin:0.11'</span></span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class=\"line\">    <span class=\"comment\">// in the individual module build.gradle files</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Next, in the <code>library/build.gradle</code> file, I’ve added appropriate plugins in the top:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: <span class=\"string\">'net.ltgt.errorprone'</span></span><br><span class=\"line\">apply plugin: <span class=\"string\">'net.ltgt.apt'</span></span><br></pre></td></tr></table></figure>\n\n<p>Afterwards, I could add dependencies:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">  annotationProcessor deps.nullaway</span><br><span class=\"line\">  errorprone deps.errorprone</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The last thing to do, is the task responsible for running analysis during project compilation:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tasks.withType(JavaCompile) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!name.toLowerCase().contains(<span class=\"string\">\"test\"</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">options</span>.compilerArgs += [<span class=\"string\">\"-Xep:NullAway:ERROR\"</span>, <span class=\"string\">\"-XepOpt:NullAway:AnnotatedPackages=com.github.pwittchen.reactivenetwork\"</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>That’s it! Now, I could run analysis by typing:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./gradlew check</span><br></pre></td></tr></table></figure>\n\n<p>and fix the issues. I think, a quite similar approach and configuration could be applied to a regular, pure Java project built with Gradle. If you’re interested in the complete configurations, check it out in my project at: <a href=\"https://github.com/pwittchen/ReactiveNetwork\" target=\"_blank\" rel=\"noopener\">https://github.com/pwittchen/ReactiveNetwork</a>. You can also view <a href=\"https://github.com/pwittchen/ReactiveNetwork/pull/226\" target=\"_blank\" rel=\"noopener\">Pull Request #226</a> made by <a href=\"https://github.com/msridhar\" target=\"_blank\" rel=\"noopener\">@msridhar</a> (kudos for him!).</p>\n","categories":[],"tags":[{"name":"android","path":"api/tags/android.json"},{"name":"java","path":"api/tags/java.json"},{"name":"gradle","path":"api/tags/gradle.json"},{"name":"static-code-analysis","path":"api/tags/static-code-analysis.json"}]}