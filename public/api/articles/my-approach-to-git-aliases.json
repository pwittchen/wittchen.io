{"title":"My approach to Git aliases","slug":"my-approach-to-git-aliases","date":"2017-03-12T12:20:00.000Z","updated":"2019-07-03T22:51:02.813Z","comments":true,"path":"api/articles/my-approach-to-git-aliases.json","excerpt":null,"covers":["/images/posts/2017/my-approach-to-git-aliases/git-alias-hint.png"],"content":"<p>While we are working with Version Control Systems like Git, it’s good to adapt them to our needs to perform daily work in a more productive way. People often create so-called Git aliases, which are shortcuts for longer commands. E.g. you can edit your <code>.gitconfig</code> file, which is usually located in your home directory and place a few aliases in the <code>[alias]</code> section. For example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[alias]</span><br><span class=\"line\">  ls = log --pretty=format:&quot;%C(yellow)%h%Cred%d\\\\ %Creset%s%Cblue\\\\ [%cn]&quot; --decorate</span><br></pre></td></tr></table></figure>\n\n<p>Then you can type: <code>git ls</code> in your Git repository to see pretty Git log. Sometimes people go further and create many more aliases like:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp = cherry-pick</span><br><span class=\"line\">st = status</span><br><span class=\"line\">cl = clone</span><br><span class=\"line\">ci = commit</span><br><span class=\"line\">co = checkout</span><br><span class=\"line\">br = branch</span><br></pre></td></tr></table></figure>\n\n<p>and so on. I’ve seen configurations containing about <strong>20 aliases or more</strong> consisting of shortcuts, which have 2 or 3 letters. Usually, we don’t use 20 commands every day. I can remember e.g. 5 shortcuts, but I don’t want to remember more. Instead of alias:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lcm = log -1 --pretty=%B</span><br></pre></td></tr></table></figure>\n\n<p>I prefer:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">last-commit-msg = log -1 --pretty=%B</span><br></pre></td></tr></table></figure>\n\n<p>When I’m using terminal on Linux or macOS, I have type hinting, so I can type: <code>git la</code>, hit <code>Tab</code> and terminal will autocomplete my command to <code>git last-commit-</code>. Then I can hit <code>Tab</code> again and I can choose one of my aliases and select one by hitting <code>Enter</code>. <img src=\"/images/posts/2017/my-approach-to-git-aliases/git-alias-hint.png\" alt=\"git alias hints in unix terminal\"> Now, I don’t have to remember all of my aliases. <strong>I treat my <code>.gitconfig</code> file as a documentation</strong>. Whenever I want to browse aliases, I can type <code>git list-aliases</code> (it’s also an alias to <code>!git config -l | grep alias | cut -c 7- | sort</code>) and if I want to find aliases related to diffs, I can type <code>git list-aliases | grep diff</code>. I also have more descriptive aliases like:</p>\n<p>undo-last-commit = reset –hard HEAD^</p>\n<p>so I know what this command actually does. Morover, divided my aliases into <strong>separate sections</strong> and marked these sections with comments. The sections are as follows:</p>\n<ul>\n<li>showing metadata</li>\n<li>showing urls</li>\n<li>showing commits, logs &amp; branches</li>\n<li>ignoring files</li>\n<li>adding &amp; reviewing changes</li>\n<li>resetting and reverting changes</li>\n<li>merging changes</li>\n<li>branching</li>\n<li>showing diffs</li>\n<li>searching files</li>\n</ul>\n<p>It allows me to keep my aliases in more organized way. It’s useful when our <code>.gitconfig</code> file “lives” and we update it during the work day if we need to. Maybe this approach won’t be the best way of using Git for everyone, but <strong>it works for me</strong> and allows me to solve my daily tasks easier and faster. You can find complete source of my <code>.gitconfig</code> file in my <a href=\"https://github.com/pwittchen/dotfiles\" target=\"_blank\" rel=\"noopener\">dotfiles</a> repository at <a href=\"https://github.com/pwittchen/dotfiles/blob/master/.gitconfig\" target=\"_blank\" rel=\"noopener\">https://github.com/pwittchen/dotfiles/blob/master/.gitconfig</a>.</p>\n<h3 id=\"Further-reading\"><a href=\"#Further-reading\" class=\"headerlink\" title=\"Further reading\"></a>Further reading</h3><ul>\n<li><a href=\"http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/\" target=\"_blank\" rel=\"noopener\">Must Have Git Aliases: Advanced Examples</a></li>\n<li><a href=\"https://gist.github.com/mwhite/6887990\" target=\"_blank\" rel=\"noopener\">The Ultimate Git Alias Setup</a></li>\n</ul>\n<p>Happy coding!</p>\n","more":"<p>While we are working with Version Control Systems like Git, it’s good to adapt them to our needs to perform daily work in a more productive way. People often create so-called Git aliases, which are shortcuts for longer commands. E.g. you can edit your <code>.gitconfig</code> file, which is usually located in your home directory and place a few aliases in the <code>[alias]</code> section. For example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[alias]</span><br><span class=\"line\">  ls = log --pretty=format:&quot;%C(yellow)%h%Cred%d\\\\ %Creset%s%Cblue\\\\ [%cn]&quot; --decorate</span><br></pre></td></tr></table></figure>\n\n<p>Then you can type: <code>git ls</code> in your Git repository to see pretty Git log. Sometimes people go further and create many more aliases like:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp = cherry-pick</span><br><span class=\"line\">st = status</span><br><span class=\"line\">cl = clone</span><br><span class=\"line\">ci = commit</span><br><span class=\"line\">co = checkout</span><br><span class=\"line\">br = branch</span><br></pre></td></tr></table></figure>\n\n<p>and so on. I’ve seen configurations containing about <strong>20 aliases or more</strong> consisting of shortcuts, which have 2 or 3 letters. Usually, we don’t use 20 commands every day. I can remember e.g. 5 shortcuts, but I don’t want to remember more. Instead of alias:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lcm = log -1 --pretty=%B</span><br></pre></td></tr></table></figure>\n\n<p>I prefer:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">last-commit-msg = log -1 --pretty=%B</span><br></pre></td></tr></table></figure>\n\n<p>When I’m using terminal on Linux or macOS, I have type hinting, so I can type: <code>git la</code>, hit <code>Tab</code> and terminal will autocomplete my command to <code>git last-commit-</code>. Then I can hit <code>Tab</code> again and I can choose one of my aliases and select one by hitting <code>Enter</code>. <img src=\"/images/posts/2017/my-approach-to-git-aliases/git-alias-hint.png\" alt=\"git alias hints in unix terminal\"> Now, I don’t have to remember all of my aliases. <strong>I treat my <code>.gitconfig</code> file as a documentation</strong>. Whenever I want to browse aliases, I can type <code>git list-aliases</code> (it’s also an alias to <code>!git config -l | grep alias | cut -c 7- | sort</code>) and if I want to find aliases related to diffs, I can type <code>git list-aliases | grep diff</code>. I also have more descriptive aliases like:</p>\n<p>undo-last-commit = reset –hard HEAD^</p>\n<p>so I know what this command actually does. Morover, divided my aliases into <strong>separate sections</strong> and marked these sections with comments. The sections are as follows:</p>\n<ul>\n<li>showing metadata</li>\n<li>showing urls</li>\n<li>showing commits, logs &amp; branches</li>\n<li>ignoring files</li>\n<li>adding &amp; reviewing changes</li>\n<li>resetting and reverting changes</li>\n<li>merging changes</li>\n<li>branching</li>\n<li>showing diffs</li>\n<li>searching files</li>\n</ul>\n<p>It allows me to keep my aliases in more organized way. It’s useful when our <code>.gitconfig</code> file “lives” and we update it during the work day if we need to. Maybe this approach won’t be the best way of using Git for everyone, but <strong>it works for me</strong> and allows me to solve my daily tasks easier and faster. You can find complete source of my <code>.gitconfig</code> file in my <a href=\"https://github.com/pwittchen/dotfiles\" target=\"_blank\" rel=\"noopener\">dotfiles</a> repository at <a href=\"https://github.com/pwittchen/dotfiles/blob/master/.gitconfig\" target=\"_blank\" rel=\"noopener\">https://github.com/pwittchen/dotfiles/blob/master/.gitconfig</a>.</p>\n<h3 id=\"Further-reading\"><a href=\"#Further-reading\" class=\"headerlink\" title=\"Further reading\"></a>Further reading</h3><ul>\n<li><a href=\"http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/\" target=\"_blank\" rel=\"noopener\">Must Have Git Aliases: Advanced Examples</a></li>\n<li><a href=\"https://gist.github.com/mwhite/6887990\" target=\"_blank\" rel=\"noopener\">The Ultimate Git Alias Setup</a></li>\n</ul>\n<p>Happy coding!</p>\n","categories":[],"tags":[{"name":"git","path":"api/tags/git.json"}]}