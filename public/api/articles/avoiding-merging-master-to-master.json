{"title":"Avoiding merging master to master branch in Git","slug":"avoiding-merging-master-to-master","date":"2018-03-25T11:35:06.000Z","updated":"2019-07-03T22:51:02.810Z","comments":true,"path":"api/articles/avoiding-merging-master-to-master.json","excerpt":null,"covers":null,"content":"<h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h2><p>If you are working with Git Version Control System, probably you have seen a commit messages in your git log like:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Merge branch &apos;master&apos; to &apos;master&apos;</span><br></pre></td></tr></table></figure>\n\n<p>or something similar. You might have even pushed such commits! Don’t worry, so did I ;-).<br>In this article I’m going to explain why is it happenning and how to avoid it.</p>\n<p>Such situation happens when you performed changes locally and at the same time someone else performed changes on the same branch as well, commited and pushed them to the remote repository. When you are done with your changes, you committed everything and want to push changes. If there are no conflicts, Git wants you to synchronize local repository with the remote repository. That’s why you need to merge changes from the remote master branch into your local master branch. After that you can finally push your changes.</p>\n<p>It’s shown on the diagram below.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">another developer ------o---(commit)---o------------------------------------------</span><br><span class=\"line\">                       /|\\             |</span><br><span class=\"line\">                        |              |</span><br><span class=\"line\">                       pull          push</span><br><span class=\"line\">                        |              |</span><br><span class=\"line\">                        |             \\|/</span><br><span class=\"line\">remote &apos;master&apos; ----o---o--------------o------x-----------------o-------------o---</span><br><span class=\"line\">                    |                        /|\\                |            /|\\</span><br><span class=\"line\">                    |                         |                 |             |</span><br><span class=\"line\">                   pull                      push (rejected)   pull          push</span><br><span class=\"line\">                    |                         |                 |             |</span><br><span class=\"line\">                   \\|/                        |                \\|/            |</span><br><span class=\"line\">you ----------------o-------(commit)----------o-----------------o---(merge)---o----</span><br></pre></td></tr></table></figure>\n\n<p>Actually, there’s nothing wrong with it, but on the other hand you have “polluted” git log. Imagine everyone is following that approach and your code base changes frequently. After some period of time, you’ll get a tons of <code>merge &#39;master&#39; to &#39;master&#39;</code> messages, which doesn’t really tell you anything. It will be hard to navigate through the history of the repository and track changes. Luckily, we can avoid that.</p>\n<h2 id=\"Solution-1\"><a href=\"#Solution-1\" class=\"headerlink\" title=\"Solution #1\"></a>Solution #1</h2><p>What to do, when Git wants you to merge remote <code>master</code> branch into local <code>master</code> branch?<br>I think there may be various strategies to deal with that. I’m going to show you one approach</p>\n<h3 id=\"1-Move-your-last-commit-into-staging-area\"><a href=\"#1-Move-your-last-commit-into-staging-area\" class=\"headerlink\" title=\"1. Move your last commit into staging area\"></a>1. Move your last commit into staging area</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --soft HEAD~1</span><br></pre></td></tr></table></figure>\n\n<p>Now, you removed your last commit, but you have your changes uncommited in staging area.</p>\n<h3 id=\"2-Move-your-changes-from-staging-to-unstaged-area\"><a href=\"#2-Move-your-changes-from-staging-to-unstaged-area\" class=\"headerlink\" title=\"2. Move your changes from staging to unstaged area\"></a>2. Move your changes from staging to unstaged area</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset HEAD -- .</span><br></pre></td></tr></table></figure>\n\n<p>Now, you have your changes uncommited and unstaged.</p>\n<h3 id=\"3-Stash-your-changes\"><a href=\"#3-Stash-your-changes\" class=\"headerlink\" title=\"3. Stash your changes\"></a>3. Stash your changes</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash</span><br></pre></td></tr></table></figure>\n\n<p>Now, our changes are stashed. We can list them as follows:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash list</span><br></pre></td></tr></table></figure>\n\n<p>To show what’s in the most recent stash, we can type:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash show -p</span><br></pre></td></tr></table></figure>\n\n<p>To view an arbitrary stash, we can type something like:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash show -p stash@&#123;1&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-Pull-changes-from-the-remote-repository\"><a href=\"#4-Pull-changes-from-the-remote-repository\" class=\"headerlink\" title=\"4. Pull changes from the remote repository\"></a>4. Pull changes from the remote repository</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-Apply-stashed-changes\"><a href=\"#5-Apply-stashed-changes\" class=\"headerlink\" title=\"5. Apply stashed changes\"></a>5. Apply stashed changes</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash apply</span><br></pre></td></tr></table></figure>\n\n<p>or</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash pop</span><br></pre></td></tr></table></figure>\n\n<p>if we want to delete our applied stash from the list of stashes</p>\n<h3 id=\"6-Commit-and-push-your-changes\"><a href=\"#6-Commit-and-push-your-changes\" class=\"headerlink\" title=\"6. Commit and push your changes\"></a>6. Commit and push your changes</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -A</span><br><span class=\"line\">git commit -m &quot;my elegant change&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<p>Now, we have our local repository synchronized with the remote one. We pushed our local changes and we didn’t polluted git log with <code>merge &#39;master&#39; to &#39;master&#39;</code> commits. If you are not very comfortable with Git, try to practice this in a “test” repo before applying this approach in your production repo.</p>\n<h2 id=\"Solution-2\"><a href=\"#Solution-2\" class=\"headerlink\" title=\"Solution #2\"></a>Solution #2</h2><p>I’ve got a feedback about this article from one of the readers (Thanks Cyprian! ;-) and there’s a simpler way to solve that problem.</p>\n<p>We can use <code>rebase</code> functionality as follows:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch origin</span><br></pre></td></tr></table></figure>\n\n<p>Now we have fetched changes from the <code>origin</code> (remote repo) without applying (merging) them in the local repo.<br>Next, we can rebase our changes:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase origin/master</span><br></pre></td></tr></table></figure>\n\n<p>During this operation, we have put changes from the remote repository into our local repository without merge operations. Moreover, we preserved our local (not pushed) commits.<br>Now, we can push our changes to the remote repository:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<p>and we’re done!</p>\n<p>I hope, this article will help to keep your git log clean.</p>\n<p>As you see, I’m open for any kind of constructive feedback about these articles, so you can send me e-mails. Probably, I’ll add commenting functionality back to this blog, so feedback will be easier.</p>\n","more":"<h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h2><p>If you are working with Git Version Control System, probably you have seen a commit messages in your git log like:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Merge branch &apos;master&apos; to &apos;master&apos;</span><br></pre></td></tr></table></figure>\n\n<p>or something similar. You might have even pushed such commits! Don’t worry, so did I ;-).<br>In this article I’m going to explain why is it happenning and how to avoid it.</p>\n<p>Such situation happens when you performed changes locally and at the same time someone else performed changes on the same branch as well, commited and pushed them to the remote repository. When you are done with your changes, you committed everything and want to push changes. If there are no conflicts, Git wants you to synchronize local repository with the remote repository. That’s why you need to merge changes from the remote master branch into your local master branch. After that you can finally push your changes.</p>\n<p>It’s shown on the diagram below.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">another developer ------o---(commit)---o------------------------------------------</span><br><span class=\"line\">                       /|\\             |</span><br><span class=\"line\">                        |              |</span><br><span class=\"line\">                       pull          push</span><br><span class=\"line\">                        |              |</span><br><span class=\"line\">                        |             \\|/</span><br><span class=\"line\">remote &apos;master&apos; ----o---o--------------o------x-----------------o-------------o---</span><br><span class=\"line\">                    |                        /|\\                |            /|\\</span><br><span class=\"line\">                    |                         |                 |             |</span><br><span class=\"line\">                   pull                      push (rejected)   pull          push</span><br><span class=\"line\">                    |                         |                 |             |</span><br><span class=\"line\">                   \\|/                        |                \\|/            |</span><br><span class=\"line\">you ----------------o-------(commit)----------o-----------------o---(merge)---o----</span><br></pre></td></tr></table></figure>\n\n<p>Actually, there’s nothing wrong with it, but on the other hand you have “polluted” git log. Imagine everyone is following that approach and your code base changes frequently. After some period of time, you’ll get a tons of <code>merge &#39;master&#39; to &#39;master&#39;</code> messages, which doesn’t really tell you anything. It will be hard to navigate through the history of the repository and track changes. Luckily, we can avoid that.</p>\n<h2 id=\"Solution-1\"><a href=\"#Solution-1\" class=\"headerlink\" title=\"Solution #1\"></a>Solution #1</h2><p>What to do, when Git wants you to merge remote <code>master</code> branch into local <code>master</code> branch?<br>I think there may be various strategies to deal with that. I’m going to show you one approach</p>\n<h3 id=\"1-Move-your-last-commit-into-staging-area\"><a href=\"#1-Move-your-last-commit-into-staging-area\" class=\"headerlink\" title=\"1. Move your last commit into staging area\"></a>1. Move your last commit into staging area</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --soft HEAD~1</span><br></pre></td></tr></table></figure>\n\n<p>Now, you removed your last commit, but you have your changes uncommited in staging area.</p>\n<h3 id=\"2-Move-your-changes-from-staging-to-unstaged-area\"><a href=\"#2-Move-your-changes-from-staging-to-unstaged-area\" class=\"headerlink\" title=\"2. Move your changes from staging to unstaged area\"></a>2. Move your changes from staging to unstaged area</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset HEAD -- .</span><br></pre></td></tr></table></figure>\n\n<p>Now, you have your changes uncommited and unstaged.</p>\n<h3 id=\"3-Stash-your-changes\"><a href=\"#3-Stash-your-changes\" class=\"headerlink\" title=\"3. Stash your changes\"></a>3. Stash your changes</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash</span><br></pre></td></tr></table></figure>\n\n<p>Now, our changes are stashed. We can list them as follows:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash list</span><br></pre></td></tr></table></figure>\n\n<p>To show what’s in the most recent stash, we can type:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash show -p</span><br></pre></td></tr></table></figure>\n\n<p>To view an arbitrary stash, we can type something like:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash show -p stash@&#123;1&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-Pull-changes-from-the-remote-repository\"><a href=\"#4-Pull-changes-from-the-remote-repository\" class=\"headerlink\" title=\"4. Pull changes from the remote repository\"></a>4. Pull changes from the remote repository</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-Apply-stashed-changes\"><a href=\"#5-Apply-stashed-changes\" class=\"headerlink\" title=\"5. Apply stashed changes\"></a>5. Apply stashed changes</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash apply</span><br></pre></td></tr></table></figure>\n\n<p>or</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash pop</span><br></pre></td></tr></table></figure>\n\n<p>if we want to delete our applied stash from the list of stashes</p>\n<h3 id=\"6-Commit-and-push-your-changes\"><a href=\"#6-Commit-and-push-your-changes\" class=\"headerlink\" title=\"6. Commit and push your changes\"></a>6. Commit and push your changes</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -A</span><br><span class=\"line\">git commit -m &quot;my elegant change&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<p>Now, we have our local repository synchronized with the remote one. We pushed our local changes and we didn’t polluted git log with <code>merge &#39;master&#39; to &#39;master&#39;</code> commits. If you are not very comfortable with Git, try to practice this in a “test” repo before applying this approach in your production repo.</p>\n<h2 id=\"Solution-2\"><a href=\"#Solution-2\" class=\"headerlink\" title=\"Solution #2\"></a>Solution #2</h2><p>I’ve got a feedback about this article from one of the readers (Thanks Cyprian! ;-) and there’s a simpler way to solve that problem.</p>\n<p>We can use <code>rebase</code> functionality as follows:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch origin</span><br></pre></td></tr></table></figure>\n\n<p>Now we have fetched changes from the <code>origin</code> (remote repo) without applying (merging) them in the local repo.<br>Next, we can rebase our changes:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase origin/master</span><br></pre></td></tr></table></figure>\n\n<p>During this operation, we have put changes from the remote repository into our local repository without merge operations. Moreover, we preserved our local (not pushed) commits.<br>Now, we can push our changes to the remote repository:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<p>and we’re done!</p>\n<p>I hope, this article will help to keep your git log clean.</p>\n<p>As you see, I’m open for any kind of constructive feedback about these articles, so you can send me e-mails. Probably, I’ll add commenting functionality back to this blog, so feedback will be easier.</p>\n","categories":[],"tags":[{"name":"git","path":"api/tags/git.json"}]}