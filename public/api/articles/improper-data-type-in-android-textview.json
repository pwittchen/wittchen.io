{"title":"Improper data type in Android TextView","slug":"improper-data-type-in-android-textview","date":"2013-03-17T17:57:00.000Z","updated":"2019-07-03T22:51:02.810Z","comments":true,"path":"api/articles/improper-data-type-in-android-textview.json","excerpt":null,"covers":null,"content":"<h2 id=\"Identifying-the-problem\"><a href=\"#Identifying-the-problem\" class=\"headerlink\" title=\"Identifying the problem\"></a>Identifying the problem</h2><p>One of the common mistakes done by Android programmers is using improper data type in <em>TextView</em>. Let’s have a look on a simple code snippet:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> area;</span><br><span class=\"line\">TextView sampleTextView = (TextView) findViewById(R.id.myTextViewInXml);</span><br><span class=\"line\">sampleTextView.setText(area + <span class=\"string\">\" km\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Here, we simply set a value of the text in an exemplary <em>TextView</em> and append string value “ km” at the end. It can be used with <em>SeekBar</em>. For example, when we change value of the <em>SeekBar</em>, we can also update value of the text inside the <em>TextView</em>. Let’s have a look on another example:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> area;</span><br><span class=\"line\">TextView sampleTextView = (TextView) findViewById(R.id.myTextViewInXml);</span><br><span class=\"line\">sampleTextView.setText(area);</span><br></pre></td></tr></table></figure>\n\n<p>Here, we don’t append string value “ km” at the end. In such case, our application will crash. We have to remember, that Java is <a href=\"http://en.wikipedia.org/wiki/Strong_typing\" target=\"_blank\" rel=\"noopener\">strongly typed language</a> and we have to take care about data types. In previous example, we had a cast to the <em>String</em> type, because we appended <em>String</em> value at the end. In the second example, we have only <em>int</em> value, but argument for <em>setText</em> method must be in type of <em>String</em>. Method named <em>setText</em> accepts integer values as well and in such case, it will try to find resource with a specified integer identifier generated with R.java file. Resource won’t be found and application will crash. We can quickly fix this bug by casting argument of the method to the <em>String</em> type.</p>\n<h2 id=\"Solving-the-problem\"><a href=\"#Solving-the-problem\" class=\"headerlink\" title=\"Solving the problem\"></a>Solving the problem</h2><p>There are at least two ways of solving this problem: </p>\n<p><strong>Solution no. 1</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> area;</span><br><span class=\"line\">TextView sampleTextView = (TextView) findViewById(R.id.myTextViewInXml);</span><br><span class=\"line\">sampleTextView.setText(Integer.toString(area));</span><br></pre></td></tr></table></figure>\n\n<p><strong>Solution no. 2</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> area;</span><br><span class=\"line\">TextView sampleTextView = (TextView) findViewById(R.id.myTextViewInXml);</span><br><span class=\"line\">sampleTextView.setText(area + <span class=\"string\">\"\"</span>);</span><br></pre></td></tr></table></figure>\n\n","more":"<h2 id=\"Identifying-the-problem\"><a href=\"#Identifying-the-problem\" class=\"headerlink\" title=\"Identifying the problem\"></a>Identifying the problem</h2><p>One of the common mistakes done by Android programmers is using improper data type in <em>TextView</em>. Let’s have a look on a simple code snippet:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> area;</span><br><span class=\"line\">TextView sampleTextView = (TextView) findViewById(R.id.myTextViewInXml);</span><br><span class=\"line\">sampleTextView.setText(area + <span class=\"string\">\" km\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Here, we simply set a value of the text in an exemplary <em>TextView</em> and append string value “ km” at the end. It can be used with <em>SeekBar</em>. For example, when we change value of the <em>SeekBar</em>, we can also update value of the text inside the <em>TextView</em>. Let’s have a look on another example:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> area;</span><br><span class=\"line\">TextView sampleTextView = (TextView) findViewById(R.id.myTextViewInXml);</span><br><span class=\"line\">sampleTextView.setText(area);</span><br></pre></td></tr></table></figure>\n\n<p>Here, we don’t append string value “ km” at the end. In such case, our application will crash. We have to remember, that Java is <a href=\"http://en.wikipedia.org/wiki/Strong_typing\" target=\"_blank\" rel=\"noopener\">strongly typed language</a> and we have to take care about data types. In previous example, we had a cast to the <em>String</em> type, because we appended <em>String</em> value at the end. In the second example, we have only <em>int</em> value, but argument for <em>setText</em> method must be in type of <em>String</em>. Method named <em>setText</em> accepts integer values as well and in such case, it will try to find resource with a specified integer identifier generated with R.java file. Resource won’t be found and application will crash. We can quickly fix this bug by casting argument of the method to the <em>String</em> type.</p>\n<h2 id=\"Solving-the-problem\"><a href=\"#Solving-the-problem\" class=\"headerlink\" title=\"Solving the problem\"></a>Solving the problem</h2><p>There are at least two ways of solving this problem: </p>\n<p><strong>Solution no. 1</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> area;</span><br><span class=\"line\">TextView sampleTextView = (TextView) findViewById(R.id.myTextViewInXml);</span><br><span class=\"line\">sampleTextView.setText(Integer.toString(area));</span><br></pre></td></tr></table></figure>\n\n<p><strong>Solution no. 2</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> area;</span><br><span class=\"line\">TextView sampleTextView = (TextView) findViewById(R.id.myTextViewInXml);</span><br><span class=\"line\">sampleTextView.setText(area + <span class=\"string\">\"\"</span>);</span><br></pre></td></tr></table></figure>\n\n","categories":[],"tags":[{"name":"android","path":"api/tags/android.json"}]}