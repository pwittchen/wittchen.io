{"title":"Automating generation of the on-line documentation for Java library","slug":"automating-generation-of-the-on-line-documentation-for-java-library","date":"2018-02-11T09:22:00.000Z","updated":"2019-07-03T22:51:02.810Z","comments":true,"path":"api/articles/automating-generation-of-the-on-line-documentation-for-java-library.json","excerpt":null,"covers":null,"content":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>In one of my open-source projects - <a href=\"https://github.com/pwittchen/ReactiveNetwork\" target=\"_blank\" rel=\"noopener\">ReactiveNetwork</a> I have a documentation in <code>README.md</code> file and I have JavaDocs as well. This project is an Android library written in Java and built with Gradle. Moreover, I develop this project on two separate Git branches - one for RxJava1.x and another one for RxJava2.x. Similar convention is in the RxJava repository, so I followed it. After each release I publish documentation and JavaDocs on GitHub pages for both versions. It’s kind of boring and repeatable task, so I was wondering if there’s any way to automate it.</p>\n<h2 id=\"Generating-JavaDocs\"><a href=\"#Generating-JavaDocs\" class=\"headerlink\" title=\"Generating JavaDocs\"></a>Generating JavaDocs</h2><p>I have a Gradle task, which does that as follows:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./gradlew androidJavadocs</span><br></pre></td></tr></table></figure>\n\n<p>and generates JavaDocs in <code>library/build/docs/javadoc/</code> directory. I keep generated JavaDocs on <code>gh-pages</code> branch in <code>/javadoc/RxJava1.x/</code> and <code>/javadoc/RxJava2.x/</code> directories. Now, I need to checkout to <code>RxJava2.x</code> branch generate JavaDocs, switch to <code>gh-pages</code> branch delete contents of <code>javadoc/RxJava2.x/</code> directory, copy contents from <code>library/build/docs/javadoc/</code> into <code>javadoc/RxJava2.x/</code>, commit changes, do the same for <code>RxJava1.x</code> branch and push changes. As you noticed, It’s a lot of manual work. I’ve scripted it as follows in my <code>update_javadocs.sh</code> file:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!/usr/bin/env bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># update javadocs for RxJava2.x</span></span><br><span class=\"line\">git checkout RxJava2.x</span><br><span class=\"line\">./gradlew clean androidJavadocs</span><br><span class=\"line\">git checkout gh-pages</span><br><span class=\"line\">rm -rf javadoc/RxJava2.x/*</span><br><span class=\"line\">cp -avr library/build/docs/javadoc/* ./javadoc/RxJava2.x</span><br><span class=\"line\">git add -A</span><br><span class=\"line\">git commit -m <span class=\"string\">\"updating JavaDoc for RxJava2.x\"</span></span><br><span class=\"line\">rm -rf library/build/docs</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"javadocs for RxJava2.x updated\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># update javadocs for RxJava1.x</span></span><br><span class=\"line\">git checkout RxJava1.x</span><br><span class=\"line\">./gradlew clean androidJavadocs</span><br><span class=\"line\">git checkout gh-pages</span><br><span class=\"line\">rm -rf javadoc/RxJava1.x/*</span><br><span class=\"line\">cp -avr library/build/docs/javadoc/* ./javadoc/RxJava1.x</span><br><span class=\"line\">git add -A</span><br><span class=\"line\">git commit -m <span class=\"string\">\"updating javadocs for RxJava1.x\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"javadocs for RxJava1.x updated\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"javadocs for both RxJava1.x and RxJava2.x updated - now you can push your changes\"</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Generating-user-friendly-documentation\"><a href=\"#Generating-user-friendly-documentation\" class=\"headerlink\" title=\"Generating user-friendly documentation\"></a>Generating user-friendly documentation</h2><p>I keep my whole documentation for the user in <code>README.md</code> file. In order to generate user-friendly website with documentation I used <a href=\"https://docsify.js.org\" target=\"_blank\" rel=\"noopener\">docsify</a>. You can install it as follows via <code>npm</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i docsify-cli -g</span><br></pre></td></tr></table></figure>\n\n<p>Next, on <code>gh-pages</code> branch I’ve created <code>docs/RxJava1.x/</code> and <code>docs/RxJava2.x/</code> directories and copied there appropriate <code>README.md</code> files from <code>RxJava1.x</code> and <code>RxJava2.x</code> branches. Next I could go inside each directory and type:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docsify init .</span><br></pre></td></tr></table></figure>\n\n<p>Docsify generated nice website with documentation gathered dynamically from <code>README.md</code> file. After that, I’ve done a few manual adjustments. Now, the only thing a need to do is to keep <code>README.md</code> files updated. That’s why I made a script for copying <code>README.md</code> files from <code>RxJava1.x</code> and <code>RxJava2.x</code> branch into appropriate directories on <code>gh-pages</code> branch and named it <code>update_docs.sh</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env bash</span></span><br><span class=\"line\">git checkout gh-pages</span><br><span class=\"line\">git show RxJava1.x:README.md &gt;docs/RxJava1.x/README.md</span><br><span class=\"line\">git show RxJava2.x:README.md &gt;docs/RxJava2.x/README.md</span><br><span class=\"line\">git add -A</span><br><span class=\"line\">git commit -m <span class=\"string\">\"updating docs\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"docs updated, now you can push your changes\"</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>Now, I have boring process of generating Docs and JavaDocs for two separate Git branches automated and I can simply invoke my scripts:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./update_javadocs.sh</span><br><span class=\"line\">./update_docs.sh</span><br><span class=\"line\"></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<p>and that’s it! You can see websites with documentation at:</p>\n<ul>\n<li><a href=\"http://pwittchen.github.io/ReactiveNetwork/docs/RxJava1.x\" target=\"_blank\" rel=\"noopener\">http://pwittchen.github.io/ReactiveNetwork/docs/RxJava1.x</a></li>\n<li><a href=\"http://pwittchen.github.io/ReactiveNetwork/docs/RxJava2.x\" target=\"_blank\" rel=\"noopener\">http://pwittchen.github.io/ReactiveNetwork/docs/RxJava2.x</a></li>\n</ul>\n<p>and JavaDocs at:</p>\n<ul>\n<li><a href=\"http://pwittchen.github.io/ReactiveNetwork/javadoc/RxJava1.x\" target=\"_blank\" rel=\"noopener\">http://pwittchen.github.io/ReactiveNetwork/javadoc/RxJava1.x</a></li>\n<li><a href=\"http://pwittchen.github.io/ReactiveNetwork/javadoc/RxJava2.x\" target=\"_blank\" rel=\"noopener\">http://pwittchen.github.io/ReactiveNetwork/javadoc/RxJava2.x</a></li>\n</ul>\n<p>I hope this article will give some ideas of automating your repeatable tasks.</p>\n","more":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>In one of my open-source projects - <a href=\"https://github.com/pwittchen/ReactiveNetwork\" target=\"_blank\" rel=\"noopener\">ReactiveNetwork</a> I have a documentation in <code>README.md</code> file and I have JavaDocs as well. This project is an Android library written in Java and built with Gradle. Moreover, I develop this project on two separate Git branches - one for RxJava1.x and another one for RxJava2.x. Similar convention is in the RxJava repository, so I followed it. After each release I publish documentation and JavaDocs on GitHub pages for both versions. It’s kind of boring and repeatable task, so I was wondering if there’s any way to automate it.</p>\n<h2 id=\"Generating-JavaDocs\"><a href=\"#Generating-JavaDocs\" class=\"headerlink\" title=\"Generating JavaDocs\"></a>Generating JavaDocs</h2><p>I have a Gradle task, which does that as follows:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./gradlew androidJavadocs</span><br></pre></td></tr></table></figure>\n\n<p>and generates JavaDocs in <code>library/build/docs/javadoc/</code> directory. I keep generated JavaDocs on <code>gh-pages</code> branch in <code>/javadoc/RxJava1.x/</code> and <code>/javadoc/RxJava2.x/</code> directories. Now, I need to checkout to <code>RxJava2.x</code> branch generate JavaDocs, switch to <code>gh-pages</code> branch delete contents of <code>javadoc/RxJava2.x/</code> directory, copy contents from <code>library/build/docs/javadoc/</code> into <code>javadoc/RxJava2.x/</code>, commit changes, do the same for <code>RxJava1.x</code> branch and push changes. As you noticed, It’s a lot of manual work. I’ve scripted it as follows in my <code>update_javadocs.sh</code> file:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!/usr/bin/env bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># update javadocs for RxJava2.x</span></span><br><span class=\"line\">git checkout RxJava2.x</span><br><span class=\"line\">./gradlew clean androidJavadocs</span><br><span class=\"line\">git checkout gh-pages</span><br><span class=\"line\">rm -rf javadoc/RxJava2.x/*</span><br><span class=\"line\">cp -avr library/build/docs/javadoc/* ./javadoc/RxJava2.x</span><br><span class=\"line\">git add -A</span><br><span class=\"line\">git commit -m <span class=\"string\">\"updating JavaDoc for RxJava2.x\"</span></span><br><span class=\"line\">rm -rf library/build/docs</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"javadocs for RxJava2.x updated\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># update javadocs for RxJava1.x</span></span><br><span class=\"line\">git checkout RxJava1.x</span><br><span class=\"line\">./gradlew clean androidJavadocs</span><br><span class=\"line\">git checkout gh-pages</span><br><span class=\"line\">rm -rf javadoc/RxJava1.x/*</span><br><span class=\"line\">cp -avr library/build/docs/javadoc/* ./javadoc/RxJava1.x</span><br><span class=\"line\">git add -A</span><br><span class=\"line\">git commit -m <span class=\"string\">\"updating javadocs for RxJava1.x\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"javadocs for RxJava1.x updated\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"javadocs for both RxJava1.x and RxJava2.x updated - now you can push your changes\"</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Generating-user-friendly-documentation\"><a href=\"#Generating-user-friendly-documentation\" class=\"headerlink\" title=\"Generating user-friendly documentation\"></a>Generating user-friendly documentation</h2><p>I keep my whole documentation for the user in <code>README.md</code> file. In order to generate user-friendly website with documentation I used <a href=\"https://docsify.js.org\" target=\"_blank\" rel=\"noopener\">docsify</a>. You can install it as follows via <code>npm</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i docsify-cli -g</span><br></pre></td></tr></table></figure>\n\n<p>Next, on <code>gh-pages</code> branch I’ve created <code>docs/RxJava1.x/</code> and <code>docs/RxJava2.x/</code> directories and copied there appropriate <code>README.md</code> files from <code>RxJava1.x</code> and <code>RxJava2.x</code> branches. Next I could go inside each directory and type:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docsify init .</span><br></pre></td></tr></table></figure>\n\n<p>Docsify generated nice website with documentation gathered dynamically from <code>README.md</code> file. After that, I’ve done a few manual adjustments. Now, the only thing a need to do is to keep <code>README.md</code> files updated. That’s why I made a script for copying <code>README.md</code> files from <code>RxJava1.x</code> and <code>RxJava2.x</code> branch into appropriate directories on <code>gh-pages</code> branch and named it <code>update_docs.sh</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env bash</span></span><br><span class=\"line\">git checkout gh-pages</span><br><span class=\"line\">git show RxJava1.x:README.md &gt;docs/RxJava1.x/README.md</span><br><span class=\"line\">git show RxJava2.x:README.md &gt;docs/RxJava2.x/README.md</span><br><span class=\"line\">git add -A</span><br><span class=\"line\">git commit -m <span class=\"string\">\"updating docs\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"docs updated, now you can push your changes\"</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>Now, I have boring process of generating Docs and JavaDocs for two separate Git branches automated and I can simply invoke my scripts:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./update_javadocs.sh</span><br><span class=\"line\">./update_docs.sh</span><br><span class=\"line\"></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<p>and that’s it! You can see websites with documentation at:</p>\n<ul>\n<li><a href=\"http://pwittchen.github.io/ReactiveNetwork/docs/RxJava1.x\" target=\"_blank\" rel=\"noopener\">http://pwittchen.github.io/ReactiveNetwork/docs/RxJava1.x</a></li>\n<li><a href=\"http://pwittchen.github.io/ReactiveNetwork/docs/RxJava2.x\" target=\"_blank\" rel=\"noopener\">http://pwittchen.github.io/ReactiveNetwork/docs/RxJava2.x</a></li>\n</ul>\n<p>and JavaDocs at:</p>\n<ul>\n<li><a href=\"http://pwittchen.github.io/ReactiveNetwork/javadoc/RxJava1.x\" target=\"_blank\" rel=\"noopener\">http://pwittchen.github.io/ReactiveNetwork/javadoc/RxJava1.x</a></li>\n<li><a href=\"http://pwittchen.github.io/ReactiveNetwork/javadoc/RxJava2.x\" target=\"_blank\" rel=\"noopener\">http://pwittchen.github.io/ReactiveNetwork/javadoc/RxJava2.x</a></li>\n</ul>\n<p>I hope this article will give some ideas of automating your repeatable tasks.</p>\n","categories":[],"tags":[{"name":"java","path":"api/tags/java.json"},{"name":"open-source","path":"api/tags/open-source.json"},{"name":"bash","path":"api/tags/bash.json"},{"name":"javadoc","path":"api/tags/javadoc.json"},{"name":"docs","path":"api/tags/docs.json"}]}