{"title":"Adding reversed numbers","slug":"adding-reversed-numbers","date":"2013-01-21T17:51:00.000Z","updated":"2019-07-03T22:51:02.806Z","comments":true,"path":"api/articles/adding-reversed-numbers.json","excerpt":null,"covers":null,"content":"<p>In this post I will show you my approach to adding reversed numbers. This problem occurred during the ACM Central European Programming Contest, in Prague in 1998.</p>\n<h2 id=\"General-description-of-the-problem\"><a href=\"#General-description-of-the-problem\" class=\"headerlink\" title=\"General description of the problem\"></a>General description of the problem</h2><h3 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input\"></a>Input</h3><p>The input consists of <em>N</em> cases (equal to about 10000). The first line of the input contains only positive integer <em>N</em>. Then follow the cases. Each case consists of exactly one line with two positive integers separated by space. These are the reversed numbers you are to add.</p>\n<h3 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h3><p>For each case, print exactly one line containing only one integer - the reversed sum of two reversed numbers. Omit any leading zeros in the output.</p>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h3><p><strong>Sample input:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">24 1</span><br><span class=\"line\">4358 754</span><br><span class=\"line\">305 794</span><br></pre></td></tr></table></figure>\n\n<p><strong>Sample output:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">34</span><br><span class=\"line\">1998</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><h3 id=\"Exemplary-approach\"><a href=\"#Exemplary-approach\" class=\"headerlink\" title=\"Exemplary approach\"></a>Exemplary approach</h3><ol>\n<li>In the first line of the input, we put number of the lines to process.</li>\n<li>In the next lines, we put numbers split by space, in which we should reverse order of the digits and then add them.</li>\n<li>In the final step, we should reverse order of the digits in the generated data and write result to the output.</li>\n</ol>\n<h3 id=\"Proposal-of-the-solution-in-the-Ruby-language\"><a href=\"#Proposal-of-the-solution-in-the-Ruby-language\" class=\"headerlink\" title=\"Proposal of the solution in the Ruby language\"></a>Proposal of the solution in the Ruby language</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addrev</span><span class=\"params\">(n)</span></span> </span><br><span class=\"line\">  b = <span class=\"number\">0</span></span><br><span class=\"line\">\tn.split(<span class=\"string\">' '</span>).each <span class=\"keyword\">do</span> <span class=\"params\">|a|</span></span><br><span class=\"line\">\t\tb+= a.to_s.reverse.to_i</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> b.to_s.reverse.to_i</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"literal\">true</span></span><br><span class=\"line\">i = j = <span class=\"number\">0</span></span><br><span class=\"line\">out = []</span><br><span class=\"line\"></span><br><span class=\"line\">$stdin.each_line <span class=\"keyword\">do</span> <span class=\"params\">|line|</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!a) <span class=\"keyword\">then</span> </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(j != i)</span><br><span class=\"line\">\t\t\tout.push(addrev(line.to_s))</span><br><span class=\"line\">\t\t\tj += <span class=\"number\">1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\ti = line.to_i</span><br><span class=\"line\">\t\ta = <span class=\"literal\">false</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">out.each <span class=\"keyword\">do</span> <span class=\"params\">|b|</span> </span><br><span class=\"line\">\t$stdout &lt;&lt; b &lt;&lt; <span class=\"string\">\"\\n\"</span> </span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n","more":"<p>In this post I will show you my approach to adding reversed numbers. This problem occurred during the ACM Central European Programming Contest, in Prague in 1998.</p>\n<h2 id=\"General-description-of-the-problem\"><a href=\"#General-description-of-the-problem\" class=\"headerlink\" title=\"General description of the problem\"></a>General description of the problem</h2><h3 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input\"></a>Input</h3><p>The input consists of <em>N</em> cases (equal to about 10000). The first line of the input contains only positive integer <em>N</em>. Then follow the cases. Each case consists of exactly one line with two positive integers separated by space. These are the reversed numbers you are to add.</p>\n<h3 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h3><p>For each case, print exactly one line containing only one integer - the reversed sum of two reversed numbers. Omit any leading zeros in the output.</p>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h3><p><strong>Sample input:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">24 1</span><br><span class=\"line\">4358 754</span><br><span class=\"line\">305 794</span><br></pre></td></tr></table></figure>\n\n<p><strong>Sample output:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">34</span><br><span class=\"line\">1998</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><h3 id=\"Exemplary-approach\"><a href=\"#Exemplary-approach\" class=\"headerlink\" title=\"Exemplary approach\"></a>Exemplary approach</h3><ol>\n<li>In the first line of the input, we put number of the lines to process.</li>\n<li>In the next lines, we put numbers split by space, in which we should reverse order of the digits and then add them.</li>\n<li>In the final step, we should reverse order of the digits in the generated data and write result to the output.</li>\n</ol>\n<h3 id=\"Proposal-of-the-solution-in-the-Ruby-language\"><a href=\"#Proposal-of-the-solution-in-the-Ruby-language\" class=\"headerlink\" title=\"Proposal of the solution in the Ruby language\"></a>Proposal of the solution in the Ruby language</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addrev</span><span class=\"params\">(n)</span></span> </span><br><span class=\"line\">  b = <span class=\"number\">0</span></span><br><span class=\"line\">\tn.split(<span class=\"string\">' '</span>).each <span class=\"keyword\">do</span> <span class=\"params\">|a|</span></span><br><span class=\"line\">\t\tb+= a.to_s.reverse.to_i</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> b.to_s.reverse.to_i</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"literal\">true</span></span><br><span class=\"line\">i = j = <span class=\"number\">0</span></span><br><span class=\"line\">out = []</span><br><span class=\"line\"></span><br><span class=\"line\">$stdin.each_line <span class=\"keyword\">do</span> <span class=\"params\">|line|</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!a) <span class=\"keyword\">then</span> </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(j != i)</span><br><span class=\"line\">\t\t\tout.push(addrev(line.to_s))</span><br><span class=\"line\">\t\t\tj += <span class=\"number\">1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\ti = line.to_i</span><br><span class=\"line\">\t\ta = <span class=\"literal\">false</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">out.each <span class=\"keyword\">do</span> <span class=\"params\">|b|</span> </span><br><span class=\"line\">\t$stdout &lt;&lt; b &lt;&lt; <span class=\"string\">\"\\n\"</span> </span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n","categories":[],"tags":[{"name":"algorithms","path":"api/tags/algorithms.json"},{"name":"ruby","path":"api/tags/ruby.json"}]}