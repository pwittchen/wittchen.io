{"title":"Displaying image from the Internet inside the TextView","slug":"displaying-image-from-the-internet-resource-inside-the-textview-in-android","date":"2013-03-19T22:04:00.000Z","updated":"2019-07-03T22:51:02.810Z","comments":true,"path":"api/articles/displaying-image-from-the-internet-resource-inside-the-textview-in-android.json","excerpt":null,"covers":null,"content":"<p>Sometimes, we have to work with legacy code and we have to change application’s behavior without modifying layouts, structure of the application and core components. Such situations can force us to do some tricks during development or maintenance process. For example, at the beginning, our app had to download data from the web service or RSS channel. This data consisted of the text, so we could use <em>TextView</em> in order to display such information. After some time, back-end developers decided to put there some HTML code including references to images. We want to display images in our mobile application without modifying existing structure, so we can create data of type <em>Drawable</em> inside the <em>TextView</em>. We can do it by creating an additional method <em>getImageHTML()</em> and using <a href=\"http://developer.android.com/reference/android/text/Html.html#fromHtml(java.lang.String)\" target=\"_blank\" rel=\"noopener\"><em>fromHtml</em></a> method from <a href=\"http://developer.android.com/reference/android/text/Html.html\" target=\"_blank\" rel=\"noopener\"><em>Html</em> class</a>, which is default Android class. Below, you can see an example presenting approach described in this post.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FromHtmlImageActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> TextView sampleTextView;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Spanned spannedValue;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String stringWithHtml;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">\t\tsetContentView(R.layout.main);</span><br><span class=\"line\">\t\tstringWithHtml = <span class=\"string\">\"Sample string with an &lt;a href=\\\"http://www.exemplary-link.com\\\"&gt;exemplary link&lt;/a&gt;.\"</span>;</span><br><span class=\"line\">\t\tspannedValue = Html.fromHtml(stringWithHtml,getImageHTML(),<span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t\tsampleTextView = (TextView)findViewById(R.id.sample_textview);</span><br><span class=\"line\">\t\tsampleTextView.setText(spannedValue);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">public</span> ImageGetter <span class=\"title\">getImageHTML</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tImageGetter imageGetter = <span class=\"keyword\">new</span> ImageGetter() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> Drawable <span class=\"title\">getDrawable</span><span class=\"params\">(String source)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tDrawable drawable = Drawable.createFromStream(<span class=\"keyword\">new</span> URL(source).openStream(), <span class=\"string\">\"src name\"</span>);</span><br><span class=\"line\">\t\t\t\t\tdrawable.setBounds(<span class=\"number\">0</span>, <span class=\"number\">0</span>, drawable.getIntrinsicWidth(),drawable.getIntrinsicHeight());</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> drawable;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span>(IOException exception) &#123;</span><br><span class=\"line\">\t\t\t\t\tLog.v(<span class=\"string\">\"IOException\"</span>,exception.getMessage());</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> imageGetter;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","more":"<p>Sometimes, we have to work with legacy code and we have to change application’s behavior without modifying layouts, structure of the application and core components. Such situations can force us to do some tricks during development or maintenance process. For example, at the beginning, our app had to download data from the web service or RSS channel. This data consisted of the text, so we could use <em>TextView</em> in order to display such information. After some time, back-end developers decided to put there some HTML code including references to images. We want to display images in our mobile application without modifying existing structure, so we can create data of type <em>Drawable</em> inside the <em>TextView</em>. We can do it by creating an additional method <em>getImageHTML()</em> and using <a href=\"http://developer.android.com/reference/android/text/Html.html#fromHtml(java.lang.String)\" target=\"_blank\" rel=\"noopener\"><em>fromHtml</em></a> method from <a href=\"http://developer.android.com/reference/android/text/Html.html\" target=\"_blank\" rel=\"noopener\"><em>Html</em> class</a>, which is default Android class. Below, you can see an example presenting approach described in this post.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FromHtmlImageActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> TextView sampleTextView;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Spanned spannedValue;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String stringWithHtml;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">\t\tsetContentView(R.layout.main);</span><br><span class=\"line\">\t\tstringWithHtml = <span class=\"string\">\"Sample string with an &lt;a href=\\\"http://www.exemplary-link.com\\\"&gt;exemplary link&lt;/a&gt;.\"</span>;</span><br><span class=\"line\">\t\tspannedValue = Html.fromHtml(stringWithHtml,getImageHTML(),<span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t\tsampleTextView = (TextView)findViewById(R.id.sample_textview);</span><br><span class=\"line\">\t\tsampleTextView.setText(spannedValue);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">public</span> ImageGetter <span class=\"title\">getImageHTML</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tImageGetter imageGetter = <span class=\"keyword\">new</span> ImageGetter() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> Drawable <span class=\"title\">getDrawable</span><span class=\"params\">(String source)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tDrawable drawable = Drawable.createFromStream(<span class=\"keyword\">new</span> URL(source).openStream(), <span class=\"string\">\"src name\"</span>);</span><br><span class=\"line\">\t\t\t\t\tdrawable.setBounds(<span class=\"number\">0</span>, <span class=\"number\">0</span>, drawable.getIntrinsicWidth(),drawable.getIntrinsicHeight());</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> drawable;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span>(IOException exception) &#123;</span><br><span class=\"line\">\t\t\t\t\tLog.v(<span class=\"string\">\"IOException\"</span>,exception.getMessage());</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> imageGetter;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":[{"name":"android","path":"api/tags/android.json"}]}