{"title":"Spotify song in i3 status bar","slug":"spotify-song-in-i3-status-bar","date":"2020-02-20T10:29:13.000Z","updated":"2020-02-20T12:29:13.091Z","comments":true,"path":"api/articles/spotify-song-in-i3-status-bar.json","excerpt":null,"covers":["/images/posts/2020/spotify-song-in-i3-status-bar/i3bar_spotify.png"],"content":"<p>While customizing my i3 status bar, I wanted to have currently played Spotify song in it. Some time ago, I created an open source script in Python called <a href=\"https://github.com/pwittchen/spotify-cli-linux\" target=\"_blank\" rel=\"noopener\">spotify-cli-linux</a> and I wanted to use it. When we want to put something custom into the i3 status bar, the easiest way to do it, is to save data into the file and then read the file.</p>\n<p>I created the following config inside <code>~/.config/i3status/config</code> file:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">order += <span class=\"string\">\"read_file spotify\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">read_file spotify &#123;</span><br><span class=\"line\">        format = <span class=\"string\">\"♪ %content\"</span></span><br><span class=\"line\">        path = <span class=\"string\">\"/var/log/scripts/spotify.log\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Approach-1-cron-job\"><a href=\"#Approach-1-cron-job\" class=\"headerlink\" title=\"Approach #1 - cron job\"></a>Approach #1 - cron job</h2><p>The i3 status bar is refreshed automatically according to the configuration. Now, I just needed the way to save the song into the <code>/var/log/scripts/spotify.log</code> file. My first idea was to create a cron job, which will save the song every given interval.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*/2 * * * * /usr/bin/spotifycli --statusshort &gt; /var/<span class=\"built_in\">log</span>/scripts/spotify.log</span><br></pre></td></tr></table></figure>\n\n<p>Typical song has 2 minutes or more, so it should work. Unfortunately, my script uses <code>dbus</code> under the hood, which doesn’t have an access to the session of the desktop user. After searching the web for a while, I noticed that passing data from the user session into this script is not a trivial thing and cannot be done quickly. I decided to search for another solution.</p>\n<h2 id=\"Approach-2-media-buttons\"><a href=\"#Approach-2-media-buttons\" class=\"headerlink\" title=\"Approach #2 - media buttons\"></a>Approach #2 - media buttons</h2><p>I wanted to be able to control spotify via media buttons on my keyboard. On i3 it doesn’t work out of the box, and we need to configure it. To do that, I added the folloiwng key bindings in <code>~/.config/i3/config</code> file:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bindsym XF86AudioPlay <span class=\"built_in\">exec</span> <span class=\"string\">\"spotifycli --playpause\"</span></span><br><span class=\"line\">bindsym XF86AudioNext <span class=\"built_in\">exec</span> <span class=\"string\">\"spotifycli --next\"</span></span><br><span class=\"line\">bindsym XF86AudioPrev <span class=\"built_in\">exec</span> <span class=\"string\">\"spotifycli --prev\"</span></span><br></pre></td></tr></table></figure>\n\n<p>It works fine. We can also improve it, to make it work with other players, make it more general, etc., but in my case I use just Spotify for the music and podcasts, so it’s enough for me.</p>\n<p>We can update this functioanlity to save song whenever we change it or start it:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bindsym XF86AudioPlay <span class=\"built_in\">exec</span> <span class=\"string\">\"spotifycli --playpause &amp;&amp; spotifycli --statusshort &gt; /var/log/scripts/spotify.log\"</span></span><br><span class=\"line\">bindsym XF86AudioNext <span class=\"built_in\">exec</span> <span class=\"string\">\"spotifycli --next &amp;&amp; spotifycli --statusshort &gt; /var/log/scripts/spotify.log\"</span></span><br><span class=\"line\">bindsym XF86AudioPrev <span class=\"built_in\">exec</span> <span class=\"string\">\"spotifycli --prev &amp;&amp; spotifycli --statusshort &gt; /var/log/scripts/spotify.log\"</span></span><br></pre></td></tr></table></figure>\n\n<p>and this will work, but unfortunately, when song will change automatically on the playlist, status won’t be updated, so this solution is not right.</p>\n<h2 id=\"Approach-3-correct-notifications\"><a href=\"#Approach-3-correct-notifications\" class=\"headerlink\" title=\"Approach #3 (correct) - notifications\"></a>Approach #3 (correct) - notifications</h2><p>Spotify desktop application is sending notifications whenever the song changes. On i3, we need to install notification daemon/server, to make it work. On <a href=\"https://wiki.archlinux.org/index.php/Desktop_notifications#Notification_servers\" target=\"_blank\" rel=\"noopener\">Arch Wiki</a>, we can see list of the popular daemons. I decided to use <a href=\"https://dunst-project.org/\" target=\"_blank\" rel=\"noopener\">Dunst</a> because it’s simple, light-weight, open-source, configurable, is actively developed and supported by its maintainers. Once I installed Dunst and started it to enable daemon, I started receiving system notifications (including Spotify).</p>\n<p>I edited Dunst configuration in <code>~/.config/dust/dunstrc</code> file and added handler for Spotify:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[spotify]</span><br><span class=\"line\">    appname = Spotify</span><br><span class=\"line\">    urgency = normal</span><br><span class=\"line\">    script  = ~/.scripts/spotify_log.sh</span><br></pre></td></tr></table></figure>\n\n<p><code>spotify_log.sh</code> script looks as follows:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env bash</span></span><br><span class=\"line\">/usr/bin/spotifycli --statusshort &gt; /var/<span class=\"built_in\">log</span>/scripts/spotify.log</span><br></pre></td></tr></table></figure>\n\n<p>Now, whenever I receive a system notification from Spotify that song is changed, currently played song is saved into the file, this file is read by i3 status bar and refreshed in a given interval. Thanks to that, it doesn’t matter if song changes itself or I change it - it’s updated anyway and that’s what I wanted.</p>\n<p><img src=\"/images/posts/2020/spotify-song-in-i3-status-bar/i3bar_spotify.png\" alt></p>\n","more":"<p>While customizing my i3 status bar, I wanted to have currently played Spotify song in it. Some time ago, I created an open source script in Python called <a href=\"https://github.com/pwittchen/spotify-cli-linux\" target=\"_blank\" rel=\"noopener\">spotify-cli-linux</a> and I wanted to use it. When we want to put something custom into the i3 status bar, the easiest way to do it, is to save data into the file and then read the file.</p>\n<p>I created the following config inside <code>~/.config/i3status/config</code> file:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">order += <span class=\"string\">\"read_file spotify\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">read_file spotify &#123;</span><br><span class=\"line\">        format = <span class=\"string\">\"♪ %content\"</span></span><br><span class=\"line\">        path = <span class=\"string\">\"/var/log/scripts/spotify.log\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Approach-1-cron-job\"><a href=\"#Approach-1-cron-job\" class=\"headerlink\" title=\"Approach #1 - cron job\"></a>Approach #1 - cron job</h2><p>The i3 status bar is refreshed automatically according to the configuration. Now, I just needed the way to save the song into the <code>/var/log/scripts/spotify.log</code> file. My first idea was to create a cron job, which will save the song every given interval.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*/2 * * * * /usr/bin/spotifycli --statusshort &gt; /var/<span class=\"built_in\">log</span>/scripts/spotify.log</span><br></pre></td></tr></table></figure>\n\n<p>Typical song has 2 minutes or more, so it should work. Unfortunately, my script uses <code>dbus</code> under the hood, which doesn’t have an access to the session of the desktop user. After searching the web for a while, I noticed that passing data from the user session into this script is not a trivial thing and cannot be done quickly. I decided to search for another solution.</p>\n<h2 id=\"Approach-2-media-buttons\"><a href=\"#Approach-2-media-buttons\" class=\"headerlink\" title=\"Approach #2 - media buttons\"></a>Approach #2 - media buttons</h2><p>I wanted to be able to control spotify via media buttons on my keyboard. On i3 it doesn’t work out of the box, and we need to configure it. To do that, I added the folloiwng key bindings in <code>~/.config/i3/config</code> file:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bindsym XF86AudioPlay <span class=\"built_in\">exec</span> <span class=\"string\">\"spotifycli --playpause\"</span></span><br><span class=\"line\">bindsym XF86AudioNext <span class=\"built_in\">exec</span> <span class=\"string\">\"spotifycli --next\"</span></span><br><span class=\"line\">bindsym XF86AudioPrev <span class=\"built_in\">exec</span> <span class=\"string\">\"spotifycli --prev\"</span></span><br></pre></td></tr></table></figure>\n\n<p>It works fine. We can also improve it, to make it work with other players, make it more general, etc., but in my case I use just Spotify for the music and podcasts, so it’s enough for me.</p>\n<p>We can update this functioanlity to save song whenever we change it or start it:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bindsym XF86AudioPlay <span class=\"built_in\">exec</span> <span class=\"string\">\"spotifycli --playpause &amp;&amp; spotifycli --statusshort &gt; /var/log/scripts/spotify.log\"</span></span><br><span class=\"line\">bindsym XF86AudioNext <span class=\"built_in\">exec</span> <span class=\"string\">\"spotifycli --next &amp;&amp; spotifycli --statusshort &gt; /var/log/scripts/spotify.log\"</span></span><br><span class=\"line\">bindsym XF86AudioPrev <span class=\"built_in\">exec</span> <span class=\"string\">\"spotifycli --prev &amp;&amp; spotifycli --statusshort &gt; /var/log/scripts/spotify.log\"</span></span><br></pre></td></tr></table></figure>\n\n<p>and this will work, but unfortunately, when song will change automatically on the playlist, status won’t be updated, so this solution is not right.</p>\n<h2 id=\"Approach-3-correct-notifications\"><a href=\"#Approach-3-correct-notifications\" class=\"headerlink\" title=\"Approach #3 (correct) - notifications\"></a>Approach #3 (correct) - notifications</h2><p>Spotify desktop application is sending notifications whenever the song changes. On i3, we need to install notification daemon/server, to make it work. On <a href=\"https://wiki.archlinux.org/index.php/Desktop_notifications#Notification_servers\" target=\"_blank\" rel=\"noopener\">Arch Wiki</a>, we can see list of the popular daemons. I decided to use <a href=\"https://dunst-project.org/\" target=\"_blank\" rel=\"noopener\">Dunst</a> because it’s simple, light-weight, open-source, configurable, is actively developed and supported by its maintainers. Once I installed Dunst and started it to enable daemon, I started receiving system notifications (including Spotify).</p>\n<p>I edited Dunst configuration in <code>~/.config/dust/dunstrc</code> file and added handler for Spotify:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[spotify]</span><br><span class=\"line\">    appname = Spotify</span><br><span class=\"line\">    urgency = normal</span><br><span class=\"line\">    script  = ~/.scripts/spotify_log.sh</span><br></pre></td></tr></table></figure>\n\n<p><code>spotify_log.sh</code> script looks as follows:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env bash</span></span><br><span class=\"line\">/usr/bin/spotifycli --statusshort &gt; /var/<span class=\"built_in\">log</span>/scripts/spotify.log</span><br></pre></td></tr></table></figure>\n\n<p>Now, whenever I receive a system notification from Spotify that song is changed, currently played song is saved into the file, this file is read by i3 status bar and refreshed in a given interval. Thanks to that, it doesn’t matter if song changes itself or I change it - it’s updated anyway and that’s what I wanted.</p>\n<p><img src=\"/images/posts/2020/spotify-song-in-i3-status-bar/i3bar_spotify.png\" alt></p>\n","categories":[],"tags":[{"name":"linux","path":"api/tags/linux.json"},{"name":"python","path":"api/tags/python.json"},{"name":"bash","path":"api/tags/bash.json"},{"name":"arch","path":"api/tags/arch.json"},{"name":"spotify","path":"api/tags/spotify.json"},{"name":"i3","path":"api/tags/i3.json"}]}