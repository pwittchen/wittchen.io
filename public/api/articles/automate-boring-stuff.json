{"title":"Automate boring stuff","slug":"automate-boring-stuff","date":"2017-01-01T10:10:00.000Z","updated":"2019-07-03T22:51:02.806Z","comments":true,"path":"api/articles/automate-boring-stuff.json","excerpt":null,"covers":null,"content":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>In my current company all the people who perform creative work (mostly programmers) need to prepare so-called PKUP report. PKUP stands for <em>Podwyższone Koszty Uzyskania Przychodu</em> in the Polish language. It’s legal regulation in Poland, which allows paying a lower income tax due to the particular type of work. For the regular employee, it means that he or she will simply get a bit higher salary per month.</p>\n<h2 id=\"How-the-report-looks-in-practice\"><a href=\"#How-the-report-looks-in-practice\" class=\"headerlink\" title=\"How the report looks in practice?\"></a>How the report looks in practice?</h2><p>As a programmer, I simply create software as a source code. Added, removed and modified lines of code in the existing codebase are treated as my creative work. Luckily, we use Git so I can generate <code>*.diff</code> files from the Git repositories I’m contributing to. Besides that, I need to prepare document as a <code>*.docx</code> file with a short description of my work. My tasks look different every month, but <strong>report actually looks almost the same every month</strong>. Preparing this report is boring and repeatable stuff.</p>\n<h2 id=\"Let’s-automate-it\"><a href=\"#Let’s-automate-it\" class=\"headerlink\" title=\"Let’s automate it!\"></a>Let’s automate it!</h2><h3 id=\"Generating-diff-files-from-Git-repos\"><a href=\"#Generating-diff-files-from-Git-repos\" class=\"headerlink\" title=\"Generating *.diff files from Git repos\"></a>Generating <code>*.diff</code> files from Git repos</h3><p>I simply created a <a href=\"https://github.com/pwittchen/pkup/blob/master/pkup\" target=\"_blank\" rel=\"noopener\">shell script</a>, which goes through predefined project directories and saves <code>*.diff</code> files with names the same as project directory with changes performed by me from the 20th day of the last month until now.</p>\n<h3 id=\"Generating-docx-document\"><a href=\"#Generating-docx-document\" class=\"headerlink\" title=\"Generating *.docx document\"></a>Generating <code>*.docx</code> document</h3><p>Next, I created a <a href=\"https://github.com/pwittchen/pkup/blob/master/pkup_doc.py\" target=\"_blank\" rel=\"noopener\">python script</a>, which is parametrized and used by shell script. It uses <a href=\"https://python-docx.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"noopener\">python-docx</a> library for generating <code>*.docx</code> report. I’ve chosen such option, because it’s one of the simplest solutions I’ve found and it’s lightweight. Moreover it can be easily used on Unix systems and integrated with shell scripts.</p>\n<h2 id=\"Personalization\"><a href=\"#Personalization\" class=\"headerlink\" title=\"Personalization\"></a>Personalization</h2><p>I wanted to make a script available and usable for everyone, so I created <a href=\"https://github.com/pwittchen/pkup/blob/master/.pkup.conf\" target=\"_blank\" rel=\"noopener\">.pkup.conf</a> file, which is responsible for personalization and configuration of the script. I think, it looks pretty straightforward.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yDEV_PROJECTS_DIR=$yHYBRIS_SRC</span><br><span class=\"line\">yDEV_PROJECTS_LIST=(backoffice platform-backoffice cockpitng backofficesearch pcm pcmbackoffice cockpit cockpit-core)</span><br><span class=\"line\">yDEV_REPORT_DIR=~/Documents/hybris/pkup/raporty/doc/</span><br><span class=\"line\">yDEV_NAME=&quot;Your name&quot;</span><br><span class=\"line\">yDEV_SURNAME=&quot;Your surname&quot;</span><br><span class=\"line\">yDEV_ROLE=&quot;Software Developer&quot;</span><br><span class=\"line\">yDEV_DEPARTMENT=&quot;P&amp;I&quot;</span><br><span class=\"line\">yDEV_MANAGER=&quot;Your manager name and surname&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Installation-and-uninstallation\"><a href=\"#Installation-and-uninstallation\" class=\"headerlink\" title=\"Installation and uninstallation\"></a>Installation and uninstallation</h2><p>I also created <a href=\"https://github.com/pwittchen/pkup/blob/master/install.sh\" target=\"_blank\" rel=\"noopener\">installation script</a>, which allows to start using the scripts faster. Installation script install dependencies for python script, copies shell script and python script into <code>/usr/local/bin/</code> directory and <code>.pkup.conf</code> file into home directory. Configuration file needs to be adjusted by the user manually after installtion. Of course, there’s another script, which can be used for <a href=\"https://github.com/pwittchen/pkup/blob/master/uninstall.sh\" target=\"_blank\" rel=\"noopener\">uninstallation</a>.</p>\n<h2 id=\"Tests\"><a href=\"#Tests\" class=\"headerlink\" title=\"Tests\"></a>Tests</h2><p>There are python tests for this solution in <a href=\"https://github.com/pwittchen/pkup/blob/master/pkup_doc_test.py\" target=\"_blank\" rel=\"noopener\">pkup_doc_test.py</a> file, but they’re quite poor right now due to the limited amount of time. They can be a subject of improvements in the future. Note that such scripting solutions rarely have tests because they’re small and created ad-hoc. Nevertheless, I wanted to follow the philosophy from <a href=\"/2016/11/30/lifting-quality-of-a-shell-script/\">my last blog article</a> and create tests for any kind of software I make.</p>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>I’ve spent some time for preparing this stuff, but it was fun and I think it should save me and hopefully my co-workers some amount of time during creating reports every month. In the future, it can be improved by automatic generation of report messages and sending data to the server. </p>\n<p>To sum up, <strong>preparing reports manually is boring</strong>. <strong>Generating reports automatically is exciting</strong>! </p>\n<p>Complete solution described in this article with documentation is available on GitHub:<br><a href=\"https://github.com/pwittchen/pkup\" target=\"_blank\" rel=\"noopener\"><strong>https://github.com/pwittchen/pkup</strong></a>.</p>\n","more":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>In my current company all the people who perform creative work (mostly programmers) need to prepare so-called PKUP report. PKUP stands for <em>Podwyższone Koszty Uzyskania Przychodu</em> in the Polish language. It’s legal regulation in Poland, which allows paying a lower income tax due to the particular type of work. For the regular employee, it means that he or she will simply get a bit higher salary per month.</p>\n<h2 id=\"How-the-report-looks-in-practice\"><a href=\"#How-the-report-looks-in-practice\" class=\"headerlink\" title=\"How the report looks in practice?\"></a>How the report looks in practice?</h2><p>As a programmer, I simply create software as a source code. Added, removed and modified lines of code in the existing codebase are treated as my creative work. Luckily, we use Git so I can generate <code>*.diff</code> files from the Git repositories I’m contributing to. Besides that, I need to prepare document as a <code>*.docx</code> file with a short description of my work. My tasks look different every month, but <strong>report actually looks almost the same every month</strong>. Preparing this report is boring and repeatable stuff.</p>\n<h2 id=\"Let’s-automate-it\"><a href=\"#Let’s-automate-it\" class=\"headerlink\" title=\"Let’s automate it!\"></a>Let’s automate it!</h2><h3 id=\"Generating-diff-files-from-Git-repos\"><a href=\"#Generating-diff-files-from-Git-repos\" class=\"headerlink\" title=\"Generating *.diff files from Git repos\"></a>Generating <code>*.diff</code> files from Git repos</h3><p>I simply created a <a href=\"https://github.com/pwittchen/pkup/blob/master/pkup\" target=\"_blank\" rel=\"noopener\">shell script</a>, which goes through predefined project directories and saves <code>*.diff</code> files with names the same as project directory with changes performed by me from the 20th day of the last month until now.</p>\n<h3 id=\"Generating-docx-document\"><a href=\"#Generating-docx-document\" class=\"headerlink\" title=\"Generating *.docx document\"></a>Generating <code>*.docx</code> document</h3><p>Next, I created a <a href=\"https://github.com/pwittchen/pkup/blob/master/pkup_doc.py\" target=\"_blank\" rel=\"noopener\">python script</a>, which is parametrized and used by shell script. It uses <a href=\"https://python-docx.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"noopener\">python-docx</a> library for generating <code>*.docx</code> report. I’ve chosen such option, because it’s one of the simplest solutions I’ve found and it’s lightweight. Moreover it can be easily used on Unix systems and integrated with shell scripts.</p>\n<h2 id=\"Personalization\"><a href=\"#Personalization\" class=\"headerlink\" title=\"Personalization\"></a>Personalization</h2><p>I wanted to make a script available and usable for everyone, so I created <a href=\"https://github.com/pwittchen/pkup/blob/master/.pkup.conf\" target=\"_blank\" rel=\"noopener\">.pkup.conf</a> file, which is responsible for personalization and configuration of the script. I think, it looks pretty straightforward.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yDEV_PROJECTS_DIR=$yHYBRIS_SRC</span><br><span class=\"line\">yDEV_PROJECTS_LIST=(backoffice platform-backoffice cockpitng backofficesearch pcm pcmbackoffice cockpit cockpit-core)</span><br><span class=\"line\">yDEV_REPORT_DIR=~/Documents/hybris/pkup/raporty/doc/</span><br><span class=\"line\">yDEV_NAME=&quot;Your name&quot;</span><br><span class=\"line\">yDEV_SURNAME=&quot;Your surname&quot;</span><br><span class=\"line\">yDEV_ROLE=&quot;Software Developer&quot;</span><br><span class=\"line\">yDEV_DEPARTMENT=&quot;P&amp;I&quot;</span><br><span class=\"line\">yDEV_MANAGER=&quot;Your manager name and surname&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Installation-and-uninstallation\"><a href=\"#Installation-and-uninstallation\" class=\"headerlink\" title=\"Installation and uninstallation\"></a>Installation and uninstallation</h2><p>I also created <a href=\"https://github.com/pwittchen/pkup/blob/master/install.sh\" target=\"_blank\" rel=\"noopener\">installation script</a>, which allows to start using the scripts faster. Installation script install dependencies for python script, copies shell script and python script into <code>/usr/local/bin/</code> directory and <code>.pkup.conf</code> file into home directory. Configuration file needs to be adjusted by the user manually after installtion. Of course, there’s another script, which can be used for <a href=\"https://github.com/pwittchen/pkup/blob/master/uninstall.sh\" target=\"_blank\" rel=\"noopener\">uninstallation</a>.</p>\n<h2 id=\"Tests\"><a href=\"#Tests\" class=\"headerlink\" title=\"Tests\"></a>Tests</h2><p>There are python tests for this solution in <a href=\"https://github.com/pwittchen/pkup/blob/master/pkup_doc_test.py\" target=\"_blank\" rel=\"noopener\">pkup_doc_test.py</a> file, but they’re quite poor right now due to the limited amount of time. They can be a subject of improvements in the future. Note that such scripting solutions rarely have tests because they’re small and created ad-hoc. Nevertheless, I wanted to follow the philosophy from <a href=\"/2016/11/30/lifting-quality-of-a-shell-script/\">my last blog article</a> and create tests for any kind of software I make.</p>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>I’ve spent some time for preparing this stuff, but it was fun and I think it should save me and hopefully my co-workers some amount of time during creating reports every month. In the future, it can be improved by automatic generation of report messages and sending data to the server. </p>\n<p>To sum up, <strong>preparing reports manually is boring</strong>. <strong>Generating reports automatically is exciting</strong>! </p>\n<p>Complete solution described in this article with documentation is available on GitHub:<br><a href=\"https://github.com/pwittchen/pkup\" target=\"_blank\" rel=\"noopener\"><strong>https://github.com/pwittchen/pkup</strong></a>.</p>\n","categories":[],"tags":[{"name":"git","path":"api/tags/git.json"},{"name":"python","path":"api/tags/python.json"},{"name":"bash","path":"api/tags/bash.json"}]}