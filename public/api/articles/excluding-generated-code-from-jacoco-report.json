{"title":"Excluding generated code from JaCoCo report","slug":"excluding-generated-code-from-jacoco-report","date":"2018-09-18T18:07:30.000Z","updated":"2019-07-03T22:51:02.810Z","comments":true,"path":"api/articles/excluding-generated-code-from-jacoco-report.json","excerpt":null,"covers":null,"content":"<p>I recently wrote a simple java app with Dagger 2 as a DI container and Gradle as a build system. I wanted to generate unit test coverage report for this app, so I used Jacoco.</p>\n<p>In my <code>build.gradle</code> file I configured JaCoCo as follows:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins &#123;</span><br><span class=\"line\">  id <span class=\"string\">'jacoco'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">jacocoTestReport &#123;</span><br><span class=\"line\">  reports &#123;</span><br><span class=\"line\">    xml.enabled = <span class=\"keyword\">true</span></span><br><span class=\"line\">    html.enabled = <span class=\"keyword\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Now, I could type:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./gradlew test jacocoTestReport</span><br></pre></td></tr></table></figure>\n\n<p>Report was generated in <code>build/reports/jacoco/</code> directory. I noticed that report includes Java code generated by Dagger during the compilation. I didn’t want to include it in the report because it doesn’t really make any sense to write unit tests for generated code.</p>\n<p>I compiled project and browsed classes generated in <code>build/classes/</code> directory. I’ve noticed that Dagger classes have similar patterns like:</p>\n<ul>\n<li><code>DaggerApplicationComponent.class</code></li>\n<li><code>ControllerModule_MemberInjector.class</code></li>\n<li><code>ControllerModule_ProvideContextWrapperFactory.class</code></li>\n<li><code>AccountController_Factory.class</code></li>\n<li>and so on…</li>\n</ul>\n<p>As you can see <code>ApplicationComponent</code> interface got its implementation with <code>Dagger</code> prefix and classes related to modules has postfixes like <code>_MemberInjector</code>, <code>_Provide*</code> and <code>_Factory</code>.</p>\n<p>With this knowledge, I could improve my JaCoCo configuration and exclude classes, which match the Dagger pattern.</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jacocoTestReport &#123;</span><br><span class=\"line\">  reports &#123;</span><br><span class=\"line\">    xml.enabled = <span class=\"keyword\">true</span></span><br><span class=\"line\">    html.enabled = <span class=\"keyword\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  afterEvaluate &#123;</span><br><span class=\"line\">    classDirectories = files(classDirectories.files.<span class=\"keyword\">collect</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">fileTree</span>(dir: it,</span><br><span class=\"line\">              excludes: [</span><br><span class=\"line\">                      <span class=\"string\">'**/*_Provide*/**'</span>,</span><br><span class=\"line\">                      <span class=\"string\">'**/*_Factory*/**'</span>,</span><br><span class=\"line\">                      <span class=\"string\">'**/*_MembersInjector.class'</span>,</span><br><span class=\"line\">                      <span class=\"string\">'**/*Dagger*'</span></span><br><span class=\"line\">              ])</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Now, my report contains only code which was written by me and automatically generated classes are excluded.</p>\n<p>You can apply similar trick while using other libraries, which generates Java code.</p>\n","more":"<p>I recently wrote a simple java app with Dagger 2 as a DI container and Gradle as a build system. I wanted to generate unit test coverage report for this app, so I used Jacoco.</p>\n<p>In my <code>build.gradle</code> file I configured JaCoCo as follows:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins &#123;</span><br><span class=\"line\">  id <span class=\"string\">'jacoco'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">jacocoTestReport &#123;</span><br><span class=\"line\">  reports &#123;</span><br><span class=\"line\">    xml.enabled = <span class=\"keyword\">true</span></span><br><span class=\"line\">    html.enabled = <span class=\"keyword\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Now, I could type:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./gradlew test jacocoTestReport</span><br></pre></td></tr></table></figure>\n\n<p>Report was generated in <code>build/reports/jacoco/</code> directory. I noticed that report includes Java code generated by Dagger during the compilation. I didn’t want to include it in the report because it doesn’t really make any sense to write unit tests for generated code.</p>\n<p>I compiled project and browsed classes generated in <code>build/classes/</code> directory. I’ve noticed that Dagger classes have similar patterns like:</p>\n<ul>\n<li><code>DaggerApplicationComponent.class</code></li>\n<li><code>ControllerModule_MemberInjector.class</code></li>\n<li><code>ControllerModule_ProvideContextWrapperFactory.class</code></li>\n<li><code>AccountController_Factory.class</code></li>\n<li>and so on…</li>\n</ul>\n<p>As you can see <code>ApplicationComponent</code> interface got its implementation with <code>Dagger</code> prefix and classes related to modules has postfixes like <code>_MemberInjector</code>, <code>_Provide*</code> and <code>_Factory</code>.</p>\n<p>With this knowledge, I could improve my JaCoCo configuration and exclude classes, which match the Dagger pattern.</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jacocoTestReport &#123;</span><br><span class=\"line\">  reports &#123;</span><br><span class=\"line\">    xml.enabled = <span class=\"keyword\">true</span></span><br><span class=\"line\">    html.enabled = <span class=\"keyword\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  afterEvaluate &#123;</span><br><span class=\"line\">    classDirectories = files(classDirectories.files.<span class=\"keyword\">collect</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">fileTree</span>(dir: it,</span><br><span class=\"line\">              excludes: [</span><br><span class=\"line\">                      <span class=\"string\">'**/*_Provide*/**'</span>,</span><br><span class=\"line\">                      <span class=\"string\">'**/*_Factory*/**'</span>,</span><br><span class=\"line\">                      <span class=\"string\">'**/*_MembersInjector.class'</span>,</span><br><span class=\"line\">                      <span class=\"string\">'**/*Dagger*'</span></span><br><span class=\"line\">              ])</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Now, my report contains only code which was written by me and automatically generated classes are excluded.</p>\n<p>You can apply similar trick while using other libraries, which generates Java code.</p>\n","categories":[],"tags":[{"name":"java","path":"api/tags/java.json"},{"name":"gradle","path":"api/tags/gradle.json"},{"name":"testing","path":"api/tags/testing.json"},{"name":"jacoco","path":"api/tags/jacoco.json"},{"name":"coverage","path":"api/tags/coverage.json"}]}