{"title":"Introducing ReactiveBus","slug":"introducing-reactive-bus","date":"2018-03-11T19:02:45.000Z","updated":"2019-07-03T22:51:02.813Z","comments":true,"path":"api/articles/introducing-reactive-bus.json","excerpt":null,"covers":null,"content":"<p>Today, I’ve released my another tiny project. It’s a very simple implementation of Event Bus with RxJava 2 under the hood. This library is compatible with Java 1.7 or higher. I didn’t use Java 1.8 or 1.9 because I wanted to make it compatible with Android apps.</p>\n<p>You can use it as follows:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Bus bus = ReactiveBus.create();</span><br><span class=\"line\"></span><br><span class=\"line\">Disposable observer = bus.receive().subscribe(<span class=\"keyword\">new</span> Consumer&lt;Event&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Event event)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// handle event here</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Once, we created Event Bus object and our observer (or more precisely: disposable subscriber), we can start sending events:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bus.send(Event.name(<span class=\"string\">\"my event\"</span>).build());</span><br></pre></td></tr></table></figure>\n\n<p>We can also send some serializable data:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bus.send(Event.name(<span class=\"string\">\"my another event with data\"</span>).data(serializableObject).build());</span><br></pre></td></tr></table></figure>\n\n<p>All events, will be received by the consumer in <code>subscribe(...)</code> method.</p>\n<p>If we want to stop propagation of the events, we can just dispose observer like any RxJava subscription:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">observer.dispose();</span><br></pre></td></tr></table></figure>\n\n<p>Actually, most of the work is done by RxJava itself. In this project, I just put a few pieces together and played around with them in unit tests.</p>\n<p>With such kind of Event Bus implementation, we can create fluent, functional, reactive piplines of data flow in our apps.</p>\n<p>You can include this tiny library in your project via Maven:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.pwittchen<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>reactivebus<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.reactivex.rxjava2<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>rxjava<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>or via Gradle:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation <span class=\"string\">'com.github.pwittchen:reactivebus:0.0.5'</span></span><br><span class=\"line\">implementation <span class=\"string\">'io.reactivex.rxjava2:rxjava:2.1.10'</span></span><br></pre></td></tr></table></figure>\n\n<p>For more details, visit project repository on GitHub: <a href=\"https://github.com/pwittchen/ReactiveBus\" target=\"_blank\" rel=\"noopener\">https://github.com/pwittchen/ReactiveBus</a></p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><strong>Articles</strong>:<ul>\n<li><a href=\"https://blog.mindorks.com/understanding-rxjava-subject-publish-replay-behavior-and-async-subject-224d663d452f\" target=\"_blank\" rel=\"noopener\">Understanding RxJava Subject — Publish, Replay, Behavior and Async Subject</a></li>\n<li><a href=\"https://github.com/ReactiveX/RxJava/wiki/What%27s-different-in-2.0\" target=\"_blank\" rel=\"noopener\">What’s different in RxJava 2.0?</a></li>\n<li><a href=\"https://blog.kaush.co/2014/12/24/implementing-an-event-bus-with-rxjava-rxbus/\" target=\"_blank\" rel=\"noopener\">Implementing an Event Bus with RxJava 1</a></li>\n</ul>\n</li>\n<li><strong>Other Event Bus implementations</strong>:<ul>\n<li><a href=\"https://github.com/square/otto\" target=\"_blank\" rel=\"noopener\">Otto</a></li>\n<li><a href=\"https://github.com/google/guava/wiki/EventBusExplained\" target=\"_blank\" rel=\"noopener\">Event Bus in Guava</a></li>\n<li><a href=\"https://github.com/greenrobot/EventBus\" target=\"_blank\" rel=\"noopener\">GreenRobot’s Event Bus</a></li>\n</ul>\n</li>\n</ul>\n","more":"<p>Today, I’ve released my another tiny project. It’s a very simple implementation of Event Bus with RxJava 2 under the hood. This library is compatible with Java 1.7 or higher. I didn’t use Java 1.8 or 1.9 because I wanted to make it compatible with Android apps.</p>\n<p>You can use it as follows:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Bus bus = ReactiveBus.create();</span><br><span class=\"line\"></span><br><span class=\"line\">Disposable observer = bus.receive().subscribe(<span class=\"keyword\">new</span> Consumer&lt;Event&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Event event)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// handle event here</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Once, we created Event Bus object and our observer (or more precisely: disposable subscriber), we can start sending events:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bus.send(Event.name(<span class=\"string\">\"my event\"</span>).build());</span><br></pre></td></tr></table></figure>\n\n<p>We can also send some serializable data:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bus.send(Event.name(<span class=\"string\">\"my another event with data\"</span>).data(serializableObject).build());</span><br></pre></td></tr></table></figure>\n\n<p>All events, will be received by the consumer in <code>subscribe(...)</code> method.</p>\n<p>If we want to stop propagation of the events, we can just dispose observer like any RxJava subscription:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">observer.dispose();</span><br></pre></td></tr></table></figure>\n\n<p>Actually, most of the work is done by RxJava itself. In this project, I just put a few pieces together and played around with them in unit tests.</p>\n<p>With such kind of Event Bus implementation, we can create fluent, functional, reactive piplines of data flow in our apps.</p>\n<p>You can include this tiny library in your project via Maven:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.pwittchen<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>reactivebus<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.reactivex.rxjava2<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>rxjava<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>or via Gradle:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation <span class=\"string\">'com.github.pwittchen:reactivebus:0.0.5'</span></span><br><span class=\"line\">implementation <span class=\"string\">'io.reactivex.rxjava2:rxjava:2.1.10'</span></span><br></pre></td></tr></table></figure>\n\n<p>For more details, visit project repository on GitHub: <a href=\"https://github.com/pwittchen/ReactiveBus\" target=\"_blank\" rel=\"noopener\">https://github.com/pwittchen/ReactiveBus</a></p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><strong>Articles</strong>:<ul>\n<li><a href=\"https://blog.mindorks.com/understanding-rxjava-subject-publish-replay-behavior-and-async-subject-224d663d452f\" target=\"_blank\" rel=\"noopener\">Understanding RxJava Subject — Publish, Replay, Behavior and Async Subject</a></li>\n<li><a href=\"https://github.com/ReactiveX/RxJava/wiki/What%27s-different-in-2.0\" target=\"_blank\" rel=\"noopener\">What’s different in RxJava 2.0?</a></li>\n<li><a href=\"https://blog.kaush.co/2014/12/24/implementing-an-event-bus-with-rxjava-rxbus/\" target=\"_blank\" rel=\"noopener\">Implementing an Event Bus with RxJava 1</a></li>\n</ul>\n</li>\n<li><strong>Other Event Bus implementations</strong>:<ul>\n<li><a href=\"https://github.com/square/otto\" target=\"_blank\" rel=\"noopener\">Otto</a></li>\n<li><a href=\"https://github.com/google/guava/wiki/EventBusExplained\" target=\"_blank\" rel=\"noopener\">Event Bus in Guava</a></li>\n<li><a href=\"https://github.com/greenrobot/EventBus\" target=\"_blank\" rel=\"noopener\">GreenRobot’s Event Bus</a></li>\n</ul>\n</li>\n</ul>\n","categories":[],"tags":[{"name":"android","path":"api/tags/android.json"},{"name":"java","path":"api/tags/java.json"},{"name":"open-source","path":"api/tags/open-source.json"},{"name":"rxjava","path":"api/tags/rxjava.json"},{"name":"event-bus","path":"api/tags/event-bus.json"}]}